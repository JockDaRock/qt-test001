/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MarketplaceSourceCollection'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MarketplaceSourceCollection'));
  } else {
    // Browser globals (root is window)
    if (!root.PerchApi) {
      root.PerchApi = {};
    }
    root.PerchApi.EventNotification = factory(root.PerchApi.ApiClient, root.PerchApi.MarketplaceSourceCollection);
  }
}(this, function(ApiClient, MarketplaceSourceCollection) {
  'use strict';

  /**
   * The EventNotification model module.
   * @module model/EventNotification
   * @version v1
   */

  /**
   * Constructs a new <code>EventNotification</code>.
   * @alias module:model/EventNotification
   * @class
   * @param name {String} User defined name of this Event Notification.
   * @param schedule {Object} The Watcher interval used to schedule watches.
   * @param severity {Number} 
   * @param timeWindow {Object} The date range used to filter ES query results.
   * @param triggerCondition {Number} 
   */
  var exports = function(name, schedule, severity, timeWindow, triggerCondition) {
    this.name = name;
    this.schedule = schedule;
    this.severity = severity;
    this.timeWindow = timeWindow;
    this.triggerCondition = triggerCondition;
  };

  /**
   * Constructs a <code>EventNotification</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EventNotification} obj Optional instance to populate.
   * @return {module:model/EventNotification} The populated <code>EventNotification</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('aggregation_field'))
        obj.aggregationField = ApiClient.convertToType(data['aggregation_field'], 'Number');
      if (data.hasOwnProperty('aggregation_type'))
        obj.aggregationType = ApiClient.convertToType(data['aggregation_type'], 'String');
      if (data.hasOwnProperty('comparison_field'))
        obj.comparisonField = ApiClient.convertToType(data['comparison_field'], 'Number');
      if (data.hasOwnProperty('created_at'))
        obj.createdAt = ApiClient.convertToType(data['created_at'], 'Date');
      if (data.hasOwnProperty('created_by'))
        obj.createdBy = ApiClient.convertToType(data['created_by'], 'String');
      if (data.hasOwnProperty('created_by_team'))
        obj.createdByTeam = ApiClient.convertToType(data['created_by_team'], 'Number');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('email_action_custom_recipients'))
        obj.emailActionCustomRecipients = ApiClient.convertToType(data['email_action_custom_recipients'], ['String']);
      if (data.hasOwnProperty('enable_cw_manage_action_default'))
        obj.enableCwManageActionDefault = ApiClient.convertToType(data['enable_cw_manage_action_default'], 'Boolean');
      if (data.hasOwnProperty('enable_email_action_default_recipients'))
        obj.enableEmailActionDefaultRecipients = ApiClient.convertToType(data['enable_email_action_default_recipients'], 'Boolean');
      if (data.hasOwnProperty('enable_email_action_custom_recipients'))
        obj.enableEmailActionCustomRecipients = ApiClient.convertToType(data['enable_email_action_custom_recipients'], 'Boolean');
      if (data.hasOwnProperty('enable_freshdesk_action_default_ticket_type'))
        obj.enableFreshdeskActionDefaultTicketType = ApiClient.convertToType(data['enable_freshdesk_action_default_ticket_type'], 'Boolean');
      if (data.hasOwnProperty('enable_freshdesk_action_custom_ticket_type'))
        obj.enableFreshdeskActionCustomTicketType = ApiClient.convertToType(data['enable_freshdesk_action_custom_ticket_type'], 'Boolean');
      if (data.hasOwnProperty('enable_msft_teams_action_default_webhook_url'))
        obj.enableMsftTeamsActionDefaultWebhookUrl = ApiClient.convertToType(data['enable_msft_teams_action_default_webhook_url'], 'Boolean');
      if (data.hasOwnProperty('enable_msft_teams_action_custom_webhook_url'))
        obj.enableMsftTeamsActionCustomWebhookUrl = ApiClient.convertToType(data['enable_msft_teams_action_custom_webhook_url'], 'Boolean');
      if (data.hasOwnProperty('enable_slack_action_default_channel'))
        obj.enableSlackActionDefaultChannel = ApiClient.convertToType(data['enable_slack_action_default_channel'], 'Boolean');
      if (data.hasOwnProperty('enable_slack_action_custom_channel'))
        obj.enableSlackActionCustomChannel = ApiClient.convertToType(data['enable_slack_action_custom_channel'], 'Boolean');
      if (data.hasOwnProperty('enable_sms_action_default_recipients'))
        obj.enableSmsActionDefaultRecipients = ApiClient.convertToType(data['enable_sms_action_default_recipients'], 'Boolean');
      if (data.hasOwnProperty('enable_sms_action_custom_recipients'))
        obj.enableSmsActionCustomRecipients = ApiClient.convertToType(data['enable_sms_action_custom_recipients'], 'Boolean');
      if (data.hasOwnProperty('freshdesk_action_custom_ticket_type'))
        obj.freshdeskActionCustomTicketType = ApiClient.convertToType(data['freshdesk_action_custom_ticket_type'], 'String');
      if (data.hasOwnProperty('index_mapping'))
        obj.indexMapping = ApiClient.convertToType(data['index_mapping'], 'Number');
      if (data.hasOwnProperty('is_enabled'))
        obj.isEnabled = ApiClient.convertToType(data['is_enabled'], 'Boolean');
      if (data.hasOwnProperty('is_locked'))
        obj.isLocked = ApiClient.convertToType(data['is_locked'], 'String');
      if (data.hasOwnProperty('fields_for_display'))
        obj.fieldsForDisplay = ApiClient.convertToType(data['fields_for_display'], ['Number']);
      if (data.hasOwnProperty('keyword_filter'))
        obj.keywordFilter = ApiClient.convertToType(data['keyword_filter'], 'String');
      if (data.hasOwnProperty('kibana_query'))
        obj.kibanaQuery = ApiClient.convertToType(data['kibana_query'], 'String');
      if (data.hasOwnProperty('last_triggered_at'))
        obj.lastTriggeredAt = ApiClient.convertToType(data['last_triggered_at'], 'Date');
      if (data.hasOwnProperty('marketplace_source_collection'))
        obj.marketplaceSourceCollection = MarketplaceSourceCollection.constructFromObject(data['marketplace_source_collection']);
      if (data.hasOwnProperty('mitre_attack_tactic'))
        obj.mitreAttackTactic = ApiClient.convertToType(data['mitre_attack_tactic'], 'String');
      if (data.hasOwnProperty('msearch_query'))
        obj.msearchQuery = ApiClient.convertToType(data['msearch_query'], 'String');
      if (data.hasOwnProperty('msft_teams_action_custom_webhook_url'))
        obj.msftTeamsActionCustomWebhookUrl = ApiClient.convertToType(data['msft_teams_action_custom_webhook_url'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('perch_alert_enabled'))
        obj.perchAlertEnabled = ApiClient.convertToType(data['perch_alert_enabled'], 'Boolean');
      if (data.hasOwnProperty('prev_time_window'))
        obj.prevTimeWindow = ApiClient.convertToType(data['prev_time_window'], Object);
      if (data.hasOwnProperty('query_filter'))
        obj.queryFilter = ApiClient.convertToType(data['query_filter'], Object);
      if (data.hasOwnProperty('representation_field'))
        obj.representationField = ApiClient.convertToType(data['representation_field'], 'Number');
      if (data.hasOwnProperty('schedule'))
        obj.schedule = ApiClient.convertToType(data['schedule'], Object);
      if (data.hasOwnProperty('severity'))
        obj.severity = ApiClient.convertToType(data['severity'], 'Number');
      if (data.hasOwnProperty('slack_action_custom_channel'))
        obj.slackActionCustomChannel = ApiClient.convertToType(data['slack_action_custom_channel'], 'String');
      if (data.hasOwnProperty('sms_action_custom_recipients'))
        obj.smsActionCustomRecipients = ApiClient.convertToType(data['sms_action_custom_recipients'], ['String']);
      if (data.hasOwnProperty('spike_percentage'))
        obj.spikePercentage = ApiClient.convertToType(data['spike_percentage'], 'Number');
      if (data.hasOwnProperty('threshold_count'))
        obj.thresholdCount = ApiClient.convertToType(data['threshold_count'], 'Number');
      if (data.hasOwnProperty('throttle_period'))
        obj.throttlePeriod = ApiClient.convertToType(data['throttle_period'], 'Number');
      if (data.hasOwnProperty('time_field'))
        obj.timeField = ApiClient.convertToType(data['time_field'], 'Number');
      if (data.hasOwnProperty('time_window'))
        obj.timeWindow = ApiClient.convertToType(data['time_window'], Object);
      if (data.hasOwnProperty('trigger_condition'))
        obj.triggerCondition = ApiClient.convertToType(data['trigger_condition'], 'Number');
      if (data.hasOwnProperty('updated_at'))
        obj.updatedAt = ApiClient.convertToType(data['updated_at'], 'Date');
      if (data.hasOwnProperty('updated_by'))
        obj.updatedBy = ApiClient.convertToType(data['updated_by'], 'String');
      if (data.hasOwnProperty('watch_error'))
        obj.watchError = ApiClient.convertToType(data['watch_error'], 'String');
    }
    return obj;
  }

  /**
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * The field ES query results will be aggregated on.
   * @member {Number} aggregationField
   */
  exports.prototype.aggregationField = undefined;

  /**
   * @member {module:model/EventNotification.AggregationTypeEnum} aggregationType
   */
  exports.prototype.aggregationType = undefined;

  /**
   * The field historical results will be compared by to determine if there are matching results. (Only Trigger Conditions New Value and Repeated Value)
   * @member {Number} comparisonField
   */
  exports.prototype.comparisonField = undefined;

  /**
   * @member {Date} createdAt
   */
  exports.prototype.createdAt = undefined;

  /**
   * @member {String} createdBy
   */
  exports.prototype.createdBy = undefined;

  /**
   * The Team that this Event Notification is visible to as well as the Team whose data will be searched.
   * @member {Number} createdByTeam
   */
  exports.prototype.createdByTeam = undefined;

  /**
   * User defined description that will be used in external messaging.
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * One-off recipients to send notifications to, if enable_email_action_custom_recipients is True.
   * @member {Array.<String>} emailActionCustomRecipients
   */
  exports.prototype.emailActionCustomRecipients = undefined;

  /**
   * Whether to create a ConnectWise Manage ticket in the service board configured in the organization's CW Manage settings.
   * @member {Boolean} enableCwManageActionDefault
   */
  exports.prototype.enableCwManageActionDefault = undefined;

  /**
   * Whether to send notifications to the recipients configured in the organization's email settings.
   * @member {Boolean} enableEmailActionDefaultRecipients
   */
  exports.prototype.enableEmailActionDefaultRecipients = undefined;

  /**
   * Whether to send notifications to the recipients configured in this Event Notification.
   * @member {Boolean} enableEmailActionCustomRecipients
   */
  exports.prototype.enableEmailActionCustomRecipients = undefined;

  /**
   * Whether to create a FreshDesk ticket with the default ticket type configured in the orgaization's FreshDesk settings.
   * @member {Boolean} enableFreshdeskActionDefaultTicketType
   */
  exports.prototype.enableFreshdeskActionDefaultTicketType = undefined;

  /**
   * Whether to create a FreshDesk ticket with the custom ticket type configured in this Event Notification.
   * @member {Boolean} enableFreshdeskActionCustomTicketType
   */
  exports.prototype.enableFreshdeskActionCustomTicketType = undefined;

  /**
   * Whether to send notifications to the webhook URL configured in the organization's MSFT Teams settings.
   * @member {Boolean} enableMsftTeamsActionDefaultWebhookUrl
   */
  exports.prototype.enableMsftTeamsActionDefaultWebhookUrl = undefined;

  /**
   * Whether to send notifications to the webhook URL configured in this Event Notification.
   * @member {Boolean} enableMsftTeamsActionCustomWebhookUrl
   */
  exports.prototype.enableMsftTeamsActionCustomWebhookUrl = undefined;

  /**
   * Whether to send notifications to the channel configured in the organization's Slack settings.
   * @member {Boolean} enableSlackActionDefaultChannel
   */
  exports.prototype.enableSlackActionDefaultChannel = undefined;

  /**
   * Whether to send notifications to the Slack channel configured in this Event Notification.
   * @member {Boolean} enableSlackActionCustomChannel
   */
  exports.prototype.enableSlackActionCustomChannel = undefined;

  /**
   * Whether to send SMS notifications to the recipients configured in the organization's SMS settings.
   * @member {Boolean} enableSmsActionDefaultRecipients
   */
  exports.prototype.enableSmsActionDefaultRecipients = undefined;

  /**
   * Whether to send SMS notifications to the recipients configured in this Event Notification.
   * @member {Boolean} enableSmsActionCustomRecipients
   */
  exports.prototype.enableSmsActionCustomRecipients = undefined;

  /**
   * One-off ticket type to use for tickets created by this notification, if enable_freshdesk_action_custom_ticket_type is True.
   * @member {String} freshdeskActionCustomTicketType
   */
  exports.prototype.freshdeskActionCustomTicketType = undefined;

  /**
   * The EventNotificationAlertableMapping used to define ES query index patterns.
   * @member {Number} indexMapping
   */
  exports.prototype.indexMapping = undefined;

  /**
   * Whether the Watch associated with this Event Notification is actively scheduled to run.
   * @member {Boolean} isEnabled
   */
  exports.prototype.isEnabled = undefined;

  /**
   * @member {String} isLocked
   */
  exports.prototype.isLocked = undefined;

  /**
   * Controls what fields are displayed in Kibana discover queries and metadata about triggered_values.
   * @member {Array.<Number>} fieldsForDisplay
   */
  exports.prototype.fieldsForDisplay = undefined;

  /**
   * Used to enable searching by a raw query_string in constructed ES queries.
   * @member {String} keywordFilter
   */
  exports.prototype.keywordFilter = undefined;

  /**
   * @member {String} kibanaQuery
   */
  exports.prototype.kibanaQuery = undefined;

  /**
   * When this notification was last triggered
   * @member {Date} lastTriggeredAt
   */
  exports.prototype.lastTriggeredAt = undefined;

  /**
   * @member {module:model/MarketplaceSourceCollection} marketplaceSourceCollection
   */
  exports.prototype.marketplaceSourceCollection = undefined;

  /**
   * The MITRE ATT&CK Tactic that is mapped to this Event Notification
   * @member {String} mitreAttackTactic
   */
  exports.prototype.mitreAttackTactic = undefined;

  /**
   * @member {String} msearchQuery
   */
  exports.prototype.msearchQuery = undefined;

  /**
   * One-off webhook URL to send notifications to, if enable_msft_teams_action_custom_webhook_url is True.
   * @member {String} msftTeamsActionCustomWebhookUrl
   */
  exports.prototype.msftTeamsActionCustomWebhookUrl = undefined;

  /**
   * User defined name of this Event Notification.
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * Whether to create a SecurityEventAlert within Perch for each distinct trigger value.
   * @member {Boolean} perchAlertEnabled
   */
  exports.prototype.perchAlertEnabled = undefined;

  /**
   * When used with a historical trigger this will define the previous date range to also run queries against.
   * @member {Object} prevTimeWindow
   */
  exports.prototype.prevTimeWindow = undefined;

  /**
   * Used to enable searching by multiple conditions in constructed ES queries.
   * @member {Object} queryFilter
   */
  exports.prototype.queryFilter = undefined;

  /**
   * When neither aggregation_field or comparison_field is set this controls the field used to represent triggered_values found by an Event Notification.
   * @member {Number} representationField
   */
  exports.prototype.representationField = undefined;

  /**
   * The Watcher interval used to schedule watches.
   * @member {Object} schedule
   */
  exports.prototype.schedule = undefined;

  /**
   * @member {Number} severity
   */
  exports.prototype.severity = undefined;

  /**
   * One-off channel to send notifications to, if enable_slack_action_custom_channel is True.
   * @member {String} slackActionCustomChannel
   */
  exports.prototype.slackActionCustomChannel = undefined;

  /**
   * One-off recipients to send SMS notifications to, if enable_sms_action_custom_recipients is True.
   * @member {Array.<String>} smsActionCustomRecipients
   */
  exports.prototype.smsActionCustomRecipients = undefined;

  /**
   * When positive, indicates the percentage that must be exceeded to trigger an Event Notification using trigger_condition Spike. When negative, indicates the percentage under which a Spike notification will trigger.
   * @member {Number} spikePercentage
   */
  exports.prototype.spikePercentage = undefined;

  /**
   * When positive, indicates the number of matches that must be exceeded to trigger an Event Notification using trigger_condition Threshold. When negative, indicates the value under which a Threshold notification will trigger.
   * @member {Number} thresholdCount
   */
  exports.prototype.thresholdCount = undefined;

  /**
   * @member {Number} throttlePeriod
   */
  exports.prototype.throttlePeriod = undefined;

  /**
   * The field on which date filters will be applied in constructed ES queries. When null timestamp is used by default.
   * @member {Number} timeField
   */
  exports.prototype.timeField = undefined;

  /**
   * The date range used to filter ES query results.
   * @member {Object} timeWindow
   */
  exports.prototype.timeWindow = undefined;

  /**
   * @member {Number} triggerCondition
   */
  exports.prototype.triggerCondition = undefined;

  /**
   * @member {Date} updatedAt
   */
  exports.prototype.updatedAt = undefined;

  /**
   * @member {String} updatedBy
   */
  exports.prototype.updatedBy = undefined;

  /**
   * Any errors currently affecting the Watch
   * @member {String} watchError
   */
  exports.prototype.watchError = undefined;


  /**
   * Allowed values for the <code>aggregationType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AggregationTypeEnum = {
    /**
     * value: "Average"
     * @const
     */
    average: "Average",

    /**
     * value: "Unique Count"
     * @const
     */
    uniqueCount: "Unique Count",

    /**
     * value: "Count"
     * @const
     */
    count: "Count",

    /**
     * value: "Max"
     * @const
     */
    max: "Max",

    /**
     * value: "Min"
     * @const
     */
    min: "Min",

    /**
     * value: "Sum"
     * @const
     */
    sum: "Sum"
  };

  return exports;

}));
