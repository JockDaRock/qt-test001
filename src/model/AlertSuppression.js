/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.PerchApi) {
      root.PerchApi = {};
    }
    root.PerchApi.AlertSuppression = factory(root.PerchApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The AlertSuppression model module.
   * @module model/AlertSuppression
   * @version v1
   */

  /**
   * Constructs a new <code>AlertSuppression</code>.
   * @alias module:model/AlertSuppression
   * @class
   * @param teamId {Number} 
   * @param indicatorId {String} 
   * @param reason {Number} 
   */
  var exports = function(teamId, indicatorId, reason) {
    this.teamId = teamId;
    this.indicatorId = indicatorId;
    this.reason = reason;
  };

  /**
   * Constructs a <code>AlertSuppression</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AlertSuppression} obj Optional instance to populate.
   * @return {module:model/AlertSuppression} The populated <code>AlertSuppression</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('userId'))
        obj.userId = ApiClient.convertToType(data['userId'], 'Number');
      if (data.hasOwnProperty('teamId'))
        obj.teamId = ApiClient.convertToType(data['teamId'], 'Number');
      if (data.hasOwnProperty('userFullName'))
        obj.userFullName = ApiClient.convertToType(data['userFullName'], 'String');
      if (data.hasOwnProperty('team'))
        obj.team = ApiClient.convertToType(data['team'], 'Number');
      if (data.hasOwnProperty('reasonDetail'))
        obj.reasonDetail = ApiClient.convertToType(data['reasonDetail'], 'Number');
      if (data.hasOwnProperty('observableTitle'))
        obj.observableTitle = ApiClient.convertToType(data['observableTitle'], 'String');
      if (data.hasOwnProperty('indicatorId'))
        obj.indicatorId = ApiClient.convertToType(data['indicatorId'], 'String');
      if (data.hasOwnProperty('indicatorTitle'))
        obj.indicatorTitle = ApiClient.convertToType(data['indicatorTitle'], 'String');
      if (data.hasOwnProperty('observableId'))
        obj.observableId = ApiClient.convertToType(data['observableId'], 'String');
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'Date');
      if (data.hasOwnProperty('suppressUntil'))
        obj.suppressUntil = ApiClient.convertToType(data['suppressUntil'], 'Date');
      if (data.hasOwnProperty('duration'))
        obj.duration = ApiClient.convertToType(data['duration'], 'Number');
      if (data.hasOwnProperty('reason'))
        obj.reason = ApiClient.convertToType(data['reason'], 'Number');
      if (data.hasOwnProperty('notes'))
        obj.notes = ApiClient.convertToType(data['notes'], 'String');
      if (data.hasOwnProperty('sendEmail'))
        obj.sendEmail = ApiClient.convertToType(data['sendEmail'], 'Boolean');
      if (data.hasOwnProperty('hits'))
        obj.hits = ApiClient.convertToType(data['hits'], 'Number');
      if (data.hasOwnProperty('latestHit'))
        obj.latestHit = ApiClient.convertToType(data['latestHit'], 'Date');
      if (data.hasOwnProperty('scope'))
        obj.scope = ApiClient.convertToType(data['scope'], 'Number');
      if (data.hasOwnProperty('community'))
        obj.community = ApiClient.convertToType(data['community'], 'Number');
      if (data.hasOwnProperty('cidr'))
        obj.cidr = ApiClient.convertToType(data['cidr'], 'String');
      if (data.hasOwnProperty('suppressedAlertIds'))
        obj.suppressedAlertIds = ApiClient.convertToType(data['suppressedAlertIds'], 'String');
      if (data.hasOwnProperty('latestAlert'))
        obj.latestAlert = ApiClient.convertToType(data['latestAlert'], 'String');
      if (data.hasOwnProperty('cwAutomateScripts'))
        obj.cwAutomateScripts = ApiClient.convertToType(data['cwAutomateScripts'], ['Number']);
    }
    return obj;
  }

  /**
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * @member {Number} userId
   */
  exports.prototype.userId = undefined;

  /**
   * @member {Number} teamId
   */
  exports.prototype.teamId = undefined;

  /**
   * @member {String} userFullName
   */
  exports.prototype.userFullName = undefined;

  /**
   * @member {Number} team
   */
  exports.prototype.team = undefined;

  /**
   * @member {Number} reasonDetail
   */
  exports.prototype.reasonDetail = undefined;

  /**
   * @member {String} observableTitle
   */
  exports.prototype.observableTitle = undefined;

  /**
   * @member {String} indicatorId
   */
  exports.prototype.indicatorId = undefined;

  /**
   * @member {String} indicatorTitle
   */
  exports.prototype.indicatorTitle = undefined;

  /**
   * @member {String} observableId
   */
  exports.prototype.observableId = undefined;

  /**
   * @member {Date} createdAt
   */
  exports.prototype.createdAt = undefined;

  /**
   * @member {Date} suppressUntil
   */
  exports.prototype.suppressUntil = undefined;

  /**
   * @member {Number} duration
   */
  exports.prototype.duration = undefined;

  /**
   * @member {Number} reason
   */
  exports.prototype.reason = undefined;

  /**
   * @member {String} notes
   */
  exports.prototype.notes = undefined;

  /**
   * @member {Boolean} sendEmail
   * @default false
   */
  exports.prototype.sendEmail = false;

  /**
   * @member {Number} hits
   */
  exports.prototype.hits = undefined;

  /**
   * @member {Date} latestHit
   */
  exports.prototype.latestHit = undefined;

  /**
   * @member {Number} scope
   */
  exports.prototype.scope = undefined;

  /**
   * @member {Number} community
   */
  exports.prototype.community = undefined;

  /**
   * @member {String} cidr
   */
  exports.prototype.cidr = undefined;

  /**
   * @member {String} suppressedAlertIds
   */
  exports.prototype.suppressedAlertIds = undefined;

  /**
   * @member {String} latestAlert
   */
  exports.prototype.latestAlert = undefined;

  /**
   * @member {Array.<Number>} cwAutomateScripts
   */
  exports.prototype.cwAutomateScripts = undefined;

  return exports;

}));
