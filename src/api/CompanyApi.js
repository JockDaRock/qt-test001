/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AlertSuppression', 'model/ApiCommunityListSerializer', 'model/CommunityMember', 'model/DefaultManagingTeams', 'model/InlineResponse200', 'model/InlineResponse2002', 'model/InlineResponse2003', 'model/InlineResponse2004', 'model/IntelDataIndicatorSerializer', 'model/Invite', 'model/JoinCommunity', 'model/LoginAttempt', 'model/NetworkSubnet', 'model/SoftwareApproval', 'model/SoftwareApprovalList', 'model/TeamEnterpriseSSO', 'model/TeamIntegration', 'model/TeamIntegrationLogEventWithTeam', 'model/TeamWebhook'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AlertSuppression'), require('../model/ApiCommunityListSerializer'), require('../model/CommunityMember'), require('../model/DefaultManagingTeams'), require('../model/InlineResponse200'), require('../model/InlineResponse2002'), require('../model/InlineResponse2003'), require('../model/InlineResponse2004'), require('../model/IntelDataIndicatorSerializer'), require('../model/Invite'), require('../model/JoinCommunity'), require('../model/LoginAttempt'), require('../model/NetworkSubnet'), require('../model/SoftwareApproval'), require('../model/SoftwareApprovalList'), require('../model/TeamEnterpriseSSO'), require('../model/TeamIntegration'), require('../model/TeamIntegrationLogEventWithTeam'), require('../model/TeamWebhook'));
  } else {
    // Browser globals (root is window)
    if (!root.PerchApi) {
      root.PerchApi = {};
    }
    root.PerchApi.CompanyApi = factory(root.PerchApi.ApiClient, root.PerchApi.AlertSuppression, root.PerchApi.ApiCommunityListSerializer, root.PerchApi.CommunityMember, root.PerchApi.DefaultManagingTeams, root.PerchApi.InlineResponse200, root.PerchApi.InlineResponse2002, root.PerchApi.InlineResponse2003, root.PerchApi.InlineResponse2004, root.PerchApi.IntelDataIndicatorSerializer, root.PerchApi.Invite, root.PerchApi.JoinCommunity, root.PerchApi.LoginAttempt, root.PerchApi.NetworkSubnet, root.PerchApi.SoftwareApproval, root.PerchApi.SoftwareApprovalList, root.PerchApi.TeamEnterpriseSSO, root.PerchApi.TeamIntegration, root.PerchApi.TeamIntegrationLogEventWithTeam, root.PerchApi.TeamWebhook);
  }
}(this, function(ApiClient, AlertSuppression, ApiCommunityListSerializer, CommunityMember, DefaultManagingTeams, InlineResponse200, InlineResponse2002, InlineResponse2003, InlineResponse2004, IntelDataIndicatorSerializer, Invite, JoinCommunity, LoginAttempt, NetworkSubnet, SoftwareApproval, SoftwareApprovalList, TeamEnterpriseSSO, TeamIntegration, TeamIntegrationLogEventWithTeam, TeamWebhook) {
  'use strict';

  /**
   * Company service.
   * @module api/CompanyApi
   * @version v1
   */

  /**
   * Constructs a new CompanyApi. 
   * @alias module:api/CompanyApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the companyBpfUpdate operation.
     * @callback module:api/CompanyApi~companyBpfUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:api/CompanyApi~companyBpfUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyBpfUpdate = function(companyId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyBpfUpdate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/bpf', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyCommunityCreate operation.
     * @callback module:api/CompanyApi~companyCommunityCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JoinCommunity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/JoinCommunity} data 
     * @param {module:api/CompanyApi~companyCommunityCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JoinCommunity}
     */
    this.companyCommunityCreate = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyCommunityCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyCommunityCreate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JoinCommunity;

      return this.apiClient.callApi(
        '/company/{company_id}/community', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyCommunityCredentials operation.
     * @callback module:api/CompanyApi~companyCommunityCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCommunityListSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {String} companyId 
     * @param {module:model/ApiCommunityListSerializer} data 
     * @param {module:api/CompanyApi~companyCommunityCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCommunityListSerializer}
     */
    this.companyCommunityCredentials = function(communityId, companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling companyCommunityCredentials");
      }

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyCommunityCredentials");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyCommunityCredentials");
      }


      var pathParams = {
        'community_id': communityId,
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiCommunityListSerializer;

      return this.apiClient.callApi(
        '/company/{company_id}/community/{community_id}/credentials', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyCommunityDelete operation.
     * @callback module:api/CompanyApi~companyCommunityDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {String} companyId 
     * @param {module:api/CompanyApi~companyCommunityDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyCommunityDelete = function(communityId, companyId, callback) {
      var postBody = null;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling companyCommunityDelete");
      }

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyCommunityDelete");
      }


      var pathParams = {
        'community_id': communityId,
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/community/{community_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyCommunityFeeds operation.
     * @callback module:api/CompanyApi~companyCommunityFeedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCommunityListSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {String} companyId 
     * @param {module:model/ApiCommunityListSerializer} data 
     * @param {module:api/CompanyApi~companyCommunityFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCommunityListSerializer}
     */
    this.companyCommunityFeeds = function(communityId, companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling companyCommunityFeeds");
      }

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyCommunityFeeds");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyCommunityFeeds");
      }


      var pathParams = {
        'community_id': communityId,
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiCommunityListSerializer;

      return this.apiClient.callApi(
        '/company/{company_id}/community/{community_id}/feeds', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyCommunityList operation.
     * @callback module:api/CompanyApi~companyCommunityListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiCommunityListSerializer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/CompanyApi~companyCommunityListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiCommunityListSerializer>}
     */
    this.companyCommunityList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyCommunityList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ApiCommunityListSerializer];

      return this.apiClient.callApi(
        '/company/{company_id}/community', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyCommunityPartialUpdate operation.
     * @callback module:api/CompanyApi~companyCommunityPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunityMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {String} companyId 
     * @param {module:model/CommunityMember} data 
     * @param {module:api/CompanyApi~companyCommunityPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunityMember}
     */
    this.companyCommunityPartialUpdate = function(communityId, companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling companyCommunityPartialUpdate");
      }

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyCommunityPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyCommunityPartialUpdate");
      }


      var pathParams = {
        'community_id': communityId,
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommunityMember;

      return this.apiClient.callApi(
        '/company/{company_id}/community/{community_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyCommunityRead operation.
     * @callback module:api/CompanyApi~companyCommunityReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCommunityListSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {String} companyId 
     * @param {module:api/CompanyApi~companyCommunityReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCommunityListSerializer}
     */
    this.companyCommunityRead = function(communityId, companyId, callback) {
      var postBody = null;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling companyCommunityRead");
      }

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyCommunityRead");
      }


      var pathParams = {
        'community_id': communityId,
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiCommunityListSerializer;

      return this.apiClient.callApi(
        '/company/{company_id}/community/{community_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyCommunityUpdate operation.
     * @callback module:api/CompanyApi~companyCommunityUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCommunityListSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {String} companyId 
     * @param {module:model/ApiCommunityListSerializer} data 
     * @param {module:api/CompanyApi~companyCommunityUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCommunityListSerializer}
     */
    this.companyCommunityUpdate = function(communityId, companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling companyCommunityUpdate");
      }

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyCommunityUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyCommunityUpdate");
      }


      var pathParams = {
        'community_id': communityId,
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiCommunityListSerializer;

      return this.apiClient.callApi(
        '/company/{company_id}/community/{community_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyDefaultManagingTeamsList operation.
     * @callback module:api/CompanyApi~companyDefaultManagingTeamsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DefaultManagingTeams>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/CompanyApi~companyDefaultManagingTeamsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DefaultManagingTeams>}
     */
    this.companyDefaultManagingTeamsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DefaultManagingTeams];

      return this.apiClient.callApi(
        '/company/default-managing-teams', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyDefaultManagingTeamsRead operation.
     * @callback module:api/CompanyApi~companyDefaultManagingTeamsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultManagingTeams} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/CompanyApi~companyDefaultManagingTeamsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultManagingTeams}
     */
    this.companyDefaultManagingTeamsRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyDefaultManagingTeamsRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DefaultManagingTeams;

      return this.apiClient.callApi(
        '/company/default-managing-teams/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyDeviceInviteCreate operation.
     * @callback module:api/CompanyApi~companyDeviceInviteCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/Invite} data 
     * @param {module:api/CompanyApi~companyDeviceInviteCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invite}
     */
    this.companyDeviceInviteCreate = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyDeviceInviteCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyDeviceInviteCreate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Invite;

      return this.apiClient.callApi(
        '/company/{company_id}/deviceInvite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyDeviceInviteDelete operation.
     * @callback module:api/CompanyApi~companyDeviceInviteDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} code 
     * @param {String} companyId 
     * @param {module:api/CompanyApi~companyDeviceInviteDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyDeviceInviteDelete = function(code, companyId, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling companyDeviceInviteDelete");
      }

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyDeviceInviteDelete");
      }


      var pathParams = {
        'code': code,
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/deviceInvite/{code}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyDeviceInviteList operation.
     * @callback module:api/CompanyApi~companyDeviceInviteListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Invite>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/CompanyApi~companyDeviceInviteListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Invite>}
     */
    this.companyDeviceInviteList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyDeviceInviteList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Invite];

      return this.apiClient.callApi(
        '/company/{company_id}/deviceInvite', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyDeviceInvitePartialUpdate operation.
     * @callback module:api/CompanyApi~companyDeviceInvitePartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} code 
     * @param {String} companyId 
     * @param {module:model/Invite} data 
     * @param {module:api/CompanyApi~companyDeviceInvitePartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invite}
     */
    this.companyDeviceInvitePartialUpdate = function(code, companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling companyDeviceInvitePartialUpdate");
      }

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyDeviceInvitePartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyDeviceInvitePartialUpdate");
      }


      var pathParams = {
        'code': code,
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Invite;

      return this.apiClient.callApi(
        '/company/{company_id}/deviceInvite/{code}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyDeviceInviteRead operation.
     * @callback module:api/CompanyApi~companyDeviceInviteReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} code 
     * @param {String} companyId 
     * @param {module:api/CompanyApi~companyDeviceInviteReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invite}
     */
    this.companyDeviceInviteRead = function(code, companyId, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling companyDeviceInviteRead");
      }

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyDeviceInviteRead");
      }


      var pathParams = {
        'code': code,
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Invite;

      return this.apiClient.callApi(
        '/company/{company_id}/deviceInvite/{code}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyDeviceInviteUpdate operation.
     * @callback module:api/CompanyApi~companyDeviceInviteUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} code 
     * @param {String} companyId 
     * @param {module:model/Invite} data 
     * @param {module:api/CompanyApi~companyDeviceInviteUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invite}
     */
    this.companyDeviceInviteUpdate = function(code, companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling companyDeviceInviteUpdate");
      }

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyDeviceInviteUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyDeviceInviteUpdate");
      }


      var pathParams = {
        'code': code,
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Invite;

      return this.apiClient.callApi(
        '/company/{company_id}/deviceInvite/{code}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyEnterpriseSsoCreate operation.
     * @callback module:api/CompanyApi~companyEnterpriseSsoCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamEnterpriseSSO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/TeamEnterpriseSSO} data 
     * @param {module:api/CompanyApi~companyEnterpriseSsoCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamEnterpriseSSO}
     */
    this.companyEnterpriseSsoCreate = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyEnterpriseSsoCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyEnterpriseSsoCreate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TeamEnterpriseSSO;

      return this.apiClient.callApi(
        '/company/{company_id}/enterprise-sso', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyEnterpriseSsoDelete operation.
     * @callback module:api/CompanyApi~companyEnterpriseSsoDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:api/CompanyApi~companyEnterpriseSsoDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyEnterpriseSsoDelete = function(companyId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyEnterpriseSsoDelete");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/enterprise-sso', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyEnterpriseSsoPartialUpdate operation.
     * @callback module:api/CompanyApi~companyEnterpriseSsoPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamEnterpriseSSO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/TeamEnterpriseSSO} data 
     * @param {module:api/CompanyApi~companyEnterpriseSsoPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamEnterpriseSSO}
     */
    this.companyEnterpriseSsoPartialUpdate = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyEnterpriseSsoPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyEnterpriseSsoPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TeamEnterpriseSSO;

      return this.apiClient.callApi(
        '/company/{company_id}/enterprise-sso', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyEnterpriseSsoRead operation.
     * @callback module:api/CompanyApi~companyEnterpriseSsoReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamEnterpriseSSO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:api/CompanyApi~companyEnterpriseSsoReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamEnterpriseSSO}
     */
    this.companyEnterpriseSsoRead = function(companyId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyEnterpriseSsoRead");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TeamEnterpriseSSO;

      return this.apiClient.callApi(
        '/company/{company_id}/enterprise-sso', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIndicatorsCreate operation.
     * @callback module:api/CompanyApi~companyIndicatorsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntelDataIndicatorSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/IntelDataIndicatorSerializer} data 
     * @param {module:api/CompanyApi~companyIndicatorsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntelDataIndicatorSerializer}
     */
    this.companyIndicatorsCreate = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIndicatorsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyIndicatorsCreate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntelDataIndicatorSerializer;

      return this.apiClient.callApi(
        '/company/{company_id}/indicators', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIndicatorsDelete operation.
     * @callback module:api/CompanyApi~companyIndicatorsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompanyApi~companyIndicatorsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyIndicatorsDelete = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIndicatorsDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyIndicatorsDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/indicators/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIndicatorsList operation.
     * @callback module:api/CompanyApi~companyIndicatorsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IntelDataIndicatorSerializer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/CompanyApi~companyIndicatorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IntelDataIndicatorSerializer>}
     */
    this.companyIndicatorsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIndicatorsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [IntelDataIndicatorSerializer];

      return this.apiClient.callApi(
        '/company/{company_id}/indicators', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIndicatorsPartialUpdate operation.
     * @callback module:api/CompanyApi~companyIndicatorsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntelDataIndicatorSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/IntelDataIndicatorSerializer} data 
     * @param {module:api/CompanyApi~companyIndicatorsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntelDataIndicatorSerializer}
     */
    this.companyIndicatorsPartialUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIndicatorsPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyIndicatorsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyIndicatorsPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntelDataIndicatorSerializer;

      return this.apiClient.callApi(
        '/company/{company_id}/indicators/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIndicatorsRead operation.
     * @callback module:api/CompanyApi~companyIndicatorsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntelDataIndicatorSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompanyApi~companyIndicatorsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntelDataIndicatorSerializer}
     */
    this.companyIndicatorsRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIndicatorsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyIndicatorsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntelDataIndicatorSerializer;

      return this.apiClient.callApi(
        '/company/{company_id}/indicators/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIndicatorsUpdate operation.
     * @callback module:api/CompanyApi~companyIndicatorsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntelDataIndicatorSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/IntelDataIndicatorSerializer} data 
     * @param {module:api/CompanyApi~companyIndicatorsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntelDataIndicatorSerializer}
     */
    this.companyIndicatorsUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIndicatorsUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyIndicatorsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyIndicatorsUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntelDataIndicatorSerializer;

      return this.apiClient.callApi(
        '/company/{company_id}/indicators/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIntegrationHealthLogsLatest operation.
     * @callback module:api/CompanyApi~companyIntegrationHealthLogsLatestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the most recent TeamIntegrationLogEvent for every integration.
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.search A search term.
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.id 
     * @param {String} opts.teamId 
     * @param {String} opts.service 
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/CompanyApi~companyIntegrationHealthLogsLatestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.companyIntegrationHealthLogsLatest = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIntegrationHealthLogsLatest");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'search': opts['search'],
        'ordering': opts['ordering'],
        'id': opts['id'],
        'team_id': opts['teamId'],
        'service': opts['service'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/company/{company_id}/integration-health-logs/latest', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIntegrationHealthLogsList operation.
     * @callback module:api/CompanyApi~companyIntegrationHealthLogsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.search A search term.
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.id 
     * @param {String} opts.teamId 
     * @param {String} opts.service 
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/CompanyApi~companyIntegrationHealthLogsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.companyIntegrationHealthLogsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIntegrationHealthLogsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'search': opts['search'],
        'ordering': opts['ordering'],
        'id': opts['id'],
        'team_id': opts['teamId'],
        'service': opts['service'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/company/{company_id}/integration-health-logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIntegrationHealthLogsRead operation.
     * @callback module:api/CompanyApi~companyIntegrationHealthLogsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamIntegrationLogEventWithTeam} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompanyApi~companyIntegrationHealthLogsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamIntegrationLogEventWithTeam}
     */
    this.companyIntegrationHealthLogsRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIntegrationHealthLogsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyIntegrationHealthLogsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TeamIntegrationLogEventWithTeam;

      return this.apiClient.callApi(
        '/company/{company_id}/integration-health-logs/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIntegrationsCreate operation.
     * @callback module:api/CompanyApi~companyIntegrationsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} integrationType 
     * @param {module:api/CompanyApi~companyIntegrationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyIntegrationsCreate = function(companyId, integrationType, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIntegrationsCreate");
      }

      // verify the required parameter 'integrationType' is set
      if (integrationType === undefined || integrationType === null) {
        throw new Error("Missing the required parameter 'integrationType' when calling companyIntegrationsCreate");
      }


      var pathParams = {
        'company_id': companyId,
        'integration_type': integrationType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/integrations/{integration_type}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIntegrationsDelete operation.
     * @callback module:api/CompanyApi~companyIntegrationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} integrationType 
     * @param {module:api/CompanyApi~companyIntegrationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyIntegrationsDelete = function(companyId, id, integrationType, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIntegrationsDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyIntegrationsDelete");
      }

      // verify the required parameter 'integrationType' is set
      if (integrationType === undefined || integrationType === null) {
        throw new Error("Missing the required parameter 'integrationType' when calling companyIntegrationsDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'integration_type': integrationType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/integrations/{integration_type}/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIntegrationsList operation.
     * @callback module:api/CompanyApi~companyIntegrationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/CompanyApi~companyIntegrationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.companyIntegrationsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIntegrationsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/company/{company_id}/integrations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIntegrationsList_0 operation.
     * @callback module:api/CompanyApi~companyIntegrationsList_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} integrationType 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/CompanyApi~companyIntegrationsList_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyIntegrationsList_0 = function(companyId, integrationType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIntegrationsList_0");
      }

      // verify the required parameter 'integrationType' is set
      if (integrationType === undefined || integrationType === null) {
        throw new Error("Missing the required parameter 'integrationType' when calling companyIntegrationsList_0");
      }


      var pathParams = {
        'company_id': companyId,
        'integration_type': integrationType
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/integrations/{integration_type}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIntegrationsPartialUpdate operation.
     * @callback module:api/CompanyApi~companyIntegrationsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} integrationType 
     * @param {module:api/CompanyApi~companyIntegrationsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyIntegrationsPartialUpdate = function(companyId, id, integrationType, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIntegrationsPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyIntegrationsPartialUpdate");
      }

      // verify the required parameter 'integrationType' is set
      if (integrationType === undefined || integrationType === null) {
        throw new Error("Missing the required parameter 'integrationType' when calling companyIntegrationsPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'integration_type': integrationType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/integrations/{integration_type}/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIntegrationsRead operation.
     * @callback module:api/CompanyApi~companyIntegrationsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamIntegration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompanyApi~companyIntegrationsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamIntegration}
     */
    this.companyIntegrationsRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIntegrationsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyIntegrationsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TeamIntegration;

      return this.apiClient.callApi(
        '/company/{company_id}/integrations/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIntegrationsRead_0 operation.
     * @callback module:api/CompanyApi~companyIntegrationsRead_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} integrationType 
     * @param {module:api/CompanyApi~companyIntegrationsRead_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyIntegrationsRead_0 = function(companyId, id, integrationType, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIntegrationsRead_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyIntegrationsRead_0");
      }

      // verify the required parameter 'integrationType' is set
      if (integrationType === undefined || integrationType === null) {
        throw new Error("Missing the required parameter 'integrationType' when calling companyIntegrationsRead_0");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'integration_type': integrationType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/integrations/{integration_type}/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyIntegrationsUpdate operation.
     * @callback module:api/CompanyApi~companyIntegrationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} integrationType 
     * @param {module:api/CompanyApi~companyIntegrationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyIntegrationsUpdate = function(companyId, id, integrationType, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyIntegrationsUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyIntegrationsUpdate");
      }

      // verify the required parameter 'integrationType' is set
      if (integrationType === undefined || integrationType === null) {
        throw new Error("Missing the required parameter 'integrationType' when calling companyIntegrationsUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'integration_type': integrationType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/integrations/{integration_type}/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyLoginsList operation.
     * @callback module:api/CompanyApi~companyLoginsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {String} opts.search A search term.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/CompanyApi~companyLoginsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    this.companyLoginsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyLoginsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'search': opts['search'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/company/{company_id}/logins', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyLoginsRead operation.
     * @callback module:api/CompanyApi~companyLoginsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginAttempt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompanyApi~companyLoginsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginAttempt}
     */
    this.companyLoginsRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyLoginsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyLoginsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = LoginAttempt;

      return this.apiClient.callApi(
        '/company/{company_id}/logins/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyMemberDelete operation.
     * @callback module:api/CompanyApi~companyMemberDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:api/CompanyApi~companyMemberDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyMemberDelete = function(companyId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyMemberDelete");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companyMemberDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/member/{user_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyMemberList operation.
     * @callback module:api/CompanyApi~companyMemberListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/CompanyApi~companyMemberListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyMemberList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyMemberList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/member', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyMemberPartialUpdate operation.
     * @callback module:api/CompanyApi~companyMemberPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:api/CompanyApi~companyMemberPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyMemberPartialUpdate = function(companyId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyMemberPartialUpdate");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companyMemberPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/member/{user_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyMemberRead operation.
     * @callback module:api/CompanyApi~companyMemberReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:api/CompanyApi~companyMemberReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyMemberRead = function(companyId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyMemberRead");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companyMemberRead");
      }


      var pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/member/{user_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyMemberUpdate operation.
     * @callback module:api/CompanyApi~companyMemberUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:api/CompanyApi~companyMemberUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyMemberUpdate = function(companyId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyMemberUpdate");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companyMemberUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/member/{user_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyNamesList operation.
     * @callback module:api/CompanyApi~companyNamesListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/CompanyApi~companyNamesListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyNamesList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/names', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyNamesRead operation.
     * @callback module:api/CompanyApi~companyNamesReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/CompanyApi~companyNamesReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyNamesRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyNamesRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/names/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyRulesUpdate operation.
     * @callback module:api/CompanyApi~companyRulesUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:api/CompanyApi~companyRulesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyRulesUpdate = function(companyId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyRulesUpdate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/rules', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySensorHealthRead operation.
     * @callback module:api/CompanyApi~companySensorHealthReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated for use in the app but there are auxiliary services using this
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompanyApi~companySensorHealthReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companySensorHealthRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySensorHealthRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companySensorHealthRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/sensor/health/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySoftwareApprovalsCreate operation.
     * @callback module:api/CompanyApi~companySoftwareApprovalsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SoftwareApproval} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/SoftwareApproval} data 
     * @param {module:api/CompanyApi~companySoftwareApprovalsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SoftwareApproval}
     */
    this.companySoftwareApprovalsCreate = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySoftwareApprovalsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companySoftwareApprovalsCreate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SoftwareApproval;

      return this.apiClient.callApi(
        '/company/{company_id}/software-approvals', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySoftwareApprovalsDelete operation.
     * @callback module:api/CompanyApi~companySoftwareApprovalsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompanyApi~companySoftwareApprovalsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companySoftwareApprovalsDelete = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySoftwareApprovalsDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companySoftwareApprovalsDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/software-approvals/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySoftwareApprovalsList operation.
     * @callback module:api/CompanyApi~companySoftwareApprovalsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SoftwareApprovalList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/CompanyApi~companySoftwareApprovalsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SoftwareApprovalList>}
     */
    this.companySoftwareApprovalsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySoftwareApprovalsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SoftwareApprovalList];

      return this.apiClient.callApi(
        '/company/{company_id}/software-approvals', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySoftwareApprovalsPartialUpdate operation.
     * @callback module:api/CompanyApi~companySoftwareApprovalsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SoftwareApproval} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/SoftwareApproval} data 
     * @param {module:api/CompanyApi~companySoftwareApprovalsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SoftwareApproval}
     */
    this.companySoftwareApprovalsPartialUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySoftwareApprovalsPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companySoftwareApprovalsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companySoftwareApprovalsPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SoftwareApproval;

      return this.apiClient.callApi(
        '/company/{company_id}/software-approvals/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySoftwareApprovalsRead operation.
     * @callback module:api/CompanyApi~companySoftwareApprovalsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SoftwareApprovalList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompanyApi~companySoftwareApprovalsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SoftwareApprovalList}
     */
    this.companySoftwareApprovalsRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySoftwareApprovalsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companySoftwareApprovalsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SoftwareApprovalList;

      return this.apiClient.callApi(
        '/company/{company_id}/software-approvals/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySoftwareApprovalsUpdate operation.
     * @callback module:api/CompanyApi~companySoftwareApprovalsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SoftwareApproval} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/SoftwareApproval} data 
     * @param {module:api/CompanyApi~companySoftwareApprovalsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SoftwareApproval}
     */
    this.companySoftwareApprovalsUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySoftwareApprovalsUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companySoftwareApprovalsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companySoftwareApprovalsUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SoftwareApproval;

      return this.apiClient.callApi(
        '/company/{company_id}/software-approvals/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySubnetsCreate operation.
     * @callback module:api/CompanyApi~companySubnetsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkSubnet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/NetworkSubnet} data 
     * @param {module:api/CompanyApi~companySubnetsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkSubnet}
     */
    this.companySubnetsCreate = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySubnetsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companySubnetsCreate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkSubnet;

      return this.apiClient.callApi(
        '/company/{company_id}/subnets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySubnetsDelete operation.
     * @callback module:api/CompanyApi~companySubnetsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompanyApi~companySubnetsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companySubnetsDelete = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySubnetsDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companySubnetsDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/subnets/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySubnetsList operation.
     * @callback module:api/CompanyApi~companySubnetsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkSubnet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/CompanyApi~companySubnetsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkSubnet>}
     */
    this.companySubnetsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySubnetsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [NetworkSubnet];

      return this.apiClient.callApi(
        '/company/{company_id}/subnets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySubnetsPartialUpdate operation.
     * @callback module:api/CompanyApi~companySubnetsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkSubnet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/NetworkSubnet} data 
     * @param {module:api/CompanyApi~companySubnetsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkSubnet}
     */
    this.companySubnetsPartialUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySubnetsPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companySubnetsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companySubnetsPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkSubnet;

      return this.apiClient.callApi(
        '/company/{company_id}/subnets/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySubnetsRead operation.
     * @callback module:api/CompanyApi~companySubnetsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkSubnet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompanyApi~companySubnetsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkSubnet}
     */
    this.companySubnetsRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySubnetsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companySubnetsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkSubnet;

      return this.apiClient.callApi(
        '/company/{company_id}/subnets/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySubnetsUpdate operation.
     * @callback module:api/CompanyApi~companySubnetsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkSubnet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/NetworkSubnet} data 
     * @param {module:api/CompanyApi~companySubnetsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkSubnet}
     */
    this.companySubnetsUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySubnetsUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companySubnetsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companySubnetsUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkSubnet;

      return this.apiClient.callApi(
        '/company/{company_id}/subnets/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySuppressionsBulkCidrs operation.
     * @callback module:api/CompanyApi~companySuppressionsBulkCidrsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertSuppression} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/AlertSuppression} data 
     * @param {module:api/CompanyApi~companySuppressionsBulkCidrsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertSuppression}
     */
    this.companySuppressionsBulkCidrs = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySuppressionsBulkCidrs");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companySuppressionsBulkCidrs");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AlertSuppression;

      return this.apiClient.callApi(
        '/company/{company_id}/suppressions/bulk-cidrs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySuppressionsCreate operation.
     * @callback module:api/CompanyApi~companySuppressionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertSuppression} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/AlertSuppression} data 
     * @param {module:api/CompanyApi~companySuppressionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertSuppression}
     */
    this.companySuppressionsCreate = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySuppressionsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companySuppressionsCreate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AlertSuppression;

      return this.apiClient.callApi(
        '/company/{company_id}/suppressions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySuppressionsDelete operation.
     * @callback module:api/CompanyApi~companySuppressionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompanyApi~companySuppressionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companySuppressionsDelete = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySuppressionsDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companySuppressionsDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/suppressions/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companySuppressionsList operation.
     * @callback module:api/CompanyApi~companySuppressionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.p A page number within the paginated result set.
     * @param {Number} opts.ps Number of results to return per page.
     * @param {module:api/CompanyApi~companySuppressionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.companySuppressionsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySuppressionsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'p': opts['p'],
        'ps': opts['ps'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/company/{company_id}/suppressions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyWebhooksCreate operation.
     * @callback module:api/CompanyApi~companyWebhooksCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/TeamWebhook} data 
     * @param {module:api/CompanyApi~companyWebhooksCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamWebhook}
     */
    this.companyWebhooksCreate = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyWebhooksCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyWebhooksCreate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TeamWebhook;

      return this.apiClient.callApi(
        '/company/{company_id}/webhooks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyWebhooksDelete operation.
     * @callback module:api/CompanyApi~companyWebhooksDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompanyApi~companyWebhooksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.companyWebhooksDelete = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyWebhooksDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyWebhooksDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/company/{company_id}/webhooks/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyWebhooksList operation.
     * @callback module:api/CompanyApi~companyWebhooksListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamWebhook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/CompanyApi~companyWebhooksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamWebhook>}
     */
    this.companyWebhooksList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyWebhooksList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TeamWebhook];

      return this.apiClient.callApi(
        '/company/{company_id}/webhooks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyWebhooksPartialUpdate operation.
     * @callback module:api/CompanyApi~companyWebhooksPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/TeamWebhook} data 
     * @param {module:api/CompanyApi~companyWebhooksPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamWebhook}
     */
    this.companyWebhooksPartialUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyWebhooksPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyWebhooksPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyWebhooksPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TeamWebhook;

      return this.apiClient.callApi(
        '/company/{company_id}/webhooks/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyWebhooksRead operation.
     * @callback module:api/CompanyApi~companyWebhooksReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompanyApi~companyWebhooksReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamWebhook}
     */
    this.companyWebhooksRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyWebhooksRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyWebhooksRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TeamWebhook;

      return this.apiClient.callApi(
        '/company/{company_id}/webhooks/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companyWebhooksUpdate operation.
     * @callback module:api/CompanyApi~companyWebhooksUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/TeamWebhook} data 
     * @param {module:api/CompanyApi~companyWebhooksUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamWebhook}
     */
    this.companyWebhooksUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyWebhooksUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyWebhooksUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companyWebhooksUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TeamWebhook;

      return this.apiClient.callApi(
        '/company/{company_id}/webhooks/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
