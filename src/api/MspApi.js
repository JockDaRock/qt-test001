/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse2002', 'model/TeamIntegrationLogEventWithTeam'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse2002'), require('../model/TeamIntegrationLogEventWithTeam'));
  } else {
    // Browser globals (root is window)
    if (!root.PerchApi) {
      root.PerchApi = {};
    }
    root.PerchApi.MspApi = factory(root.PerchApi.ApiClient, root.PerchApi.InlineResponse2002, root.PerchApi.TeamIntegrationLogEventWithTeam);
  }
}(this, function(ApiClient, InlineResponse2002, TeamIntegrationLogEventWithTeam) {
  'use strict';

  /**
   * Msp service.
   * @module api/MspApi
   * @version v1
   */

  /**
   * Constructs a new MspApi. 
   * @alias module:api/MspApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the mspIntegrationHealthLogsList operation.
     * @callback module:api/MspApi~mspIntegrationHealthLogsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.search A search term.
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.id 
     * @param {String} opts.teamId 
     * @param {String} opts.service 
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/MspApi~mspIntegrationHealthLogsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.mspIntegrationHealthLogsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling mspIntegrationHealthLogsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'search': opts['search'],
        'ordering': opts['ordering'],
        'id': opts['id'],
        'team_id': opts['teamId'],
        'service': opts['service'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/msp/{company_id}/integration-health-logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mspIntegrationHealthLogsRead operation.
     * @callback module:api/MspApi~mspIntegrationHealthLogsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamIntegrationLogEventWithTeam} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/MspApi~mspIntegrationHealthLogsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamIntegrationLogEventWithTeam}
     */
    this.mspIntegrationHealthLogsRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling mspIntegrationHealthLogsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mspIntegrationHealthLogsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TeamIntegrationLogEventWithTeam;

      return this.apiClient.callApi(
        '/msp/{company_id}/integration-health-logs/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mspIntegrationsCreate operation.
     * @callback module:api/MspApi~mspIntegrationsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} integrationType 
     * @param {module:api/MspApi~mspIntegrationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.mspIntegrationsCreate = function(companyId, integrationType, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling mspIntegrationsCreate");
      }

      // verify the required parameter 'integrationType' is set
      if (integrationType === undefined || integrationType === null) {
        throw new Error("Missing the required parameter 'integrationType' when calling mspIntegrationsCreate");
      }


      var pathParams = {
        'company_id': companyId,
        'integration_type': integrationType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/msp/{company_id}/integrations/{integration_type}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mspIntegrationsDelete operation.
     * @callback module:api/MspApi~mspIntegrationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} integrationType 
     * @param {module:api/MspApi~mspIntegrationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.mspIntegrationsDelete = function(companyId, id, integrationType, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling mspIntegrationsDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mspIntegrationsDelete");
      }

      // verify the required parameter 'integrationType' is set
      if (integrationType === undefined || integrationType === null) {
        throw new Error("Missing the required parameter 'integrationType' when calling mspIntegrationsDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'integration_type': integrationType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/msp/{company_id}/integrations/{integration_type}/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mspIntegrationsList operation.
     * @callback module:api/MspApi~mspIntegrationsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} integrationType 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/MspApi~mspIntegrationsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.mspIntegrationsList = function(companyId, integrationType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling mspIntegrationsList");
      }

      // verify the required parameter 'integrationType' is set
      if (integrationType === undefined || integrationType === null) {
        throw new Error("Missing the required parameter 'integrationType' when calling mspIntegrationsList");
      }


      var pathParams = {
        'company_id': companyId,
        'integration_type': integrationType
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/msp/{company_id}/integrations/{integration_type}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mspIntegrationsPartialUpdate operation.
     * @callback module:api/MspApi~mspIntegrationsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} integrationType 
     * @param {module:api/MspApi~mspIntegrationsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.mspIntegrationsPartialUpdate = function(companyId, id, integrationType, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling mspIntegrationsPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mspIntegrationsPartialUpdate");
      }

      // verify the required parameter 'integrationType' is set
      if (integrationType === undefined || integrationType === null) {
        throw new Error("Missing the required parameter 'integrationType' when calling mspIntegrationsPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'integration_type': integrationType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/msp/{company_id}/integrations/{integration_type}/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mspIntegrationsRead operation.
     * @callback module:api/MspApi~mspIntegrationsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} integrationType 
     * @param {module:api/MspApi~mspIntegrationsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.mspIntegrationsRead = function(companyId, id, integrationType, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling mspIntegrationsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mspIntegrationsRead");
      }

      // verify the required parameter 'integrationType' is set
      if (integrationType === undefined || integrationType === null) {
        throw new Error("Missing the required parameter 'integrationType' when calling mspIntegrationsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'integration_type': integrationType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/msp/{company_id}/integrations/{integration_type}/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mspIntegrationsUpdate operation.
     * @callback module:api/MspApi~mspIntegrationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} integrationType 
     * @param {module:api/MspApi~mspIntegrationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.mspIntegrationsUpdate = function(companyId, id, integrationType, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling mspIntegrationsUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mspIntegrationsUpdate");
      }

      // verify the required parameter 'integrationType' is set
      if (integrationType === undefined || integrationType === null) {
        throw new Error("Missing the required parameter 'integrationType' when calling mspIntegrationsUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'integration_type': integrationType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/msp/{company_id}/integrations/{integration_type}/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
