/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CommunityNameChartSerializer', 'model/InlineResponse2005', 'model/NameChartSerializer', 'model/TeamNoisyHosts', 'model/TeamSuppressionReasons'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CommunityNameChartSerializer'), require('../model/InlineResponse2005'), require('../model/NameChartSerializer'), require('../model/TeamNoisyHosts'), require('../model/TeamSuppressionReasons'));
  } else {
    // Browser globals (root is window)
    if (!root.PerchApi) {
      root.PerchApi = {};
    }
    root.PerchApi.MetricsApi = factory(root.PerchApi.ApiClient, root.PerchApi.CommunityNameChartSerializer, root.PerchApi.InlineResponse2005, root.PerchApi.NameChartSerializer, root.PerchApi.TeamNoisyHosts, root.PerchApi.TeamSuppressionReasons);
  }
}(this, function(ApiClient, CommunityNameChartSerializer, InlineResponse2005, NameChartSerializer, TeamNoisyHosts, TeamSuppressionReasons) {
  'use strict';

  /**
   * Metrics service.
   * @module api/MetricsApi
   * @version v1
   */

  /**
   * Constructs a new MetricsApi. 
   * @alias module:api/MetricsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the metricsAlertProcessingList operation.
     * @callback module:api/MetricsApi~metricsAlertProcessingListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/MetricsApi~metricsAlertProcessingListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.metricsAlertProcessingList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/metrics/alert-processing', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsAlertProcessingNoisyTeamsList operation.
     * @callback module:api/MetricsApi~metricsAlertProcessingNoisyTeamsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/MetricsApi~metricsAlertProcessingNoisyTeamsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.metricsAlertProcessingNoisyTeamsList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/metrics/alert-processing/noisy-teams', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsAnalystActivityRead operation.
     * @callback module:api/MetricsApi~metricsAnalystActivityReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} userId 
     * @param {module:api/MetricsApi~metricsAnalystActivityReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.metricsAnalystActivityRead = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling metricsAnalystActivityRead");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/metrics/analyst-activity/{user_id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsAnalystSummaryList operation.
     * @callback module:api/MetricsApi~metricsAnalystSummaryListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/MetricsApi~metricsAnalystSummaryListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.metricsAnalystSummaryList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/metrics/analyst-summary', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsCommunityDailyEventsList operation.
     * @callback module:api/MetricsApi~metricsCommunityDailyEventsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {module:api/MetricsApi~metricsCommunityDailyEventsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.metricsCommunityDailyEventsList = function(communityId, callback) {
      var postBody = null;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling metricsCommunityDailyEventsList");
      }


      var pathParams = {
        'community_id': communityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/metrics/community/{community_id}/daily-events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsCommunitySuppressionsList operation.
     * @callback module:api/MetricsApi~metricsCommunitySuppressionsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {module:api/MetricsApi~metricsCommunitySuppressionsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.metricsCommunitySuppressionsList = function(communityId, callback) {
      var postBody = null;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling metricsCommunitySuppressionsList");
      }


      var pathParams = {
        'community_id': communityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/metrics/community/{community_id}/suppressions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsCommunityTrendingIndicatorsList operation.
     * @callback module:api/MetricsApi~metricsCommunityTrendingIndicatorsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {module:api/MetricsApi~metricsCommunityTrendingIndicatorsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.metricsCommunityTrendingIndicatorsList = function(communityId, callback) {
      var postBody = null;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling metricsCommunityTrendingIndicatorsList");
      }


      var pathParams = {
        'community_id': communityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/metrics/community/{community_id}/trending-indicators', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsCustomerSuccessActivityList operation.
     * @callback module:api/MetricsApi~metricsCustomerSuccessActivityListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/MetricsApi~metricsCustomerSuccessActivityListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.metricsCustomerSuccessActivityList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/metrics/customer-success/activity', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsEventsClosedCountList operation.
     * @callback module:api/MetricsApi~metricsEventsClosedCountListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/MetricsApi~metricsEventsClosedCountListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.metricsEventsClosedCountList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/metrics/events/closed_count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsStatsIpCountsListAggregationsForAllTeams operation.
     * @callback module:api/MetricsApi~metricsStatsIpCountsListAggregationsForAllTeamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a special summarized view of counts by day so Perch staff can review counts for all teams
     * @param {Object} opts Optional parameters
     * @param {String} opts.dateCountedForLt 
     * @param {String} opts.dateCountedForLte 
     * @param {String} opts.dateCountedForGt 
     * @param {String} opts.dateCountedForGte 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/MetricsApi~metricsStatsIpCountsListAggregationsForAllTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    this.metricsStatsIpCountsListAggregationsForAllTeams = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'date_counted_for__lt': opts['dateCountedForLt'],
        'date_counted_for__lte': opts['dateCountedForLte'],
        'date_counted_for__gt': opts['dateCountedForGt'],
        'date_counted_for__gte': opts['dateCountedForGte'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/metrics/stats/ip-counts/staff', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsTeamsIndicatorsByCommunityList operation.
     * @callback module:api/MetricsApi~metricsTeamsIndicatorsByCommunityListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:api/MetricsApi~metricsTeamsIndicatorsByCommunityListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.metricsTeamsIndicatorsByCommunityList = function(companyId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling metricsTeamsIndicatorsByCommunityList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/metrics/teams/{company_id}/indicators/by-community', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsTeamsSightingsByCommunityList operation.
     * @callback module:api/MetricsApi~metricsTeamsSightingsByCommunityListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NameChartSerializer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/MetricsApi~metricsTeamsSightingsByCommunityListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NameChartSerializer>}
     */
    this.metricsTeamsSightingsByCommunityList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling metricsTeamsSightingsByCommunityList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [NameChartSerializer];

      return this.apiClient.callApi(
        '/metrics/teams/{company_id}/sightings/by-community', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsTeamsStatsIpCountsList operation.
     * @callback module:api/MetricsApi~metricsTeamsStatsIpCountsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.dateCountedForLt 
     * @param {String} opts.dateCountedForLte 
     * @param {String} opts.dateCountedForGt 
     * @param {String} opts.dateCountedForGte 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/MetricsApi~metricsTeamsStatsIpCountsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    this.metricsTeamsStatsIpCountsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling metricsTeamsStatsIpCountsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'date_counted_for__lt': opts['dateCountedForLt'],
        'date_counted_for__lte': opts['dateCountedForLte'],
        'date_counted_for__gt': opts['dateCountedForGt'],
        'date_counted_for__gte': opts['dateCountedForGte'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/metrics/teams/{company_id}/stats/ip-counts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsTeamsStatsIpCountsListAggregationsForManagedTeams operation.
     * @callback module:api/MetricsApi~metricsTeamsStatsIpCountsListAggregationsForManagedTeamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a special summarized view of counts by day so MSSPs can review counts for all teams they manage
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.dateCountedForLt 
     * @param {String} opts.dateCountedForLte 
     * @param {String} opts.dateCountedForGt 
     * @param {String} opts.dateCountedForGte 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/MetricsApi~metricsTeamsStatsIpCountsListAggregationsForManagedTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    this.metricsTeamsStatsIpCountsListAggregationsForManagedTeams = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling metricsTeamsStatsIpCountsListAggregationsForManagedTeams");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'date_counted_for__lt': opts['dateCountedForLt'],
        'date_counted_for__lte': opts['dateCountedForLte'],
        'date_counted_for__gt': opts['dateCountedForGt'],
        'date_counted_for__gte': opts['dateCountedForGte'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/metrics/teams/{company_id}/stats/ip-counts/managed-teams', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsTeamsStatsList operation.
     * @callback module:api/MetricsApi~metricsTeamsStatsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/MetricsApi~metricsTeamsStatsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.metricsTeamsStatsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling metricsTeamsStatsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/metrics/teams/{company_id}/stats', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsTeamsStatsNoisyHostsList operation.
     * @callback module:api/MetricsApi~metricsTeamsStatsNoisyHostsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamNoisyHosts>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/MetricsApi~metricsTeamsStatsNoisyHostsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamNoisyHosts>}
     */
    this.metricsTeamsStatsNoisyHostsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling metricsTeamsStatsNoisyHostsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TeamNoisyHosts];

      return this.apiClient.callApi(
        '/metrics/teams/{company_id}/stats/noisy-hosts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsTeamsStatsSummary operation.
     * @callback module:api/MetricsApi~metricsTeamsStatsSummaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/MetricsApi~metricsTeamsStatsSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.metricsTeamsStatsSummary = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling metricsTeamsStatsSummary");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/metrics/teams/{company_id}/stats/suppressions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsTeamsStatsSuppressionsByDay operation.
     * @callback module:api/MetricsApi~metricsTeamsStatsSuppressionsByDayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/MetricsApi~metricsTeamsStatsSuppressionsByDayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.metricsTeamsStatsSuppressionsByDay = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling metricsTeamsStatsSuppressionsByDay");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/metrics/teams/{company_id}/stats/suppressions/by-day', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsTeamsSuppressionsByCommunityList operation.
     * @callback module:api/MetricsApi~metricsTeamsSuppressionsByCommunityListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommunityNameChartSerializer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.reason 
     * @param {String} opts.closedAt 
     * @param {String} opts.closedAtIexact 
     * @param {String} opts.closedAtGt 
     * @param {String} opts.closedAtGte 
     * @param {String} opts.closedAtLt 
     * @param {String} opts.closedAtLte 
     * @param {String} opts.closedAtIn Multiple values may be separated by commas.
     * @param {String} opts.closedAtContains 
     * @param {String} opts.closedAtIcontains 
     * @param {String} opts.closedAtStartswith 
     * @param {String} opts.closedAtIstartswith 
     * @param {String} opts.closedAtEndswith 
     * @param {String} opts.closedAtIendswith 
     * @param {String} opts.closedAtRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtIsnull 
     * @param {String} opts.closedAtRegex 
     * @param {String} opts.closedAtIregex 
     * @param {Number} opts.closedAtYear 
     * @param {Number} opts.closedAtYearIexact 
     * @param {Number} opts.closedAtYearGt 
     * @param {Number} opts.closedAtYearGte 
     * @param {Number} opts.closedAtYearLt 
     * @param {Number} opts.closedAtYearLte 
     * @param {Number} opts.closedAtYearIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtYearContains 
     * @param {Number} opts.closedAtYearIcontains 
     * @param {Number} opts.closedAtYearStartswith 
     * @param {Number} opts.closedAtYearIstartswith 
     * @param {Number} opts.closedAtYearEndswith 
     * @param {Number} opts.closedAtYearIendswith 
     * @param {Number} opts.closedAtYearRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtYearIsnull 
     * @param {Number} opts.closedAtYearRegex 
     * @param {Number} opts.closedAtYearIregex 
     * @param {Number} opts.closedAtYearContainedBy 
     * @param {Number} opts.closedAtMonth 
     * @param {Number} opts.closedAtMonthIexact 
     * @param {Number} opts.closedAtMonthGt 
     * @param {Number} opts.closedAtMonthGte 
     * @param {Number} opts.closedAtMonthLt 
     * @param {Number} opts.closedAtMonthLte 
     * @param {Number} opts.closedAtMonthIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtMonthContains 
     * @param {Number} opts.closedAtMonthIcontains 
     * @param {Number} opts.closedAtMonthStartswith 
     * @param {Number} opts.closedAtMonthIstartswith 
     * @param {Number} opts.closedAtMonthEndswith 
     * @param {Number} opts.closedAtMonthIendswith 
     * @param {Number} opts.closedAtMonthRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtMonthIsnull 
     * @param {Number} opts.closedAtMonthRegex 
     * @param {Number} opts.closedAtMonthIregex 
     * @param {Number} opts.closedAtMonthContainedBy 
     * @param {Number} opts.closedAtDay 
     * @param {Number} opts.closedAtDayIexact 
     * @param {Number} opts.closedAtDayGt 
     * @param {Number} opts.closedAtDayGte 
     * @param {Number} opts.closedAtDayLt 
     * @param {Number} opts.closedAtDayLte 
     * @param {Number} opts.closedAtDayIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDayContains 
     * @param {Number} opts.closedAtDayIcontains 
     * @param {Number} opts.closedAtDayStartswith 
     * @param {Number} opts.closedAtDayIstartswith 
     * @param {Number} opts.closedAtDayEndswith 
     * @param {Number} opts.closedAtDayIendswith 
     * @param {Number} opts.closedAtDayRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDayIsnull 
     * @param {Number} opts.closedAtDayRegex 
     * @param {Number} opts.closedAtDayIregex 
     * @param {Number} opts.closedAtDayContainedBy 
     * @param {Number} opts.closedAtWeekDay 
     * @param {Number} opts.closedAtWeekDayIexact 
     * @param {Number} opts.closedAtWeekDayGt 
     * @param {Number} opts.closedAtWeekDayGte 
     * @param {Number} opts.closedAtWeekDayLt 
     * @param {Number} opts.closedAtWeekDayLte 
     * @param {Number} opts.closedAtWeekDayIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtWeekDayContains 
     * @param {Number} opts.closedAtWeekDayIcontains 
     * @param {Number} opts.closedAtWeekDayStartswith 
     * @param {Number} opts.closedAtWeekDayIstartswith 
     * @param {Number} opts.closedAtWeekDayEndswith 
     * @param {Number} opts.closedAtWeekDayIendswith 
     * @param {Number} opts.closedAtWeekDayRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtWeekDayIsnull 
     * @param {Number} opts.closedAtWeekDayRegex 
     * @param {Number} opts.closedAtWeekDayIregex 
     * @param {Number} opts.closedAtWeekDayContainedBy 
     * @param {Number} opts.closedAtWeek 
     * @param {Number} opts.closedAtWeekIexact 
     * @param {Number} opts.closedAtWeekGt 
     * @param {Number} opts.closedAtWeekGte 
     * @param {Number} opts.closedAtWeekLt 
     * @param {Number} opts.closedAtWeekLte 
     * @param {Number} opts.closedAtWeekIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtWeekContains 
     * @param {Number} opts.closedAtWeekIcontains 
     * @param {Number} opts.closedAtWeekStartswith 
     * @param {Number} opts.closedAtWeekIstartswith 
     * @param {Number} opts.closedAtWeekEndswith 
     * @param {Number} opts.closedAtWeekIendswith 
     * @param {Number} opts.closedAtWeekRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtWeekIsnull 
     * @param {Number} opts.closedAtWeekRegex 
     * @param {Number} opts.closedAtWeekIregex 
     * @param {Number} opts.closedAtWeekContainedBy 
     * @param {Number} opts.closedAtIsoYear 
     * @param {Number} opts.closedAtIsoYearIexact 
     * @param {Number} opts.closedAtIsoYearGt 
     * @param {Number} opts.closedAtIsoYearGte 
     * @param {Number} opts.closedAtIsoYearLt 
     * @param {Number} opts.closedAtIsoYearLte 
     * @param {Number} opts.closedAtIsoYearIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtIsoYearContains 
     * @param {Number} opts.closedAtIsoYearIcontains 
     * @param {Number} opts.closedAtIsoYearStartswith 
     * @param {Number} opts.closedAtIsoYearIstartswith 
     * @param {Number} opts.closedAtIsoYearEndswith 
     * @param {Number} opts.closedAtIsoYearIendswith 
     * @param {Number} opts.closedAtIsoYearRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtIsoYearIsnull 
     * @param {Number} opts.closedAtIsoYearRegex 
     * @param {Number} opts.closedAtIsoYearIregex 
     * @param {Number} opts.closedAtIsoYearContainedBy 
     * @param {Number} opts.closedAtQuarter 
     * @param {Number} opts.closedAtQuarterIexact 
     * @param {Number} opts.closedAtQuarterGt 
     * @param {Number} opts.closedAtQuarterGte 
     * @param {Number} opts.closedAtQuarterLt 
     * @param {Number} opts.closedAtQuarterLte 
     * @param {Number} opts.closedAtQuarterIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtQuarterContains 
     * @param {Number} opts.closedAtQuarterIcontains 
     * @param {Number} opts.closedAtQuarterStartswith 
     * @param {Number} opts.closedAtQuarterIstartswith 
     * @param {Number} opts.closedAtQuarterEndswith 
     * @param {Number} opts.closedAtQuarterIendswith 
     * @param {Number} opts.closedAtQuarterRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtQuarterIsnull 
     * @param {Number} opts.closedAtQuarterRegex 
     * @param {Number} opts.closedAtQuarterIregex 
     * @param {Number} opts.closedAtQuarterContainedBy 
     * @param {String} opts.closedAtContainedBy 
     * @param {Number} opts.closedAtHour 
     * @param {Number} opts.closedAtHourIexact 
     * @param {Number} opts.closedAtHourGt 
     * @param {Number} opts.closedAtHourGte 
     * @param {Number} opts.closedAtHourLt 
     * @param {Number} opts.closedAtHourLte 
     * @param {Number} opts.closedAtHourIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtHourContains 
     * @param {Number} opts.closedAtHourIcontains 
     * @param {Number} opts.closedAtHourStartswith 
     * @param {Number} opts.closedAtHourIstartswith 
     * @param {Number} opts.closedAtHourEndswith 
     * @param {Number} opts.closedAtHourIendswith 
     * @param {Number} opts.closedAtHourRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtHourIsnull 
     * @param {Number} opts.closedAtHourRegex 
     * @param {Number} opts.closedAtHourIregex 
     * @param {Number} opts.closedAtHourContainedBy 
     * @param {Number} opts.closedAtMinute 
     * @param {Number} opts.closedAtMinuteIexact 
     * @param {Number} opts.closedAtMinuteGt 
     * @param {Number} opts.closedAtMinuteGte 
     * @param {Number} opts.closedAtMinuteLt 
     * @param {Number} opts.closedAtMinuteLte 
     * @param {Number} opts.closedAtMinuteIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtMinuteContains 
     * @param {Number} opts.closedAtMinuteIcontains 
     * @param {Number} opts.closedAtMinuteStartswith 
     * @param {Number} opts.closedAtMinuteIstartswith 
     * @param {Number} opts.closedAtMinuteEndswith 
     * @param {Number} opts.closedAtMinuteIendswith 
     * @param {Number} opts.closedAtMinuteRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtMinuteIsnull 
     * @param {Number} opts.closedAtMinuteRegex 
     * @param {Number} opts.closedAtMinuteIregex 
     * @param {Number} opts.closedAtMinuteContainedBy 
     * @param {Number} opts.closedAtSecond 
     * @param {Number} opts.closedAtSecondIexact 
     * @param {Number} opts.closedAtSecondGt 
     * @param {Number} opts.closedAtSecondGte 
     * @param {Number} opts.closedAtSecondLt 
     * @param {Number} opts.closedAtSecondLte 
     * @param {Number} opts.closedAtSecondIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtSecondContains 
     * @param {Number} opts.closedAtSecondIcontains 
     * @param {Number} opts.closedAtSecondStartswith 
     * @param {Number} opts.closedAtSecondIstartswith 
     * @param {Number} opts.closedAtSecondEndswith 
     * @param {Number} opts.closedAtSecondIendswith 
     * @param {Number} opts.closedAtSecondRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtSecondIsnull 
     * @param {Number} opts.closedAtSecondRegex 
     * @param {Number} opts.closedAtSecondIregex 
     * @param {Number} opts.closedAtSecondContainedBy 
     * @param {String} opts.closedAtDate 
     * @param {String} opts.closedAtDateIexact 
     * @param {String} opts.closedAtDateGt 
     * @param {String} opts.closedAtDateGte 
     * @param {String} opts.closedAtDateLt 
     * @param {String} opts.closedAtDateLte 
     * @param {String} opts.closedAtDateIn Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateContains 
     * @param {String} opts.closedAtDateIcontains 
     * @param {String} opts.closedAtDateStartswith 
     * @param {String} opts.closedAtDateIstartswith 
     * @param {String} opts.closedAtDateEndswith 
     * @param {String} opts.closedAtDateIendswith 
     * @param {String} opts.closedAtDateRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateIsnull 
     * @param {String} opts.closedAtDateRegex 
     * @param {String} opts.closedAtDateIregex 
     * @param {Number} opts.closedAtDateYear 
     * @param {Number} opts.closedAtDateYearIexact 
     * @param {Number} opts.closedAtDateYearGt 
     * @param {Number} opts.closedAtDateYearGte 
     * @param {Number} opts.closedAtDateYearLt 
     * @param {Number} opts.closedAtDateYearLte 
     * @param {Number} opts.closedAtDateYearIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDateYearContains 
     * @param {Number} opts.closedAtDateYearIcontains 
     * @param {Number} opts.closedAtDateYearStartswith 
     * @param {Number} opts.closedAtDateYearIstartswith 
     * @param {Number} opts.closedAtDateYearEndswith 
     * @param {Number} opts.closedAtDateYearIendswith 
     * @param {Number} opts.closedAtDateYearRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateYearIsnull 
     * @param {Number} opts.closedAtDateYearRegex 
     * @param {Number} opts.closedAtDateYearIregex 
     * @param {Number} opts.closedAtDateYearContainedBy 
     * @param {Number} opts.closedAtDateMonth 
     * @param {Number} opts.closedAtDateMonthIexact 
     * @param {Number} opts.closedAtDateMonthGt 
     * @param {Number} opts.closedAtDateMonthGte 
     * @param {Number} opts.closedAtDateMonthLt 
     * @param {Number} opts.closedAtDateMonthLte 
     * @param {Number} opts.closedAtDateMonthIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDateMonthContains 
     * @param {Number} opts.closedAtDateMonthIcontains 
     * @param {Number} opts.closedAtDateMonthStartswith 
     * @param {Number} opts.closedAtDateMonthIstartswith 
     * @param {Number} opts.closedAtDateMonthEndswith 
     * @param {Number} opts.closedAtDateMonthIendswith 
     * @param {Number} opts.closedAtDateMonthRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateMonthIsnull 
     * @param {Number} opts.closedAtDateMonthRegex 
     * @param {Number} opts.closedAtDateMonthIregex 
     * @param {Number} opts.closedAtDateMonthContainedBy 
     * @param {Number} opts.closedAtDateDay 
     * @param {Number} opts.closedAtDateDayIexact 
     * @param {Number} opts.closedAtDateDayGt 
     * @param {Number} opts.closedAtDateDayGte 
     * @param {Number} opts.closedAtDateDayLt 
     * @param {Number} opts.closedAtDateDayLte 
     * @param {Number} opts.closedAtDateDayIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDateDayContains 
     * @param {Number} opts.closedAtDateDayIcontains 
     * @param {Number} opts.closedAtDateDayStartswith 
     * @param {Number} opts.closedAtDateDayIstartswith 
     * @param {Number} opts.closedAtDateDayEndswith 
     * @param {Number} opts.closedAtDateDayIendswith 
     * @param {Number} opts.closedAtDateDayRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateDayIsnull 
     * @param {Number} opts.closedAtDateDayRegex 
     * @param {Number} opts.closedAtDateDayIregex 
     * @param {Number} opts.closedAtDateDayContainedBy 
     * @param {Number} opts.closedAtDateWeekDay 
     * @param {Number} opts.closedAtDateWeekDayIexact 
     * @param {Number} opts.closedAtDateWeekDayGt 
     * @param {Number} opts.closedAtDateWeekDayGte 
     * @param {Number} opts.closedAtDateWeekDayLt 
     * @param {Number} opts.closedAtDateWeekDayLte 
     * @param {Number} opts.closedAtDateWeekDayIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDateWeekDayContains 
     * @param {Number} opts.closedAtDateWeekDayIcontains 
     * @param {Number} opts.closedAtDateWeekDayStartswith 
     * @param {Number} opts.closedAtDateWeekDayIstartswith 
     * @param {Number} opts.closedAtDateWeekDayEndswith 
     * @param {Number} opts.closedAtDateWeekDayIendswith 
     * @param {Number} opts.closedAtDateWeekDayRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateWeekDayIsnull 
     * @param {Number} opts.closedAtDateWeekDayRegex 
     * @param {Number} opts.closedAtDateWeekDayIregex 
     * @param {Number} opts.closedAtDateWeekDayContainedBy 
     * @param {Number} opts.closedAtDateWeek 
     * @param {Number} opts.closedAtDateWeekIexact 
     * @param {Number} opts.closedAtDateWeekGt 
     * @param {Number} opts.closedAtDateWeekGte 
     * @param {Number} opts.closedAtDateWeekLt 
     * @param {Number} opts.closedAtDateWeekLte 
     * @param {Number} opts.closedAtDateWeekIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDateWeekContains 
     * @param {Number} opts.closedAtDateWeekIcontains 
     * @param {Number} opts.closedAtDateWeekStartswith 
     * @param {Number} opts.closedAtDateWeekIstartswith 
     * @param {Number} opts.closedAtDateWeekEndswith 
     * @param {Number} opts.closedAtDateWeekIendswith 
     * @param {Number} opts.closedAtDateWeekRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateWeekIsnull 
     * @param {Number} opts.closedAtDateWeekRegex 
     * @param {Number} opts.closedAtDateWeekIregex 
     * @param {Number} opts.closedAtDateWeekContainedBy 
     * @param {Number} opts.closedAtDateIsoYear 
     * @param {Number} opts.closedAtDateIsoYearIexact 
     * @param {Number} opts.closedAtDateIsoYearGt 
     * @param {Number} opts.closedAtDateIsoYearGte 
     * @param {Number} opts.closedAtDateIsoYearLt 
     * @param {Number} opts.closedAtDateIsoYearLte 
     * @param {Number} opts.closedAtDateIsoYearIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDateIsoYearContains 
     * @param {Number} opts.closedAtDateIsoYearIcontains 
     * @param {Number} opts.closedAtDateIsoYearStartswith 
     * @param {Number} opts.closedAtDateIsoYearIstartswith 
     * @param {Number} opts.closedAtDateIsoYearEndswith 
     * @param {Number} opts.closedAtDateIsoYearIendswith 
     * @param {Number} opts.closedAtDateIsoYearRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateIsoYearIsnull 
     * @param {Number} opts.closedAtDateIsoYearRegex 
     * @param {Number} opts.closedAtDateIsoYearIregex 
     * @param {Number} opts.closedAtDateIsoYearContainedBy 
     * @param {Number} opts.closedAtDateQuarter 
     * @param {Number} opts.closedAtDateQuarterIexact 
     * @param {Number} opts.closedAtDateQuarterGt 
     * @param {Number} opts.closedAtDateQuarterGte 
     * @param {Number} opts.closedAtDateQuarterLt 
     * @param {Number} opts.closedAtDateQuarterLte 
     * @param {Number} opts.closedAtDateQuarterIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDateQuarterContains 
     * @param {Number} opts.closedAtDateQuarterIcontains 
     * @param {Number} opts.closedAtDateQuarterStartswith 
     * @param {Number} opts.closedAtDateQuarterIstartswith 
     * @param {Number} opts.closedAtDateQuarterEndswith 
     * @param {Number} opts.closedAtDateQuarterIendswith 
     * @param {Number} opts.closedAtDateQuarterRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateQuarterIsnull 
     * @param {Number} opts.closedAtDateQuarterRegex 
     * @param {Number} opts.closedAtDateQuarterIregex 
     * @param {Number} opts.closedAtDateQuarterContainedBy 
     * @param {String} opts.closedAtDateContainedBy 
     * @param {String} opts.closedAtTime 
     * @param {String} opts.closedAtTimeIexact 
     * @param {String} opts.closedAtTimeGt 
     * @param {String} opts.closedAtTimeGte 
     * @param {String} opts.closedAtTimeLt 
     * @param {String} opts.closedAtTimeLte 
     * @param {String} opts.closedAtTimeIn Multiple values may be separated by commas.
     * @param {String} opts.closedAtTimeContains 
     * @param {String} opts.closedAtTimeIcontains 
     * @param {String} opts.closedAtTimeStartswith 
     * @param {String} opts.closedAtTimeIstartswith 
     * @param {String} opts.closedAtTimeEndswith 
     * @param {String} opts.closedAtTimeIendswith 
     * @param {String} opts.closedAtTimeRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtTimeIsnull 
     * @param {String} opts.closedAtTimeRegex 
     * @param {String} opts.closedAtTimeIregex 
     * @param {Number} opts.closedAtTimeHour 
     * @param {Number} opts.closedAtTimeHourIexact 
     * @param {Number} opts.closedAtTimeHourGt 
     * @param {Number} opts.closedAtTimeHourGte 
     * @param {Number} opts.closedAtTimeHourLt 
     * @param {Number} opts.closedAtTimeHourLte 
     * @param {Number} opts.closedAtTimeHourIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtTimeHourContains 
     * @param {Number} opts.closedAtTimeHourIcontains 
     * @param {Number} opts.closedAtTimeHourStartswith 
     * @param {Number} opts.closedAtTimeHourIstartswith 
     * @param {Number} opts.closedAtTimeHourEndswith 
     * @param {Number} opts.closedAtTimeHourIendswith 
     * @param {Number} opts.closedAtTimeHourRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtTimeHourIsnull 
     * @param {Number} opts.closedAtTimeHourRegex 
     * @param {Number} opts.closedAtTimeHourIregex 
     * @param {Number} opts.closedAtTimeHourContainedBy 
     * @param {Number} opts.closedAtTimeMinute 
     * @param {Number} opts.closedAtTimeMinuteIexact 
     * @param {Number} opts.closedAtTimeMinuteGt 
     * @param {Number} opts.closedAtTimeMinuteGte 
     * @param {Number} opts.closedAtTimeMinuteLt 
     * @param {Number} opts.closedAtTimeMinuteLte 
     * @param {Number} opts.closedAtTimeMinuteIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtTimeMinuteContains 
     * @param {Number} opts.closedAtTimeMinuteIcontains 
     * @param {Number} opts.closedAtTimeMinuteStartswith 
     * @param {Number} opts.closedAtTimeMinuteIstartswith 
     * @param {Number} opts.closedAtTimeMinuteEndswith 
     * @param {Number} opts.closedAtTimeMinuteIendswith 
     * @param {Number} opts.closedAtTimeMinuteRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtTimeMinuteIsnull 
     * @param {Number} opts.closedAtTimeMinuteRegex 
     * @param {Number} opts.closedAtTimeMinuteIregex 
     * @param {Number} opts.closedAtTimeMinuteContainedBy 
     * @param {Number} opts.closedAtTimeSecond 
     * @param {Number} opts.closedAtTimeSecondIexact 
     * @param {Number} opts.closedAtTimeSecondGt 
     * @param {Number} opts.closedAtTimeSecondGte 
     * @param {Number} opts.closedAtTimeSecondLt 
     * @param {Number} opts.closedAtTimeSecondLte 
     * @param {Number} opts.closedAtTimeSecondIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtTimeSecondContains 
     * @param {Number} opts.closedAtTimeSecondIcontains 
     * @param {Number} opts.closedAtTimeSecondStartswith 
     * @param {Number} opts.closedAtTimeSecondIstartswith 
     * @param {Number} opts.closedAtTimeSecondEndswith 
     * @param {Number} opts.closedAtTimeSecondIendswith 
     * @param {Number} opts.closedAtTimeSecondRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtTimeSecondIsnull 
     * @param {Number} opts.closedAtTimeSecondRegex 
     * @param {Number} opts.closedAtTimeSecondIregex 
     * @param {Number} opts.closedAtTimeSecondContainedBy 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/MetricsApi~metricsTeamsSuppressionsByCommunityListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommunityNameChartSerializer>}
     */
    this.metricsTeamsSuppressionsByCommunityList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling metricsTeamsSuppressionsByCommunityList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'reason': opts['reason'],
        'closed_at': opts['closedAt'],
        'closed_at__iexact': opts['closedAtIexact'],
        'closed_at__gt': opts['closedAtGt'],
        'closed_at__gte': opts['closedAtGte'],
        'closed_at__lt': opts['closedAtLt'],
        'closed_at__lte': opts['closedAtLte'],
        'closed_at__in': opts['closedAtIn'],
        'closed_at__contains': opts['closedAtContains'],
        'closed_at__icontains': opts['closedAtIcontains'],
        'closed_at__startswith': opts['closedAtStartswith'],
        'closed_at__istartswith': opts['closedAtIstartswith'],
        'closed_at__endswith': opts['closedAtEndswith'],
        'closed_at__iendswith': opts['closedAtIendswith'],
        'closed_at__range': opts['closedAtRange'],
        'closed_at__isnull': opts['closedAtIsnull'],
        'closed_at__regex': opts['closedAtRegex'],
        'closed_at__iregex': opts['closedAtIregex'],
        'closed_at__year': opts['closedAtYear'],
        'closed_at__year__iexact': opts['closedAtYearIexact'],
        'closed_at__year__gt': opts['closedAtYearGt'],
        'closed_at__year__gte': opts['closedAtYearGte'],
        'closed_at__year__lt': opts['closedAtYearLt'],
        'closed_at__year__lte': opts['closedAtYearLte'],
        'closed_at__year__in': opts['closedAtYearIn'],
        'closed_at__year__contains': opts['closedAtYearContains'],
        'closed_at__year__icontains': opts['closedAtYearIcontains'],
        'closed_at__year__startswith': opts['closedAtYearStartswith'],
        'closed_at__year__istartswith': opts['closedAtYearIstartswith'],
        'closed_at__year__endswith': opts['closedAtYearEndswith'],
        'closed_at__year__iendswith': opts['closedAtYearIendswith'],
        'closed_at__year__range': opts['closedAtYearRange'],
        'closed_at__year__isnull': opts['closedAtYearIsnull'],
        'closed_at__year__regex': opts['closedAtYearRegex'],
        'closed_at__year__iregex': opts['closedAtYearIregex'],
        'closed_at__year__contained_by': opts['closedAtYearContainedBy'],
        'closed_at__month': opts['closedAtMonth'],
        'closed_at__month__iexact': opts['closedAtMonthIexact'],
        'closed_at__month__gt': opts['closedAtMonthGt'],
        'closed_at__month__gte': opts['closedAtMonthGte'],
        'closed_at__month__lt': opts['closedAtMonthLt'],
        'closed_at__month__lte': opts['closedAtMonthLte'],
        'closed_at__month__in': opts['closedAtMonthIn'],
        'closed_at__month__contains': opts['closedAtMonthContains'],
        'closed_at__month__icontains': opts['closedAtMonthIcontains'],
        'closed_at__month__startswith': opts['closedAtMonthStartswith'],
        'closed_at__month__istartswith': opts['closedAtMonthIstartswith'],
        'closed_at__month__endswith': opts['closedAtMonthEndswith'],
        'closed_at__month__iendswith': opts['closedAtMonthIendswith'],
        'closed_at__month__range': opts['closedAtMonthRange'],
        'closed_at__month__isnull': opts['closedAtMonthIsnull'],
        'closed_at__month__regex': opts['closedAtMonthRegex'],
        'closed_at__month__iregex': opts['closedAtMonthIregex'],
        'closed_at__month__contained_by': opts['closedAtMonthContainedBy'],
        'closed_at__day': opts['closedAtDay'],
        'closed_at__day__iexact': opts['closedAtDayIexact'],
        'closed_at__day__gt': opts['closedAtDayGt'],
        'closed_at__day__gte': opts['closedAtDayGte'],
        'closed_at__day__lt': opts['closedAtDayLt'],
        'closed_at__day__lte': opts['closedAtDayLte'],
        'closed_at__day__in': opts['closedAtDayIn'],
        'closed_at__day__contains': opts['closedAtDayContains'],
        'closed_at__day__icontains': opts['closedAtDayIcontains'],
        'closed_at__day__startswith': opts['closedAtDayStartswith'],
        'closed_at__day__istartswith': opts['closedAtDayIstartswith'],
        'closed_at__day__endswith': opts['closedAtDayEndswith'],
        'closed_at__day__iendswith': opts['closedAtDayIendswith'],
        'closed_at__day__range': opts['closedAtDayRange'],
        'closed_at__day__isnull': opts['closedAtDayIsnull'],
        'closed_at__day__regex': opts['closedAtDayRegex'],
        'closed_at__day__iregex': opts['closedAtDayIregex'],
        'closed_at__day__contained_by': opts['closedAtDayContainedBy'],
        'closed_at__week_day': opts['closedAtWeekDay'],
        'closed_at__week_day__iexact': opts['closedAtWeekDayIexact'],
        'closed_at__week_day__gt': opts['closedAtWeekDayGt'],
        'closed_at__week_day__gte': opts['closedAtWeekDayGte'],
        'closed_at__week_day__lt': opts['closedAtWeekDayLt'],
        'closed_at__week_day__lte': opts['closedAtWeekDayLte'],
        'closed_at__week_day__in': opts['closedAtWeekDayIn'],
        'closed_at__week_day__contains': opts['closedAtWeekDayContains'],
        'closed_at__week_day__icontains': opts['closedAtWeekDayIcontains'],
        'closed_at__week_day__startswith': opts['closedAtWeekDayStartswith'],
        'closed_at__week_day__istartswith': opts['closedAtWeekDayIstartswith'],
        'closed_at__week_day__endswith': opts['closedAtWeekDayEndswith'],
        'closed_at__week_day__iendswith': opts['closedAtWeekDayIendswith'],
        'closed_at__week_day__range': opts['closedAtWeekDayRange'],
        'closed_at__week_day__isnull': opts['closedAtWeekDayIsnull'],
        'closed_at__week_day__regex': opts['closedAtWeekDayRegex'],
        'closed_at__week_day__iregex': opts['closedAtWeekDayIregex'],
        'closed_at__week_day__contained_by': opts['closedAtWeekDayContainedBy'],
        'closed_at__week': opts['closedAtWeek'],
        'closed_at__week__iexact': opts['closedAtWeekIexact'],
        'closed_at__week__gt': opts['closedAtWeekGt'],
        'closed_at__week__gte': opts['closedAtWeekGte'],
        'closed_at__week__lt': opts['closedAtWeekLt'],
        'closed_at__week__lte': opts['closedAtWeekLte'],
        'closed_at__week__in': opts['closedAtWeekIn'],
        'closed_at__week__contains': opts['closedAtWeekContains'],
        'closed_at__week__icontains': opts['closedAtWeekIcontains'],
        'closed_at__week__startswith': opts['closedAtWeekStartswith'],
        'closed_at__week__istartswith': opts['closedAtWeekIstartswith'],
        'closed_at__week__endswith': opts['closedAtWeekEndswith'],
        'closed_at__week__iendswith': opts['closedAtWeekIendswith'],
        'closed_at__week__range': opts['closedAtWeekRange'],
        'closed_at__week__isnull': opts['closedAtWeekIsnull'],
        'closed_at__week__regex': opts['closedAtWeekRegex'],
        'closed_at__week__iregex': opts['closedAtWeekIregex'],
        'closed_at__week__contained_by': opts['closedAtWeekContainedBy'],
        'closed_at__iso_year': opts['closedAtIsoYear'],
        'closed_at__iso_year__iexact': opts['closedAtIsoYearIexact'],
        'closed_at__iso_year__gt': opts['closedAtIsoYearGt'],
        'closed_at__iso_year__gte': opts['closedAtIsoYearGte'],
        'closed_at__iso_year__lt': opts['closedAtIsoYearLt'],
        'closed_at__iso_year__lte': opts['closedAtIsoYearLte'],
        'closed_at__iso_year__in': opts['closedAtIsoYearIn'],
        'closed_at__iso_year__contains': opts['closedAtIsoYearContains'],
        'closed_at__iso_year__icontains': opts['closedAtIsoYearIcontains'],
        'closed_at__iso_year__startswith': opts['closedAtIsoYearStartswith'],
        'closed_at__iso_year__istartswith': opts['closedAtIsoYearIstartswith'],
        'closed_at__iso_year__endswith': opts['closedAtIsoYearEndswith'],
        'closed_at__iso_year__iendswith': opts['closedAtIsoYearIendswith'],
        'closed_at__iso_year__range': opts['closedAtIsoYearRange'],
        'closed_at__iso_year__isnull': opts['closedAtIsoYearIsnull'],
        'closed_at__iso_year__regex': opts['closedAtIsoYearRegex'],
        'closed_at__iso_year__iregex': opts['closedAtIsoYearIregex'],
        'closed_at__iso_year__contained_by': opts['closedAtIsoYearContainedBy'],
        'closed_at__quarter': opts['closedAtQuarter'],
        'closed_at__quarter__iexact': opts['closedAtQuarterIexact'],
        'closed_at__quarter__gt': opts['closedAtQuarterGt'],
        'closed_at__quarter__gte': opts['closedAtQuarterGte'],
        'closed_at__quarter__lt': opts['closedAtQuarterLt'],
        'closed_at__quarter__lte': opts['closedAtQuarterLte'],
        'closed_at__quarter__in': opts['closedAtQuarterIn'],
        'closed_at__quarter__contains': opts['closedAtQuarterContains'],
        'closed_at__quarter__icontains': opts['closedAtQuarterIcontains'],
        'closed_at__quarter__startswith': opts['closedAtQuarterStartswith'],
        'closed_at__quarter__istartswith': opts['closedAtQuarterIstartswith'],
        'closed_at__quarter__endswith': opts['closedAtQuarterEndswith'],
        'closed_at__quarter__iendswith': opts['closedAtQuarterIendswith'],
        'closed_at__quarter__range': opts['closedAtQuarterRange'],
        'closed_at__quarter__isnull': opts['closedAtQuarterIsnull'],
        'closed_at__quarter__regex': opts['closedAtQuarterRegex'],
        'closed_at__quarter__iregex': opts['closedAtQuarterIregex'],
        'closed_at__quarter__contained_by': opts['closedAtQuarterContainedBy'],
        'closed_at__contained_by': opts['closedAtContainedBy'],
        'closed_at__hour': opts['closedAtHour'],
        'closed_at__hour__iexact': opts['closedAtHourIexact'],
        'closed_at__hour__gt': opts['closedAtHourGt'],
        'closed_at__hour__gte': opts['closedAtHourGte'],
        'closed_at__hour__lt': opts['closedAtHourLt'],
        'closed_at__hour__lte': opts['closedAtHourLte'],
        'closed_at__hour__in': opts['closedAtHourIn'],
        'closed_at__hour__contains': opts['closedAtHourContains'],
        'closed_at__hour__icontains': opts['closedAtHourIcontains'],
        'closed_at__hour__startswith': opts['closedAtHourStartswith'],
        'closed_at__hour__istartswith': opts['closedAtHourIstartswith'],
        'closed_at__hour__endswith': opts['closedAtHourEndswith'],
        'closed_at__hour__iendswith': opts['closedAtHourIendswith'],
        'closed_at__hour__range': opts['closedAtHourRange'],
        'closed_at__hour__isnull': opts['closedAtHourIsnull'],
        'closed_at__hour__regex': opts['closedAtHourRegex'],
        'closed_at__hour__iregex': opts['closedAtHourIregex'],
        'closed_at__hour__contained_by': opts['closedAtHourContainedBy'],
        'closed_at__minute': opts['closedAtMinute'],
        'closed_at__minute__iexact': opts['closedAtMinuteIexact'],
        'closed_at__minute__gt': opts['closedAtMinuteGt'],
        'closed_at__minute__gte': opts['closedAtMinuteGte'],
        'closed_at__minute__lt': opts['closedAtMinuteLt'],
        'closed_at__minute__lte': opts['closedAtMinuteLte'],
        'closed_at__minute__in': opts['closedAtMinuteIn'],
        'closed_at__minute__contains': opts['closedAtMinuteContains'],
        'closed_at__minute__icontains': opts['closedAtMinuteIcontains'],
        'closed_at__minute__startswith': opts['closedAtMinuteStartswith'],
        'closed_at__minute__istartswith': opts['closedAtMinuteIstartswith'],
        'closed_at__minute__endswith': opts['closedAtMinuteEndswith'],
        'closed_at__minute__iendswith': opts['closedAtMinuteIendswith'],
        'closed_at__minute__range': opts['closedAtMinuteRange'],
        'closed_at__minute__isnull': opts['closedAtMinuteIsnull'],
        'closed_at__minute__regex': opts['closedAtMinuteRegex'],
        'closed_at__minute__iregex': opts['closedAtMinuteIregex'],
        'closed_at__minute__contained_by': opts['closedAtMinuteContainedBy'],
        'closed_at__second': opts['closedAtSecond'],
        'closed_at__second__iexact': opts['closedAtSecondIexact'],
        'closed_at__second__gt': opts['closedAtSecondGt'],
        'closed_at__second__gte': opts['closedAtSecondGte'],
        'closed_at__second__lt': opts['closedAtSecondLt'],
        'closed_at__second__lte': opts['closedAtSecondLte'],
        'closed_at__second__in': opts['closedAtSecondIn'],
        'closed_at__second__contains': opts['closedAtSecondContains'],
        'closed_at__second__icontains': opts['closedAtSecondIcontains'],
        'closed_at__second__startswith': opts['closedAtSecondStartswith'],
        'closed_at__second__istartswith': opts['closedAtSecondIstartswith'],
        'closed_at__second__endswith': opts['closedAtSecondEndswith'],
        'closed_at__second__iendswith': opts['closedAtSecondIendswith'],
        'closed_at__second__range': opts['closedAtSecondRange'],
        'closed_at__second__isnull': opts['closedAtSecondIsnull'],
        'closed_at__second__regex': opts['closedAtSecondRegex'],
        'closed_at__second__iregex': opts['closedAtSecondIregex'],
        'closed_at__second__contained_by': opts['closedAtSecondContainedBy'],
        'closed_at__date': opts['closedAtDate'],
        'closed_at__date__iexact': opts['closedAtDateIexact'],
        'closed_at__date__gt': opts['closedAtDateGt'],
        'closed_at__date__gte': opts['closedAtDateGte'],
        'closed_at__date__lt': opts['closedAtDateLt'],
        'closed_at__date__lte': opts['closedAtDateLte'],
        'closed_at__date__in': opts['closedAtDateIn'],
        'closed_at__date__contains': opts['closedAtDateContains'],
        'closed_at__date__icontains': opts['closedAtDateIcontains'],
        'closed_at__date__startswith': opts['closedAtDateStartswith'],
        'closed_at__date__istartswith': opts['closedAtDateIstartswith'],
        'closed_at__date__endswith': opts['closedAtDateEndswith'],
        'closed_at__date__iendswith': opts['closedAtDateIendswith'],
        'closed_at__date__range': opts['closedAtDateRange'],
        'closed_at__date__isnull': opts['closedAtDateIsnull'],
        'closed_at__date__regex': opts['closedAtDateRegex'],
        'closed_at__date__iregex': opts['closedAtDateIregex'],
        'closed_at__date__year': opts['closedAtDateYear'],
        'closed_at__date__year__iexact': opts['closedAtDateYearIexact'],
        'closed_at__date__year__gt': opts['closedAtDateYearGt'],
        'closed_at__date__year__gte': opts['closedAtDateYearGte'],
        'closed_at__date__year__lt': opts['closedAtDateYearLt'],
        'closed_at__date__year__lte': opts['closedAtDateYearLte'],
        'closed_at__date__year__in': opts['closedAtDateYearIn'],
        'closed_at__date__year__contains': opts['closedAtDateYearContains'],
        'closed_at__date__year__icontains': opts['closedAtDateYearIcontains'],
        'closed_at__date__year__startswith': opts['closedAtDateYearStartswith'],
        'closed_at__date__year__istartswith': opts['closedAtDateYearIstartswith'],
        'closed_at__date__year__endswith': opts['closedAtDateYearEndswith'],
        'closed_at__date__year__iendswith': opts['closedAtDateYearIendswith'],
        'closed_at__date__year__range': opts['closedAtDateYearRange'],
        'closed_at__date__year__isnull': opts['closedAtDateYearIsnull'],
        'closed_at__date__year__regex': opts['closedAtDateYearRegex'],
        'closed_at__date__year__iregex': opts['closedAtDateYearIregex'],
        'closed_at__date__year__contained_by': opts['closedAtDateYearContainedBy'],
        'closed_at__date__month': opts['closedAtDateMonth'],
        'closed_at__date__month__iexact': opts['closedAtDateMonthIexact'],
        'closed_at__date__month__gt': opts['closedAtDateMonthGt'],
        'closed_at__date__month__gte': opts['closedAtDateMonthGte'],
        'closed_at__date__month__lt': opts['closedAtDateMonthLt'],
        'closed_at__date__month__lte': opts['closedAtDateMonthLte'],
        'closed_at__date__month__in': opts['closedAtDateMonthIn'],
        'closed_at__date__month__contains': opts['closedAtDateMonthContains'],
        'closed_at__date__month__icontains': opts['closedAtDateMonthIcontains'],
        'closed_at__date__month__startswith': opts['closedAtDateMonthStartswith'],
        'closed_at__date__month__istartswith': opts['closedAtDateMonthIstartswith'],
        'closed_at__date__month__endswith': opts['closedAtDateMonthEndswith'],
        'closed_at__date__month__iendswith': opts['closedAtDateMonthIendswith'],
        'closed_at__date__month__range': opts['closedAtDateMonthRange'],
        'closed_at__date__month__isnull': opts['closedAtDateMonthIsnull'],
        'closed_at__date__month__regex': opts['closedAtDateMonthRegex'],
        'closed_at__date__month__iregex': opts['closedAtDateMonthIregex'],
        'closed_at__date__month__contained_by': opts['closedAtDateMonthContainedBy'],
        'closed_at__date__day': opts['closedAtDateDay'],
        'closed_at__date__day__iexact': opts['closedAtDateDayIexact'],
        'closed_at__date__day__gt': opts['closedAtDateDayGt'],
        'closed_at__date__day__gte': opts['closedAtDateDayGte'],
        'closed_at__date__day__lt': opts['closedAtDateDayLt'],
        'closed_at__date__day__lte': opts['closedAtDateDayLte'],
        'closed_at__date__day__in': opts['closedAtDateDayIn'],
        'closed_at__date__day__contains': opts['closedAtDateDayContains'],
        'closed_at__date__day__icontains': opts['closedAtDateDayIcontains'],
        'closed_at__date__day__startswith': opts['closedAtDateDayStartswith'],
        'closed_at__date__day__istartswith': opts['closedAtDateDayIstartswith'],
        'closed_at__date__day__endswith': opts['closedAtDateDayEndswith'],
        'closed_at__date__day__iendswith': opts['closedAtDateDayIendswith'],
        'closed_at__date__day__range': opts['closedAtDateDayRange'],
        'closed_at__date__day__isnull': opts['closedAtDateDayIsnull'],
        'closed_at__date__day__regex': opts['closedAtDateDayRegex'],
        'closed_at__date__day__iregex': opts['closedAtDateDayIregex'],
        'closed_at__date__day__contained_by': opts['closedAtDateDayContainedBy'],
        'closed_at__date__week_day': opts['closedAtDateWeekDay'],
        'closed_at__date__week_day__iexact': opts['closedAtDateWeekDayIexact'],
        'closed_at__date__week_day__gt': opts['closedAtDateWeekDayGt'],
        'closed_at__date__week_day__gte': opts['closedAtDateWeekDayGte'],
        'closed_at__date__week_day__lt': opts['closedAtDateWeekDayLt'],
        'closed_at__date__week_day__lte': opts['closedAtDateWeekDayLte'],
        'closed_at__date__week_day__in': opts['closedAtDateWeekDayIn'],
        'closed_at__date__week_day__contains': opts['closedAtDateWeekDayContains'],
        'closed_at__date__week_day__icontains': opts['closedAtDateWeekDayIcontains'],
        'closed_at__date__week_day__startswith': opts['closedAtDateWeekDayStartswith'],
        'closed_at__date__week_day__istartswith': opts['closedAtDateWeekDayIstartswith'],
        'closed_at__date__week_day__endswith': opts['closedAtDateWeekDayEndswith'],
        'closed_at__date__week_day__iendswith': opts['closedAtDateWeekDayIendswith'],
        'closed_at__date__week_day__range': opts['closedAtDateWeekDayRange'],
        'closed_at__date__week_day__isnull': opts['closedAtDateWeekDayIsnull'],
        'closed_at__date__week_day__regex': opts['closedAtDateWeekDayRegex'],
        'closed_at__date__week_day__iregex': opts['closedAtDateWeekDayIregex'],
        'closed_at__date__week_day__contained_by': opts['closedAtDateWeekDayContainedBy'],
        'closed_at__date__week': opts['closedAtDateWeek'],
        'closed_at__date__week__iexact': opts['closedAtDateWeekIexact'],
        'closed_at__date__week__gt': opts['closedAtDateWeekGt'],
        'closed_at__date__week__gte': opts['closedAtDateWeekGte'],
        'closed_at__date__week__lt': opts['closedAtDateWeekLt'],
        'closed_at__date__week__lte': opts['closedAtDateWeekLte'],
        'closed_at__date__week__in': opts['closedAtDateWeekIn'],
        'closed_at__date__week__contains': opts['closedAtDateWeekContains'],
        'closed_at__date__week__icontains': opts['closedAtDateWeekIcontains'],
        'closed_at__date__week__startswith': opts['closedAtDateWeekStartswith'],
        'closed_at__date__week__istartswith': opts['closedAtDateWeekIstartswith'],
        'closed_at__date__week__endswith': opts['closedAtDateWeekEndswith'],
        'closed_at__date__week__iendswith': opts['closedAtDateWeekIendswith'],
        'closed_at__date__week__range': opts['closedAtDateWeekRange'],
        'closed_at__date__week__isnull': opts['closedAtDateWeekIsnull'],
        'closed_at__date__week__regex': opts['closedAtDateWeekRegex'],
        'closed_at__date__week__iregex': opts['closedAtDateWeekIregex'],
        'closed_at__date__week__contained_by': opts['closedAtDateWeekContainedBy'],
        'closed_at__date__iso_year': opts['closedAtDateIsoYear'],
        'closed_at__date__iso_year__iexact': opts['closedAtDateIsoYearIexact'],
        'closed_at__date__iso_year__gt': opts['closedAtDateIsoYearGt'],
        'closed_at__date__iso_year__gte': opts['closedAtDateIsoYearGte'],
        'closed_at__date__iso_year__lt': opts['closedAtDateIsoYearLt'],
        'closed_at__date__iso_year__lte': opts['closedAtDateIsoYearLte'],
        'closed_at__date__iso_year__in': opts['closedAtDateIsoYearIn'],
        'closed_at__date__iso_year__contains': opts['closedAtDateIsoYearContains'],
        'closed_at__date__iso_year__icontains': opts['closedAtDateIsoYearIcontains'],
        'closed_at__date__iso_year__startswith': opts['closedAtDateIsoYearStartswith'],
        'closed_at__date__iso_year__istartswith': opts['closedAtDateIsoYearIstartswith'],
        'closed_at__date__iso_year__endswith': opts['closedAtDateIsoYearEndswith'],
        'closed_at__date__iso_year__iendswith': opts['closedAtDateIsoYearIendswith'],
        'closed_at__date__iso_year__range': opts['closedAtDateIsoYearRange'],
        'closed_at__date__iso_year__isnull': opts['closedAtDateIsoYearIsnull'],
        'closed_at__date__iso_year__regex': opts['closedAtDateIsoYearRegex'],
        'closed_at__date__iso_year__iregex': opts['closedAtDateIsoYearIregex'],
        'closed_at__date__iso_year__contained_by': opts['closedAtDateIsoYearContainedBy'],
        'closed_at__date__quarter': opts['closedAtDateQuarter'],
        'closed_at__date__quarter__iexact': opts['closedAtDateQuarterIexact'],
        'closed_at__date__quarter__gt': opts['closedAtDateQuarterGt'],
        'closed_at__date__quarter__gte': opts['closedAtDateQuarterGte'],
        'closed_at__date__quarter__lt': opts['closedAtDateQuarterLt'],
        'closed_at__date__quarter__lte': opts['closedAtDateQuarterLte'],
        'closed_at__date__quarter__in': opts['closedAtDateQuarterIn'],
        'closed_at__date__quarter__contains': opts['closedAtDateQuarterContains'],
        'closed_at__date__quarter__icontains': opts['closedAtDateQuarterIcontains'],
        'closed_at__date__quarter__startswith': opts['closedAtDateQuarterStartswith'],
        'closed_at__date__quarter__istartswith': opts['closedAtDateQuarterIstartswith'],
        'closed_at__date__quarter__endswith': opts['closedAtDateQuarterEndswith'],
        'closed_at__date__quarter__iendswith': opts['closedAtDateQuarterIendswith'],
        'closed_at__date__quarter__range': opts['closedAtDateQuarterRange'],
        'closed_at__date__quarter__isnull': opts['closedAtDateQuarterIsnull'],
        'closed_at__date__quarter__regex': opts['closedAtDateQuarterRegex'],
        'closed_at__date__quarter__iregex': opts['closedAtDateQuarterIregex'],
        'closed_at__date__quarter__contained_by': opts['closedAtDateQuarterContainedBy'],
        'closed_at__date__contained_by': opts['closedAtDateContainedBy'],
        'closed_at__time': opts['closedAtTime'],
        'closed_at__time__iexact': opts['closedAtTimeIexact'],
        'closed_at__time__gt': opts['closedAtTimeGt'],
        'closed_at__time__gte': opts['closedAtTimeGte'],
        'closed_at__time__lt': opts['closedAtTimeLt'],
        'closed_at__time__lte': opts['closedAtTimeLte'],
        'closed_at__time__in': opts['closedAtTimeIn'],
        'closed_at__time__contains': opts['closedAtTimeContains'],
        'closed_at__time__icontains': opts['closedAtTimeIcontains'],
        'closed_at__time__startswith': opts['closedAtTimeStartswith'],
        'closed_at__time__istartswith': opts['closedAtTimeIstartswith'],
        'closed_at__time__endswith': opts['closedAtTimeEndswith'],
        'closed_at__time__iendswith': opts['closedAtTimeIendswith'],
        'closed_at__time__range': opts['closedAtTimeRange'],
        'closed_at__time__isnull': opts['closedAtTimeIsnull'],
        'closed_at__time__regex': opts['closedAtTimeRegex'],
        'closed_at__time__iregex': opts['closedAtTimeIregex'],
        'closed_at__time__hour': opts['closedAtTimeHour'],
        'closed_at__time__hour__iexact': opts['closedAtTimeHourIexact'],
        'closed_at__time__hour__gt': opts['closedAtTimeHourGt'],
        'closed_at__time__hour__gte': opts['closedAtTimeHourGte'],
        'closed_at__time__hour__lt': opts['closedAtTimeHourLt'],
        'closed_at__time__hour__lte': opts['closedAtTimeHourLte'],
        'closed_at__time__hour__in': opts['closedAtTimeHourIn'],
        'closed_at__time__hour__contains': opts['closedAtTimeHourContains'],
        'closed_at__time__hour__icontains': opts['closedAtTimeHourIcontains'],
        'closed_at__time__hour__startswith': opts['closedAtTimeHourStartswith'],
        'closed_at__time__hour__istartswith': opts['closedAtTimeHourIstartswith'],
        'closed_at__time__hour__endswith': opts['closedAtTimeHourEndswith'],
        'closed_at__time__hour__iendswith': opts['closedAtTimeHourIendswith'],
        'closed_at__time__hour__range': opts['closedAtTimeHourRange'],
        'closed_at__time__hour__isnull': opts['closedAtTimeHourIsnull'],
        'closed_at__time__hour__regex': opts['closedAtTimeHourRegex'],
        'closed_at__time__hour__iregex': opts['closedAtTimeHourIregex'],
        'closed_at__time__hour__contained_by': opts['closedAtTimeHourContainedBy'],
        'closed_at__time__minute': opts['closedAtTimeMinute'],
        'closed_at__time__minute__iexact': opts['closedAtTimeMinuteIexact'],
        'closed_at__time__minute__gt': opts['closedAtTimeMinuteGt'],
        'closed_at__time__minute__gte': opts['closedAtTimeMinuteGte'],
        'closed_at__time__minute__lt': opts['closedAtTimeMinuteLt'],
        'closed_at__time__minute__lte': opts['closedAtTimeMinuteLte'],
        'closed_at__time__minute__in': opts['closedAtTimeMinuteIn'],
        'closed_at__time__minute__contains': opts['closedAtTimeMinuteContains'],
        'closed_at__time__minute__icontains': opts['closedAtTimeMinuteIcontains'],
        'closed_at__time__minute__startswith': opts['closedAtTimeMinuteStartswith'],
        'closed_at__time__minute__istartswith': opts['closedAtTimeMinuteIstartswith'],
        'closed_at__time__minute__endswith': opts['closedAtTimeMinuteEndswith'],
        'closed_at__time__minute__iendswith': opts['closedAtTimeMinuteIendswith'],
        'closed_at__time__minute__range': opts['closedAtTimeMinuteRange'],
        'closed_at__time__minute__isnull': opts['closedAtTimeMinuteIsnull'],
        'closed_at__time__minute__regex': opts['closedAtTimeMinuteRegex'],
        'closed_at__time__minute__iregex': opts['closedAtTimeMinuteIregex'],
        'closed_at__time__minute__contained_by': opts['closedAtTimeMinuteContainedBy'],
        'closed_at__time__second': opts['closedAtTimeSecond'],
        'closed_at__time__second__iexact': opts['closedAtTimeSecondIexact'],
        'closed_at__time__second__gt': opts['closedAtTimeSecondGt'],
        'closed_at__time__second__gte': opts['closedAtTimeSecondGte'],
        'closed_at__time__second__lt': opts['closedAtTimeSecondLt'],
        'closed_at__time__second__lte': opts['closedAtTimeSecondLte'],
        'closed_at__time__second__in': opts['closedAtTimeSecondIn'],
        'closed_at__time__second__contains': opts['closedAtTimeSecondContains'],
        'closed_at__time__second__icontains': opts['closedAtTimeSecondIcontains'],
        'closed_at__time__second__startswith': opts['closedAtTimeSecondStartswith'],
        'closed_at__time__second__istartswith': opts['closedAtTimeSecondIstartswith'],
        'closed_at__time__second__endswith': opts['closedAtTimeSecondEndswith'],
        'closed_at__time__second__iendswith': opts['closedAtTimeSecondIendswith'],
        'closed_at__time__second__range': opts['closedAtTimeSecondRange'],
        'closed_at__time__second__isnull': opts['closedAtTimeSecondIsnull'],
        'closed_at__time__second__regex': opts['closedAtTimeSecondRegex'],
        'closed_at__time__second__iregex': opts['closedAtTimeSecondIregex'],
        'closed_at__time__second__contained_by': opts['closedAtTimeSecondContainedBy'],
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CommunityNameChartSerializer];

      return this.apiClient.callApi(
        '/metrics/teams/{company_id}/suppressions/by-community', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsTeamsSuppressionsList operation.
     * @callback module:api/MetricsApi~metricsTeamsSuppressionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSuppressionReasons>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.closedAt 
     * @param {String} opts.closedAtIexact 
     * @param {String} opts.closedAtGt 
     * @param {String} opts.closedAtGte 
     * @param {String} opts.closedAtLt 
     * @param {String} opts.closedAtLte 
     * @param {String} opts.closedAtIn Multiple values may be separated by commas.
     * @param {String} opts.closedAtContains 
     * @param {String} opts.closedAtIcontains 
     * @param {String} opts.closedAtStartswith 
     * @param {String} opts.closedAtIstartswith 
     * @param {String} opts.closedAtEndswith 
     * @param {String} opts.closedAtIendswith 
     * @param {String} opts.closedAtRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtIsnull 
     * @param {String} opts.closedAtRegex 
     * @param {String} opts.closedAtIregex 
     * @param {Number} opts.closedAtYear 
     * @param {Number} opts.closedAtYearIexact 
     * @param {Number} opts.closedAtYearGt 
     * @param {Number} opts.closedAtYearGte 
     * @param {Number} opts.closedAtYearLt 
     * @param {Number} opts.closedAtYearLte 
     * @param {Number} opts.closedAtYearIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtYearContains 
     * @param {Number} opts.closedAtYearIcontains 
     * @param {Number} opts.closedAtYearStartswith 
     * @param {Number} opts.closedAtYearIstartswith 
     * @param {Number} opts.closedAtYearEndswith 
     * @param {Number} opts.closedAtYearIendswith 
     * @param {Number} opts.closedAtYearRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtYearIsnull 
     * @param {Number} opts.closedAtYearRegex 
     * @param {Number} opts.closedAtYearIregex 
     * @param {Number} opts.closedAtYearContainedBy 
     * @param {Number} opts.closedAtMonth 
     * @param {Number} opts.closedAtMonthIexact 
     * @param {Number} opts.closedAtMonthGt 
     * @param {Number} opts.closedAtMonthGte 
     * @param {Number} opts.closedAtMonthLt 
     * @param {Number} opts.closedAtMonthLte 
     * @param {Number} opts.closedAtMonthIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtMonthContains 
     * @param {Number} opts.closedAtMonthIcontains 
     * @param {Number} opts.closedAtMonthStartswith 
     * @param {Number} opts.closedAtMonthIstartswith 
     * @param {Number} opts.closedAtMonthEndswith 
     * @param {Number} opts.closedAtMonthIendswith 
     * @param {Number} opts.closedAtMonthRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtMonthIsnull 
     * @param {Number} opts.closedAtMonthRegex 
     * @param {Number} opts.closedAtMonthIregex 
     * @param {Number} opts.closedAtMonthContainedBy 
     * @param {Number} opts.closedAtDay 
     * @param {Number} opts.closedAtDayIexact 
     * @param {Number} opts.closedAtDayGt 
     * @param {Number} opts.closedAtDayGte 
     * @param {Number} opts.closedAtDayLt 
     * @param {Number} opts.closedAtDayLte 
     * @param {Number} opts.closedAtDayIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDayContains 
     * @param {Number} opts.closedAtDayIcontains 
     * @param {Number} opts.closedAtDayStartswith 
     * @param {Number} opts.closedAtDayIstartswith 
     * @param {Number} opts.closedAtDayEndswith 
     * @param {Number} opts.closedAtDayIendswith 
     * @param {Number} opts.closedAtDayRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDayIsnull 
     * @param {Number} opts.closedAtDayRegex 
     * @param {Number} opts.closedAtDayIregex 
     * @param {Number} opts.closedAtDayContainedBy 
     * @param {Number} opts.closedAtWeekDay 
     * @param {Number} opts.closedAtWeekDayIexact 
     * @param {Number} opts.closedAtWeekDayGt 
     * @param {Number} opts.closedAtWeekDayGte 
     * @param {Number} opts.closedAtWeekDayLt 
     * @param {Number} opts.closedAtWeekDayLte 
     * @param {Number} opts.closedAtWeekDayIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtWeekDayContains 
     * @param {Number} opts.closedAtWeekDayIcontains 
     * @param {Number} opts.closedAtWeekDayStartswith 
     * @param {Number} opts.closedAtWeekDayIstartswith 
     * @param {Number} opts.closedAtWeekDayEndswith 
     * @param {Number} opts.closedAtWeekDayIendswith 
     * @param {Number} opts.closedAtWeekDayRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtWeekDayIsnull 
     * @param {Number} opts.closedAtWeekDayRegex 
     * @param {Number} opts.closedAtWeekDayIregex 
     * @param {Number} opts.closedAtWeekDayContainedBy 
     * @param {Number} opts.closedAtWeek 
     * @param {Number} opts.closedAtWeekIexact 
     * @param {Number} opts.closedAtWeekGt 
     * @param {Number} opts.closedAtWeekGte 
     * @param {Number} opts.closedAtWeekLt 
     * @param {Number} opts.closedAtWeekLte 
     * @param {Number} opts.closedAtWeekIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtWeekContains 
     * @param {Number} opts.closedAtWeekIcontains 
     * @param {Number} opts.closedAtWeekStartswith 
     * @param {Number} opts.closedAtWeekIstartswith 
     * @param {Number} opts.closedAtWeekEndswith 
     * @param {Number} opts.closedAtWeekIendswith 
     * @param {Number} opts.closedAtWeekRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtWeekIsnull 
     * @param {Number} opts.closedAtWeekRegex 
     * @param {Number} opts.closedAtWeekIregex 
     * @param {Number} opts.closedAtWeekContainedBy 
     * @param {Number} opts.closedAtIsoYear 
     * @param {Number} opts.closedAtIsoYearIexact 
     * @param {Number} opts.closedAtIsoYearGt 
     * @param {Number} opts.closedAtIsoYearGte 
     * @param {Number} opts.closedAtIsoYearLt 
     * @param {Number} opts.closedAtIsoYearLte 
     * @param {Number} opts.closedAtIsoYearIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtIsoYearContains 
     * @param {Number} opts.closedAtIsoYearIcontains 
     * @param {Number} opts.closedAtIsoYearStartswith 
     * @param {Number} opts.closedAtIsoYearIstartswith 
     * @param {Number} opts.closedAtIsoYearEndswith 
     * @param {Number} opts.closedAtIsoYearIendswith 
     * @param {Number} opts.closedAtIsoYearRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtIsoYearIsnull 
     * @param {Number} opts.closedAtIsoYearRegex 
     * @param {Number} opts.closedAtIsoYearIregex 
     * @param {Number} opts.closedAtIsoYearContainedBy 
     * @param {Number} opts.closedAtQuarter 
     * @param {Number} opts.closedAtQuarterIexact 
     * @param {Number} opts.closedAtQuarterGt 
     * @param {Number} opts.closedAtQuarterGte 
     * @param {Number} opts.closedAtQuarterLt 
     * @param {Number} opts.closedAtQuarterLte 
     * @param {Number} opts.closedAtQuarterIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtQuarterContains 
     * @param {Number} opts.closedAtQuarterIcontains 
     * @param {Number} opts.closedAtQuarterStartswith 
     * @param {Number} opts.closedAtQuarterIstartswith 
     * @param {Number} opts.closedAtQuarterEndswith 
     * @param {Number} opts.closedAtQuarterIendswith 
     * @param {Number} opts.closedAtQuarterRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtQuarterIsnull 
     * @param {Number} opts.closedAtQuarterRegex 
     * @param {Number} opts.closedAtQuarterIregex 
     * @param {Number} opts.closedAtQuarterContainedBy 
     * @param {String} opts.closedAtContainedBy 
     * @param {Number} opts.closedAtHour 
     * @param {Number} opts.closedAtHourIexact 
     * @param {Number} opts.closedAtHourGt 
     * @param {Number} opts.closedAtHourGte 
     * @param {Number} opts.closedAtHourLt 
     * @param {Number} opts.closedAtHourLte 
     * @param {Number} opts.closedAtHourIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtHourContains 
     * @param {Number} opts.closedAtHourIcontains 
     * @param {Number} opts.closedAtHourStartswith 
     * @param {Number} opts.closedAtHourIstartswith 
     * @param {Number} opts.closedAtHourEndswith 
     * @param {Number} opts.closedAtHourIendswith 
     * @param {Number} opts.closedAtHourRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtHourIsnull 
     * @param {Number} opts.closedAtHourRegex 
     * @param {Number} opts.closedAtHourIregex 
     * @param {Number} opts.closedAtHourContainedBy 
     * @param {Number} opts.closedAtMinute 
     * @param {Number} opts.closedAtMinuteIexact 
     * @param {Number} opts.closedAtMinuteGt 
     * @param {Number} opts.closedAtMinuteGte 
     * @param {Number} opts.closedAtMinuteLt 
     * @param {Number} opts.closedAtMinuteLte 
     * @param {Number} opts.closedAtMinuteIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtMinuteContains 
     * @param {Number} opts.closedAtMinuteIcontains 
     * @param {Number} opts.closedAtMinuteStartswith 
     * @param {Number} opts.closedAtMinuteIstartswith 
     * @param {Number} opts.closedAtMinuteEndswith 
     * @param {Number} opts.closedAtMinuteIendswith 
     * @param {Number} opts.closedAtMinuteRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtMinuteIsnull 
     * @param {Number} opts.closedAtMinuteRegex 
     * @param {Number} opts.closedAtMinuteIregex 
     * @param {Number} opts.closedAtMinuteContainedBy 
     * @param {Number} opts.closedAtSecond 
     * @param {Number} opts.closedAtSecondIexact 
     * @param {Number} opts.closedAtSecondGt 
     * @param {Number} opts.closedAtSecondGte 
     * @param {Number} opts.closedAtSecondLt 
     * @param {Number} opts.closedAtSecondLte 
     * @param {Number} opts.closedAtSecondIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtSecondContains 
     * @param {Number} opts.closedAtSecondIcontains 
     * @param {Number} opts.closedAtSecondStartswith 
     * @param {Number} opts.closedAtSecondIstartswith 
     * @param {Number} opts.closedAtSecondEndswith 
     * @param {Number} opts.closedAtSecondIendswith 
     * @param {Number} opts.closedAtSecondRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtSecondIsnull 
     * @param {Number} opts.closedAtSecondRegex 
     * @param {Number} opts.closedAtSecondIregex 
     * @param {Number} opts.closedAtSecondContainedBy 
     * @param {String} opts.closedAtDate 
     * @param {String} opts.closedAtDateIexact 
     * @param {String} opts.closedAtDateGt 
     * @param {String} opts.closedAtDateGte 
     * @param {String} opts.closedAtDateLt 
     * @param {String} opts.closedAtDateLte 
     * @param {String} opts.closedAtDateIn Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateContains 
     * @param {String} opts.closedAtDateIcontains 
     * @param {String} opts.closedAtDateStartswith 
     * @param {String} opts.closedAtDateIstartswith 
     * @param {String} opts.closedAtDateEndswith 
     * @param {String} opts.closedAtDateIendswith 
     * @param {String} opts.closedAtDateRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateIsnull 
     * @param {String} opts.closedAtDateRegex 
     * @param {String} opts.closedAtDateIregex 
     * @param {Number} opts.closedAtDateYear 
     * @param {Number} opts.closedAtDateYearIexact 
     * @param {Number} opts.closedAtDateYearGt 
     * @param {Number} opts.closedAtDateYearGte 
     * @param {Number} opts.closedAtDateYearLt 
     * @param {Number} opts.closedAtDateYearLte 
     * @param {Number} opts.closedAtDateYearIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDateYearContains 
     * @param {Number} opts.closedAtDateYearIcontains 
     * @param {Number} opts.closedAtDateYearStartswith 
     * @param {Number} opts.closedAtDateYearIstartswith 
     * @param {Number} opts.closedAtDateYearEndswith 
     * @param {Number} opts.closedAtDateYearIendswith 
     * @param {Number} opts.closedAtDateYearRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateYearIsnull 
     * @param {Number} opts.closedAtDateYearRegex 
     * @param {Number} opts.closedAtDateYearIregex 
     * @param {Number} opts.closedAtDateYearContainedBy 
     * @param {Number} opts.closedAtDateMonth 
     * @param {Number} opts.closedAtDateMonthIexact 
     * @param {Number} opts.closedAtDateMonthGt 
     * @param {Number} opts.closedAtDateMonthGte 
     * @param {Number} opts.closedAtDateMonthLt 
     * @param {Number} opts.closedAtDateMonthLte 
     * @param {Number} opts.closedAtDateMonthIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDateMonthContains 
     * @param {Number} opts.closedAtDateMonthIcontains 
     * @param {Number} opts.closedAtDateMonthStartswith 
     * @param {Number} opts.closedAtDateMonthIstartswith 
     * @param {Number} opts.closedAtDateMonthEndswith 
     * @param {Number} opts.closedAtDateMonthIendswith 
     * @param {Number} opts.closedAtDateMonthRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateMonthIsnull 
     * @param {Number} opts.closedAtDateMonthRegex 
     * @param {Number} opts.closedAtDateMonthIregex 
     * @param {Number} opts.closedAtDateMonthContainedBy 
     * @param {Number} opts.closedAtDateDay 
     * @param {Number} opts.closedAtDateDayIexact 
     * @param {Number} opts.closedAtDateDayGt 
     * @param {Number} opts.closedAtDateDayGte 
     * @param {Number} opts.closedAtDateDayLt 
     * @param {Number} opts.closedAtDateDayLte 
     * @param {Number} opts.closedAtDateDayIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDateDayContains 
     * @param {Number} opts.closedAtDateDayIcontains 
     * @param {Number} opts.closedAtDateDayStartswith 
     * @param {Number} opts.closedAtDateDayIstartswith 
     * @param {Number} opts.closedAtDateDayEndswith 
     * @param {Number} opts.closedAtDateDayIendswith 
     * @param {Number} opts.closedAtDateDayRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateDayIsnull 
     * @param {Number} opts.closedAtDateDayRegex 
     * @param {Number} opts.closedAtDateDayIregex 
     * @param {Number} opts.closedAtDateDayContainedBy 
     * @param {Number} opts.closedAtDateWeekDay 
     * @param {Number} opts.closedAtDateWeekDayIexact 
     * @param {Number} opts.closedAtDateWeekDayGt 
     * @param {Number} opts.closedAtDateWeekDayGte 
     * @param {Number} opts.closedAtDateWeekDayLt 
     * @param {Number} opts.closedAtDateWeekDayLte 
     * @param {Number} opts.closedAtDateWeekDayIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDateWeekDayContains 
     * @param {Number} opts.closedAtDateWeekDayIcontains 
     * @param {Number} opts.closedAtDateWeekDayStartswith 
     * @param {Number} opts.closedAtDateWeekDayIstartswith 
     * @param {Number} opts.closedAtDateWeekDayEndswith 
     * @param {Number} opts.closedAtDateWeekDayIendswith 
     * @param {Number} opts.closedAtDateWeekDayRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateWeekDayIsnull 
     * @param {Number} opts.closedAtDateWeekDayRegex 
     * @param {Number} opts.closedAtDateWeekDayIregex 
     * @param {Number} opts.closedAtDateWeekDayContainedBy 
     * @param {Number} opts.closedAtDateWeek 
     * @param {Number} opts.closedAtDateWeekIexact 
     * @param {Number} opts.closedAtDateWeekGt 
     * @param {Number} opts.closedAtDateWeekGte 
     * @param {Number} opts.closedAtDateWeekLt 
     * @param {Number} opts.closedAtDateWeekLte 
     * @param {Number} opts.closedAtDateWeekIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDateWeekContains 
     * @param {Number} opts.closedAtDateWeekIcontains 
     * @param {Number} opts.closedAtDateWeekStartswith 
     * @param {Number} opts.closedAtDateWeekIstartswith 
     * @param {Number} opts.closedAtDateWeekEndswith 
     * @param {Number} opts.closedAtDateWeekIendswith 
     * @param {Number} opts.closedAtDateWeekRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateWeekIsnull 
     * @param {Number} opts.closedAtDateWeekRegex 
     * @param {Number} opts.closedAtDateWeekIregex 
     * @param {Number} opts.closedAtDateWeekContainedBy 
     * @param {Number} opts.closedAtDateIsoYear 
     * @param {Number} opts.closedAtDateIsoYearIexact 
     * @param {Number} opts.closedAtDateIsoYearGt 
     * @param {Number} opts.closedAtDateIsoYearGte 
     * @param {Number} opts.closedAtDateIsoYearLt 
     * @param {Number} opts.closedAtDateIsoYearLte 
     * @param {Number} opts.closedAtDateIsoYearIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDateIsoYearContains 
     * @param {Number} opts.closedAtDateIsoYearIcontains 
     * @param {Number} opts.closedAtDateIsoYearStartswith 
     * @param {Number} opts.closedAtDateIsoYearIstartswith 
     * @param {Number} opts.closedAtDateIsoYearEndswith 
     * @param {Number} opts.closedAtDateIsoYearIendswith 
     * @param {Number} opts.closedAtDateIsoYearRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateIsoYearIsnull 
     * @param {Number} opts.closedAtDateIsoYearRegex 
     * @param {Number} opts.closedAtDateIsoYearIregex 
     * @param {Number} opts.closedAtDateIsoYearContainedBy 
     * @param {Number} opts.closedAtDateQuarter 
     * @param {Number} opts.closedAtDateQuarterIexact 
     * @param {Number} opts.closedAtDateQuarterGt 
     * @param {Number} opts.closedAtDateQuarterGte 
     * @param {Number} opts.closedAtDateQuarterLt 
     * @param {Number} opts.closedAtDateQuarterLte 
     * @param {Number} opts.closedAtDateQuarterIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtDateQuarterContains 
     * @param {Number} opts.closedAtDateQuarterIcontains 
     * @param {Number} opts.closedAtDateQuarterStartswith 
     * @param {Number} opts.closedAtDateQuarterIstartswith 
     * @param {Number} opts.closedAtDateQuarterEndswith 
     * @param {Number} opts.closedAtDateQuarterIendswith 
     * @param {Number} opts.closedAtDateQuarterRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtDateQuarterIsnull 
     * @param {Number} opts.closedAtDateQuarterRegex 
     * @param {Number} opts.closedAtDateQuarterIregex 
     * @param {Number} opts.closedAtDateQuarterContainedBy 
     * @param {String} opts.closedAtDateContainedBy 
     * @param {String} opts.closedAtTime 
     * @param {String} opts.closedAtTimeIexact 
     * @param {String} opts.closedAtTimeGt 
     * @param {String} opts.closedAtTimeGte 
     * @param {String} opts.closedAtTimeLt 
     * @param {String} opts.closedAtTimeLte 
     * @param {String} opts.closedAtTimeIn Multiple values may be separated by commas.
     * @param {String} opts.closedAtTimeContains 
     * @param {String} opts.closedAtTimeIcontains 
     * @param {String} opts.closedAtTimeStartswith 
     * @param {String} opts.closedAtTimeIstartswith 
     * @param {String} opts.closedAtTimeEndswith 
     * @param {String} opts.closedAtTimeIendswith 
     * @param {String} opts.closedAtTimeRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtTimeIsnull 
     * @param {String} opts.closedAtTimeRegex 
     * @param {String} opts.closedAtTimeIregex 
     * @param {Number} opts.closedAtTimeHour 
     * @param {Number} opts.closedAtTimeHourIexact 
     * @param {Number} opts.closedAtTimeHourGt 
     * @param {Number} opts.closedAtTimeHourGte 
     * @param {Number} opts.closedAtTimeHourLt 
     * @param {Number} opts.closedAtTimeHourLte 
     * @param {Number} opts.closedAtTimeHourIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtTimeHourContains 
     * @param {Number} opts.closedAtTimeHourIcontains 
     * @param {Number} opts.closedAtTimeHourStartswith 
     * @param {Number} opts.closedAtTimeHourIstartswith 
     * @param {Number} opts.closedAtTimeHourEndswith 
     * @param {Number} opts.closedAtTimeHourIendswith 
     * @param {Number} opts.closedAtTimeHourRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtTimeHourIsnull 
     * @param {Number} opts.closedAtTimeHourRegex 
     * @param {Number} opts.closedAtTimeHourIregex 
     * @param {Number} opts.closedAtTimeHourContainedBy 
     * @param {Number} opts.closedAtTimeMinute 
     * @param {Number} opts.closedAtTimeMinuteIexact 
     * @param {Number} opts.closedAtTimeMinuteGt 
     * @param {Number} opts.closedAtTimeMinuteGte 
     * @param {Number} opts.closedAtTimeMinuteLt 
     * @param {Number} opts.closedAtTimeMinuteLte 
     * @param {Number} opts.closedAtTimeMinuteIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtTimeMinuteContains 
     * @param {Number} opts.closedAtTimeMinuteIcontains 
     * @param {Number} opts.closedAtTimeMinuteStartswith 
     * @param {Number} opts.closedAtTimeMinuteIstartswith 
     * @param {Number} opts.closedAtTimeMinuteEndswith 
     * @param {Number} opts.closedAtTimeMinuteIendswith 
     * @param {Number} opts.closedAtTimeMinuteRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtTimeMinuteIsnull 
     * @param {Number} opts.closedAtTimeMinuteRegex 
     * @param {Number} opts.closedAtTimeMinuteIregex 
     * @param {Number} opts.closedAtTimeMinuteContainedBy 
     * @param {Number} opts.closedAtTimeSecond 
     * @param {Number} opts.closedAtTimeSecondIexact 
     * @param {Number} opts.closedAtTimeSecondGt 
     * @param {Number} opts.closedAtTimeSecondGte 
     * @param {Number} opts.closedAtTimeSecondLt 
     * @param {Number} opts.closedAtTimeSecondLte 
     * @param {Number} opts.closedAtTimeSecondIn Multiple values may be separated by commas.
     * @param {Number} opts.closedAtTimeSecondContains 
     * @param {Number} opts.closedAtTimeSecondIcontains 
     * @param {Number} opts.closedAtTimeSecondStartswith 
     * @param {Number} opts.closedAtTimeSecondIstartswith 
     * @param {Number} opts.closedAtTimeSecondEndswith 
     * @param {Number} opts.closedAtTimeSecondIendswith 
     * @param {Number} opts.closedAtTimeSecondRange Multiple values may be separated by commas.
     * @param {String} opts.closedAtTimeSecondIsnull 
     * @param {Number} opts.closedAtTimeSecondRegex 
     * @param {Number} opts.closedAtTimeSecondIregex 
     * @param {Number} opts.closedAtTimeSecondContainedBy 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/MetricsApi~metricsTeamsSuppressionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSuppressionReasons>}
     */
    this.metricsTeamsSuppressionsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling metricsTeamsSuppressionsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'closed_at': opts['closedAt'],
        'closed_at__iexact': opts['closedAtIexact'],
        'closed_at__gt': opts['closedAtGt'],
        'closed_at__gte': opts['closedAtGte'],
        'closed_at__lt': opts['closedAtLt'],
        'closed_at__lte': opts['closedAtLte'],
        'closed_at__in': opts['closedAtIn'],
        'closed_at__contains': opts['closedAtContains'],
        'closed_at__icontains': opts['closedAtIcontains'],
        'closed_at__startswith': opts['closedAtStartswith'],
        'closed_at__istartswith': opts['closedAtIstartswith'],
        'closed_at__endswith': opts['closedAtEndswith'],
        'closed_at__iendswith': opts['closedAtIendswith'],
        'closed_at__range': opts['closedAtRange'],
        'closed_at__isnull': opts['closedAtIsnull'],
        'closed_at__regex': opts['closedAtRegex'],
        'closed_at__iregex': opts['closedAtIregex'],
        'closed_at__year': opts['closedAtYear'],
        'closed_at__year__iexact': opts['closedAtYearIexact'],
        'closed_at__year__gt': opts['closedAtYearGt'],
        'closed_at__year__gte': opts['closedAtYearGte'],
        'closed_at__year__lt': opts['closedAtYearLt'],
        'closed_at__year__lte': opts['closedAtYearLte'],
        'closed_at__year__in': opts['closedAtYearIn'],
        'closed_at__year__contains': opts['closedAtYearContains'],
        'closed_at__year__icontains': opts['closedAtYearIcontains'],
        'closed_at__year__startswith': opts['closedAtYearStartswith'],
        'closed_at__year__istartswith': opts['closedAtYearIstartswith'],
        'closed_at__year__endswith': opts['closedAtYearEndswith'],
        'closed_at__year__iendswith': opts['closedAtYearIendswith'],
        'closed_at__year__range': opts['closedAtYearRange'],
        'closed_at__year__isnull': opts['closedAtYearIsnull'],
        'closed_at__year__regex': opts['closedAtYearRegex'],
        'closed_at__year__iregex': opts['closedAtYearIregex'],
        'closed_at__year__contained_by': opts['closedAtYearContainedBy'],
        'closed_at__month': opts['closedAtMonth'],
        'closed_at__month__iexact': opts['closedAtMonthIexact'],
        'closed_at__month__gt': opts['closedAtMonthGt'],
        'closed_at__month__gte': opts['closedAtMonthGte'],
        'closed_at__month__lt': opts['closedAtMonthLt'],
        'closed_at__month__lte': opts['closedAtMonthLte'],
        'closed_at__month__in': opts['closedAtMonthIn'],
        'closed_at__month__contains': opts['closedAtMonthContains'],
        'closed_at__month__icontains': opts['closedAtMonthIcontains'],
        'closed_at__month__startswith': opts['closedAtMonthStartswith'],
        'closed_at__month__istartswith': opts['closedAtMonthIstartswith'],
        'closed_at__month__endswith': opts['closedAtMonthEndswith'],
        'closed_at__month__iendswith': opts['closedAtMonthIendswith'],
        'closed_at__month__range': opts['closedAtMonthRange'],
        'closed_at__month__isnull': opts['closedAtMonthIsnull'],
        'closed_at__month__regex': opts['closedAtMonthRegex'],
        'closed_at__month__iregex': opts['closedAtMonthIregex'],
        'closed_at__month__contained_by': opts['closedAtMonthContainedBy'],
        'closed_at__day': opts['closedAtDay'],
        'closed_at__day__iexact': opts['closedAtDayIexact'],
        'closed_at__day__gt': opts['closedAtDayGt'],
        'closed_at__day__gte': opts['closedAtDayGte'],
        'closed_at__day__lt': opts['closedAtDayLt'],
        'closed_at__day__lte': opts['closedAtDayLte'],
        'closed_at__day__in': opts['closedAtDayIn'],
        'closed_at__day__contains': opts['closedAtDayContains'],
        'closed_at__day__icontains': opts['closedAtDayIcontains'],
        'closed_at__day__startswith': opts['closedAtDayStartswith'],
        'closed_at__day__istartswith': opts['closedAtDayIstartswith'],
        'closed_at__day__endswith': opts['closedAtDayEndswith'],
        'closed_at__day__iendswith': opts['closedAtDayIendswith'],
        'closed_at__day__range': opts['closedAtDayRange'],
        'closed_at__day__isnull': opts['closedAtDayIsnull'],
        'closed_at__day__regex': opts['closedAtDayRegex'],
        'closed_at__day__iregex': opts['closedAtDayIregex'],
        'closed_at__day__contained_by': opts['closedAtDayContainedBy'],
        'closed_at__week_day': opts['closedAtWeekDay'],
        'closed_at__week_day__iexact': opts['closedAtWeekDayIexact'],
        'closed_at__week_day__gt': opts['closedAtWeekDayGt'],
        'closed_at__week_day__gte': opts['closedAtWeekDayGte'],
        'closed_at__week_day__lt': opts['closedAtWeekDayLt'],
        'closed_at__week_day__lte': opts['closedAtWeekDayLte'],
        'closed_at__week_day__in': opts['closedAtWeekDayIn'],
        'closed_at__week_day__contains': opts['closedAtWeekDayContains'],
        'closed_at__week_day__icontains': opts['closedAtWeekDayIcontains'],
        'closed_at__week_day__startswith': opts['closedAtWeekDayStartswith'],
        'closed_at__week_day__istartswith': opts['closedAtWeekDayIstartswith'],
        'closed_at__week_day__endswith': opts['closedAtWeekDayEndswith'],
        'closed_at__week_day__iendswith': opts['closedAtWeekDayIendswith'],
        'closed_at__week_day__range': opts['closedAtWeekDayRange'],
        'closed_at__week_day__isnull': opts['closedAtWeekDayIsnull'],
        'closed_at__week_day__regex': opts['closedAtWeekDayRegex'],
        'closed_at__week_day__iregex': opts['closedAtWeekDayIregex'],
        'closed_at__week_day__contained_by': opts['closedAtWeekDayContainedBy'],
        'closed_at__week': opts['closedAtWeek'],
        'closed_at__week__iexact': opts['closedAtWeekIexact'],
        'closed_at__week__gt': opts['closedAtWeekGt'],
        'closed_at__week__gte': opts['closedAtWeekGte'],
        'closed_at__week__lt': opts['closedAtWeekLt'],
        'closed_at__week__lte': opts['closedAtWeekLte'],
        'closed_at__week__in': opts['closedAtWeekIn'],
        'closed_at__week__contains': opts['closedAtWeekContains'],
        'closed_at__week__icontains': opts['closedAtWeekIcontains'],
        'closed_at__week__startswith': opts['closedAtWeekStartswith'],
        'closed_at__week__istartswith': opts['closedAtWeekIstartswith'],
        'closed_at__week__endswith': opts['closedAtWeekEndswith'],
        'closed_at__week__iendswith': opts['closedAtWeekIendswith'],
        'closed_at__week__range': opts['closedAtWeekRange'],
        'closed_at__week__isnull': opts['closedAtWeekIsnull'],
        'closed_at__week__regex': opts['closedAtWeekRegex'],
        'closed_at__week__iregex': opts['closedAtWeekIregex'],
        'closed_at__week__contained_by': opts['closedAtWeekContainedBy'],
        'closed_at__iso_year': opts['closedAtIsoYear'],
        'closed_at__iso_year__iexact': opts['closedAtIsoYearIexact'],
        'closed_at__iso_year__gt': opts['closedAtIsoYearGt'],
        'closed_at__iso_year__gte': opts['closedAtIsoYearGte'],
        'closed_at__iso_year__lt': opts['closedAtIsoYearLt'],
        'closed_at__iso_year__lte': opts['closedAtIsoYearLte'],
        'closed_at__iso_year__in': opts['closedAtIsoYearIn'],
        'closed_at__iso_year__contains': opts['closedAtIsoYearContains'],
        'closed_at__iso_year__icontains': opts['closedAtIsoYearIcontains'],
        'closed_at__iso_year__startswith': opts['closedAtIsoYearStartswith'],
        'closed_at__iso_year__istartswith': opts['closedAtIsoYearIstartswith'],
        'closed_at__iso_year__endswith': opts['closedAtIsoYearEndswith'],
        'closed_at__iso_year__iendswith': opts['closedAtIsoYearIendswith'],
        'closed_at__iso_year__range': opts['closedAtIsoYearRange'],
        'closed_at__iso_year__isnull': opts['closedAtIsoYearIsnull'],
        'closed_at__iso_year__regex': opts['closedAtIsoYearRegex'],
        'closed_at__iso_year__iregex': opts['closedAtIsoYearIregex'],
        'closed_at__iso_year__contained_by': opts['closedAtIsoYearContainedBy'],
        'closed_at__quarter': opts['closedAtQuarter'],
        'closed_at__quarter__iexact': opts['closedAtQuarterIexact'],
        'closed_at__quarter__gt': opts['closedAtQuarterGt'],
        'closed_at__quarter__gte': opts['closedAtQuarterGte'],
        'closed_at__quarter__lt': opts['closedAtQuarterLt'],
        'closed_at__quarter__lte': opts['closedAtQuarterLte'],
        'closed_at__quarter__in': opts['closedAtQuarterIn'],
        'closed_at__quarter__contains': opts['closedAtQuarterContains'],
        'closed_at__quarter__icontains': opts['closedAtQuarterIcontains'],
        'closed_at__quarter__startswith': opts['closedAtQuarterStartswith'],
        'closed_at__quarter__istartswith': opts['closedAtQuarterIstartswith'],
        'closed_at__quarter__endswith': opts['closedAtQuarterEndswith'],
        'closed_at__quarter__iendswith': opts['closedAtQuarterIendswith'],
        'closed_at__quarter__range': opts['closedAtQuarterRange'],
        'closed_at__quarter__isnull': opts['closedAtQuarterIsnull'],
        'closed_at__quarter__regex': opts['closedAtQuarterRegex'],
        'closed_at__quarter__iregex': opts['closedAtQuarterIregex'],
        'closed_at__quarter__contained_by': opts['closedAtQuarterContainedBy'],
        'closed_at__contained_by': opts['closedAtContainedBy'],
        'closed_at__hour': opts['closedAtHour'],
        'closed_at__hour__iexact': opts['closedAtHourIexact'],
        'closed_at__hour__gt': opts['closedAtHourGt'],
        'closed_at__hour__gte': opts['closedAtHourGte'],
        'closed_at__hour__lt': opts['closedAtHourLt'],
        'closed_at__hour__lte': opts['closedAtHourLte'],
        'closed_at__hour__in': opts['closedAtHourIn'],
        'closed_at__hour__contains': opts['closedAtHourContains'],
        'closed_at__hour__icontains': opts['closedAtHourIcontains'],
        'closed_at__hour__startswith': opts['closedAtHourStartswith'],
        'closed_at__hour__istartswith': opts['closedAtHourIstartswith'],
        'closed_at__hour__endswith': opts['closedAtHourEndswith'],
        'closed_at__hour__iendswith': opts['closedAtHourIendswith'],
        'closed_at__hour__range': opts['closedAtHourRange'],
        'closed_at__hour__isnull': opts['closedAtHourIsnull'],
        'closed_at__hour__regex': opts['closedAtHourRegex'],
        'closed_at__hour__iregex': opts['closedAtHourIregex'],
        'closed_at__hour__contained_by': opts['closedAtHourContainedBy'],
        'closed_at__minute': opts['closedAtMinute'],
        'closed_at__minute__iexact': opts['closedAtMinuteIexact'],
        'closed_at__minute__gt': opts['closedAtMinuteGt'],
        'closed_at__minute__gte': opts['closedAtMinuteGte'],
        'closed_at__minute__lt': opts['closedAtMinuteLt'],
        'closed_at__minute__lte': opts['closedAtMinuteLte'],
        'closed_at__minute__in': opts['closedAtMinuteIn'],
        'closed_at__minute__contains': opts['closedAtMinuteContains'],
        'closed_at__minute__icontains': opts['closedAtMinuteIcontains'],
        'closed_at__minute__startswith': opts['closedAtMinuteStartswith'],
        'closed_at__minute__istartswith': opts['closedAtMinuteIstartswith'],
        'closed_at__minute__endswith': opts['closedAtMinuteEndswith'],
        'closed_at__minute__iendswith': opts['closedAtMinuteIendswith'],
        'closed_at__minute__range': opts['closedAtMinuteRange'],
        'closed_at__minute__isnull': opts['closedAtMinuteIsnull'],
        'closed_at__minute__regex': opts['closedAtMinuteRegex'],
        'closed_at__minute__iregex': opts['closedAtMinuteIregex'],
        'closed_at__minute__contained_by': opts['closedAtMinuteContainedBy'],
        'closed_at__second': opts['closedAtSecond'],
        'closed_at__second__iexact': opts['closedAtSecondIexact'],
        'closed_at__second__gt': opts['closedAtSecondGt'],
        'closed_at__second__gte': opts['closedAtSecondGte'],
        'closed_at__second__lt': opts['closedAtSecondLt'],
        'closed_at__second__lte': opts['closedAtSecondLte'],
        'closed_at__second__in': opts['closedAtSecondIn'],
        'closed_at__second__contains': opts['closedAtSecondContains'],
        'closed_at__second__icontains': opts['closedAtSecondIcontains'],
        'closed_at__second__startswith': opts['closedAtSecondStartswith'],
        'closed_at__second__istartswith': opts['closedAtSecondIstartswith'],
        'closed_at__second__endswith': opts['closedAtSecondEndswith'],
        'closed_at__second__iendswith': opts['closedAtSecondIendswith'],
        'closed_at__second__range': opts['closedAtSecondRange'],
        'closed_at__second__isnull': opts['closedAtSecondIsnull'],
        'closed_at__second__regex': opts['closedAtSecondRegex'],
        'closed_at__second__iregex': opts['closedAtSecondIregex'],
        'closed_at__second__contained_by': opts['closedAtSecondContainedBy'],
        'closed_at__date': opts['closedAtDate'],
        'closed_at__date__iexact': opts['closedAtDateIexact'],
        'closed_at__date__gt': opts['closedAtDateGt'],
        'closed_at__date__gte': opts['closedAtDateGte'],
        'closed_at__date__lt': opts['closedAtDateLt'],
        'closed_at__date__lte': opts['closedAtDateLte'],
        'closed_at__date__in': opts['closedAtDateIn'],
        'closed_at__date__contains': opts['closedAtDateContains'],
        'closed_at__date__icontains': opts['closedAtDateIcontains'],
        'closed_at__date__startswith': opts['closedAtDateStartswith'],
        'closed_at__date__istartswith': opts['closedAtDateIstartswith'],
        'closed_at__date__endswith': opts['closedAtDateEndswith'],
        'closed_at__date__iendswith': opts['closedAtDateIendswith'],
        'closed_at__date__range': opts['closedAtDateRange'],
        'closed_at__date__isnull': opts['closedAtDateIsnull'],
        'closed_at__date__regex': opts['closedAtDateRegex'],
        'closed_at__date__iregex': opts['closedAtDateIregex'],
        'closed_at__date__year': opts['closedAtDateYear'],
        'closed_at__date__year__iexact': opts['closedAtDateYearIexact'],
        'closed_at__date__year__gt': opts['closedAtDateYearGt'],
        'closed_at__date__year__gte': opts['closedAtDateYearGte'],
        'closed_at__date__year__lt': opts['closedAtDateYearLt'],
        'closed_at__date__year__lte': opts['closedAtDateYearLte'],
        'closed_at__date__year__in': opts['closedAtDateYearIn'],
        'closed_at__date__year__contains': opts['closedAtDateYearContains'],
        'closed_at__date__year__icontains': opts['closedAtDateYearIcontains'],
        'closed_at__date__year__startswith': opts['closedAtDateYearStartswith'],
        'closed_at__date__year__istartswith': opts['closedAtDateYearIstartswith'],
        'closed_at__date__year__endswith': opts['closedAtDateYearEndswith'],
        'closed_at__date__year__iendswith': opts['closedAtDateYearIendswith'],
        'closed_at__date__year__range': opts['closedAtDateYearRange'],
        'closed_at__date__year__isnull': opts['closedAtDateYearIsnull'],
        'closed_at__date__year__regex': opts['closedAtDateYearRegex'],
        'closed_at__date__year__iregex': opts['closedAtDateYearIregex'],
        'closed_at__date__year__contained_by': opts['closedAtDateYearContainedBy'],
        'closed_at__date__month': opts['closedAtDateMonth'],
        'closed_at__date__month__iexact': opts['closedAtDateMonthIexact'],
        'closed_at__date__month__gt': opts['closedAtDateMonthGt'],
        'closed_at__date__month__gte': opts['closedAtDateMonthGte'],
        'closed_at__date__month__lt': opts['closedAtDateMonthLt'],
        'closed_at__date__month__lte': opts['closedAtDateMonthLte'],
        'closed_at__date__month__in': opts['closedAtDateMonthIn'],
        'closed_at__date__month__contains': opts['closedAtDateMonthContains'],
        'closed_at__date__month__icontains': opts['closedAtDateMonthIcontains'],
        'closed_at__date__month__startswith': opts['closedAtDateMonthStartswith'],
        'closed_at__date__month__istartswith': opts['closedAtDateMonthIstartswith'],
        'closed_at__date__month__endswith': opts['closedAtDateMonthEndswith'],
        'closed_at__date__month__iendswith': opts['closedAtDateMonthIendswith'],
        'closed_at__date__month__range': opts['closedAtDateMonthRange'],
        'closed_at__date__month__isnull': opts['closedAtDateMonthIsnull'],
        'closed_at__date__month__regex': opts['closedAtDateMonthRegex'],
        'closed_at__date__month__iregex': opts['closedAtDateMonthIregex'],
        'closed_at__date__month__contained_by': opts['closedAtDateMonthContainedBy'],
        'closed_at__date__day': opts['closedAtDateDay'],
        'closed_at__date__day__iexact': opts['closedAtDateDayIexact'],
        'closed_at__date__day__gt': opts['closedAtDateDayGt'],
        'closed_at__date__day__gte': opts['closedAtDateDayGte'],
        'closed_at__date__day__lt': opts['closedAtDateDayLt'],
        'closed_at__date__day__lte': opts['closedAtDateDayLte'],
        'closed_at__date__day__in': opts['closedAtDateDayIn'],
        'closed_at__date__day__contains': opts['closedAtDateDayContains'],
        'closed_at__date__day__icontains': opts['closedAtDateDayIcontains'],
        'closed_at__date__day__startswith': opts['closedAtDateDayStartswith'],
        'closed_at__date__day__istartswith': opts['closedAtDateDayIstartswith'],
        'closed_at__date__day__endswith': opts['closedAtDateDayEndswith'],
        'closed_at__date__day__iendswith': opts['closedAtDateDayIendswith'],
        'closed_at__date__day__range': opts['closedAtDateDayRange'],
        'closed_at__date__day__isnull': opts['closedAtDateDayIsnull'],
        'closed_at__date__day__regex': opts['closedAtDateDayRegex'],
        'closed_at__date__day__iregex': opts['closedAtDateDayIregex'],
        'closed_at__date__day__contained_by': opts['closedAtDateDayContainedBy'],
        'closed_at__date__week_day': opts['closedAtDateWeekDay'],
        'closed_at__date__week_day__iexact': opts['closedAtDateWeekDayIexact'],
        'closed_at__date__week_day__gt': opts['closedAtDateWeekDayGt'],
        'closed_at__date__week_day__gte': opts['closedAtDateWeekDayGte'],
        'closed_at__date__week_day__lt': opts['closedAtDateWeekDayLt'],
        'closed_at__date__week_day__lte': opts['closedAtDateWeekDayLte'],
        'closed_at__date__week_day__in': opts['closedAtDateWeekDayIn'],
        'closed_at__date__week_day__contains': opts['closedAtDateWeekDayContains'],
        'closed_at__date__week_day__icontains': opts['closedAtDateWeekDayIcontains'],
        'closed_at__date__week_day__startswith': opts['closedAtDateWeekDayStartswith'],
        'closed_at__date__week_day__istartswith': opts['closedAtDateWeekDayIstartswith'],
        'closed_at__date__week_day__endswith': opts['closedAtDateWeekDayEndswith'],
        'closed_at__date__week_day__iendswith': opts['closedAtDateWeekDayIendswith'],
        'closed_at__date__week_day__range': opts['closedAtDateWeekDayRange'],
        'closed_at__date__week_day__isnull': opts['closedAtDateWeekDayIsnull'],
        'closed_at__date__week_day__regex': opts['closedAtDateWeekDayRegex'],
        'closed_at__date__week_day__iregex': opts['closedAtDateWeekDayIregex'],
        'closed_at__date__week_day__contained_by': opts['closedAtDateWeekDayContainedBy'],
        'closed_at__date__week': opts['closedAtDateWeek'],
        'closed_at__date__week__iexact': opts['closedAtDateWeekIexact'],
        'closed_at__date__week__gt': opts['closedAtDateWeekGt'],
        'closed_at__date__week__gte': opts['closedAtDateWeekGte'],
        'closed_at__date__week__lt': opts['closedAtDateWeekLt'],
        'closed_at__date__week__lte': opts['closedAtDateWeekLte'],
        'closed_at__date__week__in': opts['closedAtDateWeekIn'],
        'closed_at__date__week__contains': opts['closedAtDateWeekContains'],
        'closed_at__date__week__icontains': opts['closedAtDateWeekIcontains'],
        'closed_at__date__week__startswith': opts['closedAtDateWeekStartswith'],
        'closed_at__date__week__istartswith': opts['closedAtDateWeekIstartswith'],
        'closed_at__date__week__endswith': opts['closedAtDateWeekEndswith'],
        'closed_at__date__week__iendswith': opts['closedAtDateWeekIendswith'],
        'closed_at__date__week__range': opts['closedAtDateWeekRange'],
        'closed_at__date__week__isnull': opts['closedAtDateWeekIsnull'],
        'closed_at__date__week__regex': opts['closedAtDateWeekRegex'],
        'closed_at__date__week__iregex': opts['closedAtDateWeekIregex'],
        'closed_at__date__week__contained_by': opts['closedAtDateWeekContainedBy'],
        'closed_at__date__iso_year': opts['closedAtDateIsoYear'],
        'closed_at__date__iso_year__iexact': opts['closedAtDateIsoYearIexact'],
        'closed_at__date__iso_year__gt': opts['closedAtDateIsoYearGt'],
        'closed_at__date__iso_year__gte': opts['closedAtDateIsoYearGte'],
        'closed_at__date__iso_year__lt': opts['closedAtDateIsoYearLt'],
        'closed_at__date__iso_year__lte': opts['closedAtDateIsoYearLte'],
        'closed_at__date__iso_year__in': opts['closedAtDateIsoYearIn'],
        'closed_at__date__iso_year__contains': opts['closedAtDateIsoYearContains'],
        'closed_at__date__iso_year__icontains': opts['closedAtDateIsoYearIcontains'],
        'closed_at__date__iso_year__startswith': opts['closedAtDateIsoYearStartswith'],
        'closed_at__date__iso_year__istartswith': opts['closedAtDateIsoYearIstartswith'],
        'closed_at__date__iso_year__endswith': opts['closedAtDateIsoYearEndswith'],
        'closed_at__date__iso_year__iendswith': opts['closedAtDateIsoYearIendswith'],
        'closed_at__date__iso_year__range': opts['closedAtDateIsoYearRange'],
        'closed_at__date__iso_year__isnull': opts['closedAtDateIsoYearIsnull'],
        'closed_at__date__iso_year__regex': opts['closedAtDateIsoYearRegex'],
        'closed_at__date__iso_year__iregex': opts['closedAtDateIsoYearIregex'],
        'closed_at__date__iso_year__contained_by': opts['closedAtDateIsoYearContainedBy'],
        'closed_at__date__quarter': opts['closedAtDateQuarter'],
        'closed_at__date__quarter__iexact': opts['closedAtDateQuarterIexact'],
        'closed_at__date__quarter__gt': opts['closedAtDateQuarterGt'],
        'closed_at__date__quarter__gte': opts['closedAtDateQuarterGte'],
        'closed_at__date__quarter__lt': opts['closedAtDateQuarterLt'],
        'closed_at__date__quarter__lte': opts['closedAtDateQuarterLte'],
        'closed_at__date__quarter__in': opts['closedAtDateQuarterIn'],
        'closed_at__date__quarter__contains': opts['closedAtDateQuarterContains'],
        'closed_at__date__quarter__icontains': opts['closedAtDateQuarterIcontains'],
        'closed_at__date__quarter__startswith': opts['closedAtDateQuarterStartswith'],
        'closed_at__date__quarter__istartswith': opts['closedAtDateQuarterIstartswith'],
        'closed_at__date__quarter__endswith': opts['closedAtDateQuarterEndswith'],
        'closed_at__date__quarter__iendswith': opts['closedAtDateQuarterIendswith'],
        'closed_at__date__quarter__range': opts['closedAtDateQuarterRange'],
        'closed_at__date__quarter__isnull': opts['closedAtDateQuarterIsnull'],
        'closed_at__date__quarter__regex': opts['closedAtDateQuarterRegex'],
        'closed_at__date__quarter__iregex': opts['closedAtDateQuarterIregex'],
        'closed_at__date__quarter__contained_by': opts['closedAtDateQuarterContainedBy'],
        'closed_at__date__contained_by': opts['closedAtDateContainedBy'],
        'closed_at__time': opts['closedAtTime'],
        'closed_at__time__iexact': opts['closedAtTimeIexact'],
        'closed_at__time__gt': opts['closedAtTimeGt'],
        'closed_at__time__gte': opts['closedAtTimeGte'],
        'closed_at__time__lt': opts['closedAtTimeLt'],
        'closed_at__time__lte': opts['closedAtTimeLte'],
        'closed_at__time__in': opts['closedAtTimeIn'],
        'closed_at__time__contains': opts['closedAtTimeContains'],
        'closed_at__time__icontains': opts['closedAtTimeIcontains'],
        'closed_at__time__startswith': opts['closedAtTimeStartswith'],
        'closed_at__time__istartswith': opts['closedAtTimeIstartswith'],
        'closed_at__time__endswith': opts['closedAtTimeEndswith'],
        'closed_at__time__iendswith': opts['closedAtTimeIendswith'],
        'closed_at__time__range': opts['closedAtTimeRange'],
        'closed_at__time__isnull': opts['closedAtTimeIsnull'],
        'closed_at__time__regex': opts['closedAtTimeRegex'],
        'closed_at__time__iregex': opts['closedAtTimeIregex'],
        'closed_at__time__hour': opts['closedAtTimeHour'],
        'closed_at__time__hour__iexact': opts['closedAtTimeHourIexact'],
        'closed_at__time__hour__gt': opts['closedAtTimeHourGt'],
        'closed_at__time__hour__gte': opts['closedAtTimeHourGte'],
        'closed_at__time__hour__lt': opts['closedAtTimeHourLt'],
        'closed_at__time__hour__lte': opts['closedAtTimeHourLte'],
        'closed_at__time__hour__in': opts['closedAtTimeHourIn'],
        'closed_at__time__hour__contains': opts['closedAtTimeHourContains'],
        'closed_at__time__hour__icontains': opts['closedAtTimeHourIcontains'],
        'closed_at__time__hour__startswith': opts['closedAtTimeHourStartswith'],
        'closed_at__time__hour__istartswith': opts['closedAtTimeHourIstartswith'],
        'closed_at__time__hour__endswith': opts['closedAtTimeHourEndswith'],
        'closed_at__time__hour__iendswith': opts['closedAtTimeHourIendswith'],
        'closed_at__time__hour__range': opts['closedAtTimeHourRange'],
        'closed_at__time__hour__isnull': opts['closedAtTimeHourIsnull'],
        'closed_at__time__hour__regex': opts['closedAtTimeHourRegex'],
        'closed_at__time__hour__iregex': opts['closedAtTimeHourIregex'],
        'closed_at__time__hour__contained_by': opts['closedAtTimeHourContainedBy'],
        'closed_at__time__minute': opts['closedAtTimeMinute'],
        'closed_at__time__minute__iexact': opts['closedAtTimeMinuteIexact'],
        'closed_at__time__minute__gt': opts['closedAtTimeMinuteGt'],
        'closed_at__time__minute__gte': opts['closedAtTimeMinuteGte'],
        'closed_at__time__minute__lt': opts['closedAtTimeMinuteLt'],
        'closed_at__time__minute__lte': opts['closedAtTimeMinuteLte'],
        'closed_at__time__minute__in': opts['closedAtTimeMinuteIn'],
        'closed_at__time__minute__contains': opts['closedAtTimeMinuteContains'],
        'closed_at__time__minute__icontains': opts['closedAtTimeMinuteIcontains'],
        'closed_at__time__minute__startswith': opts['closedAtTimeMinuteStartswith'],
        'closed_at__time__minute__istartswith': opts['closedAtTimeMinuteIstartswith'],
        'closed_at__time__minute__endswith': opts['closedAtTimeMinuteEndswith'],
        'closed_at__time__minute__iendswith': opts['closedAtTimeMinuteIendswith'],
        'closed_at__time__minute__range': opts['closedAtTimeMinuteRange'],
        'closed_at__time__minute__isnull': opts['closedAtTimeMinuteIsnull'],
        'closed_at__time__minute__regex': opts['closedAtTimeMinuteRegex'],
        'closed_at__time__minute__iregex': opts['closedAtTimeMinuteIregex'],
        'closed_at__time__minute__contained_by': opts['closedAtTimeMinuteContainedBy'],
        'closed_at__time__second': opts['closedAtTimeSecond'],
        'closed_at__time__second__iexact': opts['closedAtTimeSecondIexact'],
        'closed_at__time__second__gt': opts['closedAtTimeSecondGt'],
        'closed_at__time__second__gte': opts['closedAtTimeSecondGte'],
        'closed_at__time__second__lt': opts['closedAtTimeSecondLt'],
        'closed_at__time__second__lte': opts['closedAtTimeSecondLte'],
        'closed_at__time__second__in': opts['closedAtTimeSecondIn'],
        'closed_at__time__second__contains': opts['closedAtTimeSecondContains'],
        'closed_at__time__second__icontains': opts['closedAtTimeSecondIcontains'],
        'closed_at__time__second__startswith': opts['closedAtTimeSecondStartswith'],
        'closed_at__time__second__istartswith': opts['closedAtTimeSecondIstartswith'],
        'closed_at__time__second__endswith': opts['closedAtTimeSecondEndswith'],
        'closed_at__time__second__iendswith': opts['closedAtTimeSecondIendswith'],
        'closed_at__time__second__range': opts['closedAtTimeSecondRange'],
        'closed_at__time__second__isnull': opts['closedAtTimeSecondIsnull'],
        'closed_at__time__second__regex': opts['closedAtTimeSecondRegex'],
        'closed_at__time__second__iregex': opts['closedAtTimeSecondIregex'],
        'closed_at__time__second__contained_by': opts['closedAtTimeSecondContainedBy'],
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TeamSuppressionReasons];

      return this.apiClient.callApi(
        '/metrics/teams/{company_id}/suppressions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
