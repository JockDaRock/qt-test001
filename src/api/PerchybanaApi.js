/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EventNotification', 'model/InlineResponse20010', 'model/InlineResponse2007', 'model/InlineResponse2008', 'model/InlineResponse2009', 'model/Report', 'model/SavedObject', 'model/ScheduledReport', 'model/TriggeredEventNotification'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EventNotification'), require('../model/InlineResponse20010'), require('../model/InlineResponse2007'), require('../model/InlineResponse2008'), require('../model/InlineResponse2009'), require('../model/Report'), require('../model/SavedObject'), require('../model/ScheduledReport'), require('../model/TriggeredEventNotification'));
  } else {
    // Browser globals (root is window)
    if (!root.PerchApi) {
      root.PerchApi = {};
    }
    root.PerchApi.PerchybanaApi = factory(root.PerchApi.ApiClient, root.PerchApi.EventNotification, root.PerchApi.InlineResponse20010, root.PerchApi.InlineResponse2007, root.PerchApi.InlineResponse2008, root.PerchApi.InlineResponse2009, root.PerchApi.Report, root.PerchApi.SavedObject, root.PerchApi.ScheduledReport, root.PerchApi.TriggeredEventNotification);
  }
}(this, function(ApiClient, EventNotification, InlineResponse20010, InlineResponse2007, InlineResponse2008, InlineResponse2009, Report, SavedObject, ScheduledReport, TriggeredEventNotification) {
  'use strict';

  /**
   * Perchybana service.
   * @module api/PerchybanaApi
   * @version v1
   */

  /**
   * Constructs a new PerchybanaApi. 
   * @alias module:api/PerchybanaApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the perchybanaCheckUserList operation.
     * @callback module:api/PerchybanaApi~perchybanaCheckUserListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if user is provisioned for Perchybana or is actively being provisioned
     * @param {module:api/PerchybanaApi~perchybanaCheckUserListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.perchybanaCheckUserList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/perchybana/check-user', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsActivate operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsActivateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/EventNotification} data 
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsActivateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventNotification}
     */
    this.perchybanaEventNotificationsActivate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaEventNotificationsActivate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaEventNotificationsActivate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling perchybanaEventNotificationsActivate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventNotification;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/event-notifications/{id}/activate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsAlertableFieldsList operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsAlertableFieldsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the available Elasticsearch fields to be utilized in Event Notifications. Accepts query param `?type=[str]` to return only fields of the given data type.
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsAlertableFieldsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.perchybanaEventNotificationsAlertableFieldsList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/perchybana/event-notifications/alertable-fields', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsAlertableMappingsList operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsAlertableMappingsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the available Elasticsearch event_type mappings supported for use in Event Notifications. Accepts query param `?id=[int]` to return a single mapping by ID.
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsAlertableMappingsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.perchybanaEventNotificationsAlertableMappingsList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/perchybana/event-notifications/alertable-mappings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsClone operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/EventNotification} data 
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventNotification}
     */
    this.perchybanaEventNotificationsClone = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaEventNotificationsClone");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaEventNotificationsClone");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling perchybanaEventNotificationsClone");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventNotification;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/event-notifications/{id}/clone', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsCreate operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/EventNotification} data 
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventNotification}
     */
    this.perchybanaEventNotificationsCreate = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaEventNotificationsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling perchybanaEventNotificationsCreate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventNotification;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/event-notifications', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsDeactivate operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsDeactivateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/EventNotification} data 
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsDeactivateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventNotification}
     */
    this.perchybanaEventNotificationsDeactivate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaEventNotificationsDeactivate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaEventNotificationsDeactivate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling perchybanaEventNotificationsDeactivate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventNotification;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/event-notifications/{id}/deactivate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsDelete operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.perchybanaEventNotificationsDelete = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaEventNotificationsDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaEventNotificationsDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/event-notifications/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsExecuteNow operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsExecuteNowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/EventNotification} data 
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsExecuteNowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventNotification}
     */
    this.perchybanaEventNotificationsExecuteNow = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaEventNotificationsExecuteNow");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaEventNotificationsExecuteNow");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling perchybanaEventNotificationsExecuteNow");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventNotification;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/event-notifications/{id}/execute-now', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsGetDefaultActions operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsGetDefaultActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.aggregationType 
     * @param {String} opts.createdAt 
     * @param {String} opts.createdAtGte 
     * @param {String} opts.createdAtLte 
     * @param {String} opts.createdBy 
     * @param {String} opts.enableCwManageActionDefault 
     * @param {String} opts.enableEmailActionDefaultRecipients 
     * @param {String} opts.enableEmailActionCustomRecipients 
     * @param {String} opts.enableFreshdeskActionDefaultTicketType 
     * @param {String} opts.enableFreshdeskActionCustomTicketType 
     * @param {String} opts.enableMsftTeamsActionDefaultWebhookUrl 
     * @param {String} opts.enableMsftTeamsActionCustomWebhookUrl 
     * @param {String} opts.enableSlackActionDefaultChannel 
     * @param {String} opts.enableSlackActionCustomChannel 
     * @param {String} opts.enableSmsActionDefaultRecipients 
     * @param {String} opts.enableSmsActionCustomRecipients 
     * @param {String} opts.indexMapping 
     * @param {String} opts.isEnabled 
     * @param {String} opts.name 
     * @param {String} opts.perchAlertEnabled 
     * @param {String} opts.severity 
     * @param {String} opts.triggerCondition 
     * @param {String} opts.updatedAt 
     * @param {String} opts.updatedAtGte 
     * @param {String} opts.updatedAtLte 
     * @param {String} opts.updatedBy 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {String} opts.search A search term.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsGetDefaultActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    this.perchybanaEventNotificationsGetDefaultActions = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaEventNotificationsGetDefaultActions");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'aggregation_type': opts['aggregationType'],
        'created_at': opts['createdAt'],
        'created_at__gte': opts['createdAtGte'],
        'created_at__lte': opts['createdAtLte'],
        'created_by': opts['createdBy'],
        'enable_cw_manage_action_default': opts['enableCwManageActionDefault'],
        'enable_email_action_default_recipients': opts['enableEmailActionDefaultRecipients'],
        'enable_email_action_custom_recipients': opts['enableEmailActionCustomRecipients'],
        'enable_freshdesk_action_default_ticket_type': opts['enableFreshdeskActionDefaultTicketType'],
        'enable_freshdesk_action_custom_ticket_type': opts['enableFreshdeskActionCustomTicketType'],
        'enable_msft_teams_action_default_webhook_url': opts['enableMsftTeamsActionDefaultWebhookUrl'],
        'enable_msft_teams_action_custom_webhook_url': opts['enableMsftTeamsActionCustomWebhookUrl'],
        'enable_slack_action_default_channel': opts['enableSlackActionDefaultChannel'],
        'enable_slack_action_custom_channel': opts['enableSlackActionCustomChannel'],
        'enable_sms_action_default_recipients': opts['enableSmsActionDefaultRecipients'],
        'enable_sms_action_custom_recipients': opts['enableSmsActionCustomRecipients'],
        'index_mapping': opts['indexMapping'],
        'is_enabled': opts['isEnabled'],
        'name': opts['name'],
        'perch_alert_enabled': opts['perchAlertEnabled'],
        'severity': opts['severity'],
        'trigger_condition': opts['triggerCondition'],
        'updated_at': opts['updatedAt'],
        'updated_at__gte': opts['updatedAtGte'],
        'updated_at__lte': opts['updatedAtLte'],
        'updated_by': opts['updatedBy'],
        'ordering': opts['ordering'],
        'search': opts['search'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/event-notifications/default-actions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsList operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.aggregationType 
     * @param {String} opts.createdAt 
     * @param {String} opts.createdAtGte 
     * @param {String} opts.createdAtLte 
     * @param {String} opts.createdBy 
     * @param {String} opts.enableCwManageActionDefault 
     * @param {String} opts.enableEmailActionDefaultRecipients 
     * @param {String} opts.enableEmailActionCustomRecipients 
     * @param {String} opts.enableFreshdeskActionDefaultTicketType 
     * @param {String} opts.enableFreshdeskActionCustomTicketType 
     * @param {String} opts.enableMsftTeamsActionDefaultWebhookUrl 
     * @param {String} opts.enableMsftTeamsActionCustomWebhookUrl 
     * @param {String} opts.enableSlackActionDefaultChannel 
     * @param {String} opts.enableSlackActionCustomChannel 
     * @param {String} opts.enableSmsActionDefaultRecipients 
     * @param {String} opts.enableSmsActionCustomRecipients 
     * @param {String} opts.indexMapping 
     * @param {String} opts.isEnabled 
     * @param {String} opts.name 
     * @param {String} opts.perchAlertEnabled 
     * @param {String} opts.severity 
     * @param {String} opts.triggerCondition 
     * @param {String} opts.updatedAt 
     * @param {String} opts.updatedAtGte 
     * @param {String} opts.updatedAtLte 
     * @param {String} opts.updatedBy 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {String} opts.search A search term.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    this.perchybanaEventNotificationsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaEventNotificationsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'aggregation_type': opts['aggregationType'],
        'created_at': opts['createdAt'],
        'created_at__gte': opts['createdAtGte'],
        'created_at__lte': opts['createdAtLte'],
        'created_by': opts['createdBy'],
        'enable_cw_manage_action_default': opts['enableCwManageActionDefault'],
        'enable_email_action_default_recipients': opts['enableEmailActionDefaultRecipients'],
        'enable_email_action_custom_recipients': opts['enableEmailActionCustomRecipients'],
        'enable_freshdesk_action_default_ticket_type': opts['enableFreshdeskActionDefaultTicketType'],
        'enable_freshdesk_action_custom_ticket_type': opts['enableFreshdeskActionCustomTicketType'],
        'enable_msft_teams_action_default_webhook_url': opts['enableMsftTeamsActionDefaultWebhookUrl'],
        'enable_msft_teams_action_custom_webhook_url': opts['enableMsftTeamsActionCustomWebhookUrl'],
        'enable_slack_action_default_channel': opts['enableSlackActionDefaultChannel'],
        'enable_slack_action_custom_channel': opts['enableSlackActionCustomChannel'],
        'enable_sms_action_default_recipients': opts['enableSmsActionDefaultRecipients'],
        'enable_sms_action_custom_recipients': opts['enableSmsActionCustomRecipients'],
        'index_mapping': opts['indexMapping'],
        'is_enabled': opts['isEnabled'],
        'name': opts['name'],
        'perch_alert_enabled': opts['perchAlertEnabled'],
        'severity': opts['severity'],
        'trigger_condition': opts['triggerCondition'],
        'updated_at': opts['updatedAt'],
        'updated_at__gte': opts['updatedAtGte'],
        'updated_at__lte': opts['updatedAtLte'],
        'updated_by': opts['updatedBy'],
        'ordering': opts['ordering'],
        'search': opts['search'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/event-notifications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsNewTriggerEventCreate operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsNewTriggerEventCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsNewTriggerEventCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.perchybanaEventNotificationsNewTriggerEventCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/perchybana/event-notifications/new-trigger-event', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsPartialUpdate operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/EventNotification} data 
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventNotification}
     */
    this.perchybanaEventNotificationsPartialUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaEventNotificationsPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaEventNotificationsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling perchybanaEventNotificationsPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventNotification;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/event-notifications/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsRead operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventNotification}
     */
    this.perchybanaEventNotificationsRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaEventNotificationsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaEventNotificationsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventNotification;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/event-notifications/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsTestQuery operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsTestQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsTestQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventNotification}
     */
    this.perchybanaEventNotificationsTestQuery = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaEventNotificationsTestQuery");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaEventNotificationsTestQuery");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventNotification;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/event-notifications/{id}/test-query', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsTriggeredNotificationsList operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsTriggeredNotificationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} eventNotificationId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsTriggeredNotificationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2008}
     */
    this.perchybanaEventNotificationsTriggeredNotificationsList = function(companyId, eventNotificationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaEventNotificationsTriggeredNotificationsList");
      }

      // verify the required parameter 'eventNotificationId' is set
      if (eventNotificationId === undefined || eventNotificationId === null) {
        throw new Error("Missing the required parameter 'eventNotificationId' when calling perchybanaEventNotificationsTriggeredNotificationsList");
      }


      var pathParams = {
        'company_id': companyId,
        'event_notification_id': eventNotificationId
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/event-notifications/{event_notification_id}/triggered-notifications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsTriggeredNotificationsRead operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsTriggeredNotificationsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggeredEventNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} eventNotificationId 
     * @param {String} id 
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsTriggeredNotificationsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggeredEventNotification}
     */
    this.perchybanaEventNotificationsTriggeredNotificationsRead = function(companyId, eventNotificationId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaEventNotificationsTriggeredNotificationsRead");
      }

      // verify the required parameter 'eventNotificationId' is set
      if (eventNotificationId === undefined || eventNotificationId === null) {
        throw new Error("Missing the required parameter 'eventNotificationId' when calling perchybanaEventNotificationsTriggeredNotificationsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaEventNotificationsTriggeredNotificationsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'event_notification_id': eventNotificationId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TriggeredEventNotification;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/event-notifications/{event_notification_id}/triggered-notifications/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsUpdate operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/EventNotification} data 
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventNotification}
     */
    this.perchybanaEventNotificationsUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaEventNotificationsUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaEventNotificationsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling perchybanaEventNotificationsUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventNotification;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/event-notifications/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaEventNotificationsUpdateDefaultActions operation.
     * @callback module:api/PerchybanaApi~perchybanaEventNotificationsUpdateDefaultActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/EventNotification} data 
     * @param {module:api/PerchybanaApi~perchybanaEventNotificationsUpdateDefaultActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventNotification}
     */
    this.perchybanaEventNotificationsUpdateDefaultActions = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaEventNotificationsUpdateDefaultActions");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling perchybanaEventNotificationsUpdateDefaultActions");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventNotification;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/event-notifications/update-default-actions', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaMeltgardRolesList operation.
     * @callback module:api/PerchybanaApi~perchybanaMeltgardRolesListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/PerchybanaApi~perchybanaMeltgardRolesListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.perchybanaMeltgardRolesList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/perchybana/meltgard/roles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaMeltgardRolesRead operation.
     * @callback module:api/PerchybanaApi~perchybanaMeltgardRolesReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} roleNames 
     * @param {module:api/PerchybanaApi~perchybanaMeltgardRolesReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.perchybanaMeltgardRolesRead = function(roleNames, callback) {
      var postBody = null;

      // verify the required parameter 'roleNames' is set
      if (roleNames === undefined || roleNames === null) {
        throw new Error("Missing the required parameter 'roleNames' when calling perchybanaMeltgardRolesRead");
      }


      var pathParams = {
        'role_names': roleNames
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/perchybana/meltgard/roles/{role_names}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaMeltgardUsersMeList operation.
     * @callback module:api/PerchybanaApi~perchybanaMeltgardUsersMeListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/PerchybanaApi~perchybanaMeltgardUsersMeListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.perchybanaMeltgardUsersMeList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/perchybana/meltgard/users/me', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaMeltgardUsersRead operation.
     * @callback module:api/PerchybanaApi~perchybanaMeltgardUsersReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} username 
     * @param {module:api/PerchybanaApi~perchybanaMeltgardUsersReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.perchybanaMeltgardUsersRead = function(username, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling perchybanaMeltgardUsersRead");
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/perchybana/meltgard/users/{username}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaScheduledReportsCreate operation.
     * @callback module:api/PerchybanaApi~perchybanaScheduledReportsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/ScheduledReport} data 
     * @param {module:api/PerchybanaApi~perchybanaScheduledReportsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledReport}
     */
    this.perchybanaScheduledReportsCreate = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaScheduledReportsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling perchybanaScheduledReportsCreate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScheduledReport;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/scheduled-reports', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaScheduledReportsDelete operation.
     * @callback module:api/PerchybanaApi~perchybanaScheduledReportsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/PerchybanaApi~perchybanaScheduledReportsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.perchybanaScheduledReportsDelete = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaScheduledReportsDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaScheduledReportsDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/scheduled-reports/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaScheduledReportsList operation.
     * @callback module:api/PerchybanaApi~perchybanaScheduledReportsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/PerchybanaApi~perchybanaScheduledReportsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2009}
     */
    this.perchybanaScheduledReportsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaScheduledReportsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/scheduled-reports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaScheduledReportsPartialUpdate operation.
     * @callback module:api/PerchybanaApi~perchybanaScheduledReportsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/ScheduledReport} data 
     * @param {module:api/PerchybanaApi~perchybanaScheduledReportsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledReport}
     */
    this.perchybanaScheduledReportsPartialUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaScheduledReportsPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaScheduledReportsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling perchybanaScheduledReportsPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScheduledReport;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/scheduled-reports/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaScheduledReportsRead operation.
     * @callback module:api/PerchybanaApi~perchybanaScheduledReportsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/PerchybanaApi~perchybanaScheduledReportsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledReport}
     */
    this.perchybanaScheduledReportsRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaScheduledReportsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaScheduledReportsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScheduledReport;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/scheduled-reports/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaScheduledReportsReportsDownload operation.
     * @callback module:api/PerchybanaApi~perchybanaScheduledReportsReportsDownloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Report} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} scheduledReportId 
     * @param {module:api/PerchybanaApi~perchybanaScheduledReportsReportsDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Report}
     */
    this.perchybanaScheduledReportsReportsDownload = function(companyId, id, scheduledReportId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaScheduledReportsReportsDownload");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaScheduledReportsReportsDownload");
      }

      // verify the required parameter 'scheduledReportId' is set
      if (scheduledReportId === undefined || scheduledReportId === null) {
        throw new Error("Missing the required parameter 'scheduledReportId' when calling perchybanaScheduledReportsReportsDownload");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'scheduled_report_id': scheduledReportId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Report;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/scheduled-reports/{scheduled_report_id}/reports/{id}/download', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaScheduledReportsReportsList operation.
     * @callback module:api/PerchybanaApi~perchybanaScheduledReportsReportsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} scheduledReportId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/PerchybanaApi~perchybanaScheduledReportsReportsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20010}
     */
    this.perchybanaScheduledReportsReportsList = function(companyId, scheduledReportId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaScheduledReportsReportsList");
      }

      // verify the required parameter 'scheduledReportId' is set
      if (scheduledReportId === undefined || scheduledReportId === null) {
        throw new Error("Missing the required parameter 'scheduledReportId' when calling perchybanaScheduledReportsReportsList");
      }


      var pathParams = {
        'company_id': companyId,
        'scheduled_report_id': scheduledReportId
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/scheduled-reports/{scheduled_report_id}/reports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaScheduledReportsReportsRead operation.
     * @callback module:api/PerchybanaApi~perchybanaScheduledReportsReportsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Report} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} scheduledReportId 
     * @param {module:api/PerchybanaApi~perchybanaScheduledReportsReportsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Report}
     */
    this.perchybanaScheduledReportsReportsRead = function(companyId, id, scheduledReportId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaScheduledReportsReportsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaScheduledReportsReportsRead");
      }

      // verify the required parameter 'scheduledReportId' is set
      if (scheduledReportId === undefined || scheduledReportId === null) {
        throw new Error("Missing the required parameter 'scheduledReportId' when calling perchybanaScheduledReportsReportsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'scheduled_report_id': scheduledReportId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Report;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/scheduled-reports/{scheduled_report_id}/reports/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaScheduledReportsSavedObjectsList operation.
     * @callback module:api/PerchybanaApi~perchybanaScheduledReportsSavedObjectsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SavedObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Multiple values may be separated by commas.
     * @param {module:api/PerchybanaApi~perchybanaScheduledReportsSavedObjectsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SavedObject>}
     */
    this.perchybanaScheduledReportsSavedObjectsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'type': opts['type'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SavedObject];

      return this.apiClient.callApi(
        '/perchybana/scheduled-reports/saved-objects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaScheduledReportsTrigger operation.
     * @callback module:api/PerchybanaApi~perchybanaScheduledReportsTriggerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/ScheduledReport} data 
     * @param {module:api/PerchybanaApi~perchybanaScheduledReportsTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledReport}
     */
    this.perchybanaScheduledReportsTrigger = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaScheduledReportsTrigger");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaScheduledReportsTrigger");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling perchybanaScheduledReportsTrigger");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScheduledReport;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/scheduled-reports/{id}/trigger', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the perchybanaScheduledReportsUpdate operation.
     * @callback module:api/PerchybanaApi~perchybanaScheduledReportsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/ScheduledReport} data 
     * @param {module:api/PerchybanaApi~perchybanaScheduledReportsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledReport}
     */
    this.perchybanaScheduledReportsUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling perchybanaScheduledReportsUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling perchybanaScheduledReportsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling perchybanaScheduledReportsUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScheduledReport;

      return this.apiClient.callApi(
        '/perchybana/{company_id}/scheduled-reports/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
