/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IndicatorComment', 'model/InlineResponse20012', 'model/InlineResponse20023', 'model/PublicFirewallBlacklistSerializer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/IndicatorComment'), require('../model/InlineResponse20012'), require('../model/InlineResponse20023'), require('../model/PublicFirewallBlacklistSerializer'));
  } else {
    // Browser globals (root is window)
    if (!root.PerchApi) {
      root.PerchApi = {};
    }
    root.PerchApi.TeamsApi = factory(root.PerchApi.ApiClient, root.PerchApi.IndicatorComment, root.PerchApi.InlineResponse20012, root.PerchApi.InlineResponse20023, root.PerchApi.PublicFirewallBlacklistSerializer);
  }
}(this, function(ApiClient, IndicatorComment, InlineResponse20012, InlineResponse20023, PublicFirewallBlacklistSerializer) {
  'use strict';

  /**
   * Teams service.
   * @module api/TeamsApi
   * @version v1
   */

  /**
   * Constructs a new TeamsApi. 
   * @alias module:api/TeamsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the teamsBlacklistCreate operation.
     * @callback module:api/TeamsApi~teamsBlacklistCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicFirewallBlacklistSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} version 
     * @param {module:model/PublicFirewallBlacklistSerializer} data 
     * @param {module:api/TeamsApi~teamsBlacklistCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicFirewallBlacklistSerializer}
     */
    this.teamsBlacklistCreate = function(companyId, version, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling teamsBlacklistCreate");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling teamsBlacklistCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling teamsBlacklistCreate");
      }


      var pathParams = {
        'company_id': companyId,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PublicFirewallBlacklistSerializer;

      return this.apiClient.callApi(
        '/{version}/teams/{company_id}/blacklist', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBlacklistDelete operation.
     * @callback module:api/TeamsApi~teamsBlacklistDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} version 
     * @param {module:api/TeamsApi~teamsBlacklistDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.teamsBlacklistDelete = function(companyId, id, version, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling teamsBlacklistDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsBlacklistDelete");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling teamsBlacklistDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{version}/teams/{company_id}/blacklist/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBlacklistList operation.
     * @callback module:api/TeamsApi~teamsBlacklistListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20023} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.createdBy 
     * @param {String} opts.updatedBy 
     * @param {String} opts.brand 
     * @param {String} opts.type 
     * @param {String} opts.value 
     * @param {String} opts.createdAt 
     * @param {String} opts.createdAtGte 
     * @param {String} opts.createdAtGt 
     * @param {String} opts.createdAtLte 
     * @param {String} opts.createdAtLt 
     * @param {String} opts.updatedAt 
     * @param {String} opts.updatedAtGte 
     * @param {String} opts.updatedAtGt 
     * @param {String} opts.updatedAtLte 
     * @param {String} opts.updatedAtLt 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/TeamsApi~teamsBlacklistListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20023}
     */
    this.teamsBlacklistList = function(companyId, version, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling teamsBlacklistList");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling teamsBlacklistList");
      }


      var pathParams = {
        'company_id': companyId,
        'version': version
      };
      var queryParams = {
        'created_by': opts['createdBy'],
        'updated_by': opts['updatedBy'],
        'brand': opts['brand'],
        'type': opts['type'],
        'value': opts['value'],
        'created_at': opts['createdAt'],
        'created_at__gte': opts['createdAtGte'],
        'created_at__gt': opts['createdAtGt'],
        'created_at__lte': opts['createdAtLte'],
        'created_at__lt': opts['createdAtLt'],
        'updated_at': opts['updatedAt'],
        'updated_at__gte': opts['updatedAtGte'],
        'updated_at__gt': opts['updatedAtGt'],
        'updated_at__lte': opts['updatedAtLte'],
        'updated_at__lt': opts['updatedAtLt'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20023;

      return this.apiClient.callApi(
        '/{version}/teams/{company_id}/blacklist', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBlacklistPartialUpdate operation.
     * @callback module:api/TeamsApi~teamsBlacklistPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicFirewallBlacklistSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} version 
     * @param {module:model/PublicFirewallBlacklistSerializer} data 
     * @param {module:api/TeamsApi~teamsBlacklistPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicFirewallBlacklistSerializer}
     */
    this.teamsBlacklistPartialUpdate = function(companyId, id, version, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling teamsBlacklistPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsBlacklistPartialUpdate");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling teamsBlacklistPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling teamsBlacklistPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PublicFirewallBlacklistSerializer;

      return this.apiClient.callApi(
        '/{version}/teams/{company_id}/blacklist/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBlacklistRead operation.
     * @callback module:api/TeamsApi~teamsBlacklistReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicFirewallBlacklistSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} version 
     * @param {module:api/TeamsApi~teamsBlacklistReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicFirewallBlacklistSerializer}
     */
    this.teamsBlacklistRead = function(companyId, id, version, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling teamsBlacklistRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsBlacklistRead");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling teamsBlacklistRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PublicFirewallBlacklistSerializer;

      return this.apiClient.callApi(
        '/{version}/teams/{company_id}/blacklist/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBlacklistUpdate operation.
     * @callback module:api/TeamsApi~teamsBlacklistUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicFirewallBlacklistSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} version 
     * @param {module:model/PublicFirewallBlacklistSerializer} data 
     * @param {module:api/TeamsApi~teamsBlacklistUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicFirewallBlacklistSerializer}
     */
    this.teamsBlacklistUpdate = function(companyId, id, version, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling teamsBlacklistUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsBlacklistUpdate");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling teamsBlacklistUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling teamsBlacklistUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PublicFirewallBlacklistSerializer;

      return this.apiClient.callApi(
        '/{version}/teams/{company_id}/blacklist/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCommentsList operation.
     * @callback module:api/TeamsApi~teamsCommentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.group 
     * @param {String} opts.text 
     * @param {String} opts.textIexact 
     * @param {String} opts.textGt 
     * @param {String} opts.textGte 
     * @param {String} opts.textLt 
     * @param {String} opts.textLte 
     * @param {String} opts.textIn Multiple values may be separated by commas.
     * @param {String} opts.textContains 
     * @param {String} opts.textIcontains 
     * @param {String} opts.textStartswith 
     * @param {String} opts.textIstartswith 
     * @param {String} opts.textEndswith 
     * @param {String} opts.textIendswith 
     * @param {String} opts.textRange Multiple values may be separated by commas.
     * @param {String} opts.textIsnull 
     * @param {String} opts.textRegex 
     * @param {String} opts.textIregex 
     * @param {String} opts.textUnaccent 
     * @param {String} opts.textUnaccentIexact 
     * @param {String} opts.textUnaccentGt 
     * @param {String} opts.textUnaccentGte 
     * @param {String} opts.textUnaccentLt 
     * @param {String} opts.textUnaccentLte 
     * @param {String} opts.textUnaccentIn Multiple values may be separated by commas.
     * @param {String} opts.textUnaccentContains 
     * @param {String} opts.textUnaccentIcontains 
     * @param {String} opts.textUnaccentStartswith 
     * @param {String} opts.textUnaccentIstartswith 
     * @param {String} opts.textUnaccentEndswith 
     * @param {String} opts.textUnaccentIendswith 
     * @param {String} opts.textUnaccentRange Multiple values may be separated by commas.
     * @param {String} opts.textUnaccentIsnull 
     * @param {String} opts.textUnaccentRegex 
     * @param {String} opts.textUnaccentIregex 
     * @param {String} opts.textUnaccentSearch 
     * @param {String} opts.textUnaccentTrigramSimilar 
     * @param {String} opts.textSearch 
     * @param {String} opts.textTrigramSimilar 
     * @param {String} opts.privateFor 
     * @param {String} opts.anonymous 
     * @param {String} opts.visibility 
     * @param {String} opts.createdBy 
     * @param {String} opts.createdAt 
     * @param {String} opts.createdAtIexact 
     * @param {String} opts.createdAtGt 
     * @param {String} opts.createdAtGte 
     * @param {String} opts.createdAtLt 
     * @param {String} opts.createdAtLte 
     * @param {String} opts.createdAtIn Multiple values may be separated by commas.
     * @param {String} opts.createdAtContains 
     * @param {String} opts.createdAtIcontains 
     * @param {String} opts.createdAtStartswith 
     * @param {String} opts.createdAtIstartswith 
     * @param {String} opts.createdAtEndswith 
     * @param {String} opts.createdAtIendswith 
     * @param {String} opts.createdAtRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtIsnull 
     * @param {String} opts.createdAtRegex 
     * @param {String} opts.createdAtIregex 
     * @param {Number} opts.createdAtYear 
     * @param {Number} opts.createdAtYearIexact 
     * @param {Number} opts.createdAtYearGt 
     * @param {Number} opts.createdAtYearGte 
     * @param {Number} opts.createdAtYearLt 
     * @param {Number} opts.createdAtYearLte 
     * @param {Number} opts.createdAtYearIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtYearContains 
     * @param {Number} opts.createdAtYearIcontains 
     * @param {Number} opts.createdAtYearStartswith 
     * @param {Number} opts.createdAtYearIstartswith 
     * @param {Number} opts.createdAtYearEndswith 
     * @param {Number} opts.createdAtYearIendswith 
     * @param {Number} opts.createdAtYearRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtYearIsnull 
     * @param {Number} opts.createdAtYearRegex 
     * @param {Number} opts.createdAtYearIregex 
     * @param {Number} opts.createdAtYearContainedBy 
     * @param {Number} opts.createdAtMonth 
     * @param {Number} opts.createdAtMonthIexact 
     * @param {Number} opts.createdAtMonthGt 
     * @param {Number} opts.createdAtMonthGte 
     * @param {Number} opts.createdAtMonthLt 
     * @param {Number} opts.createdAtMonthLte 
     * @param {Number} opts.createdAtMonthIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtMonthContains 
     * @param {Number} opts.createdAtMonthIcontains 
     * @param {Number} opts.createdAtMonthStartswith 
     * @param {Number} opts.createdAtMonthIstartswith 
     * @param {Number} opts.createdAtMonthEndswith 
     * @param {Number} opts.createdAtMonthIendswith 
     * @param {Number} opts.createdAtMonthRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtMonthIsnull 
     * @param {Number} opts.createdAtMonthRegex 
     * @param {Number} opts.createdAtMonthIregex 
     * @param {Number} opts.createdAtMonthContainedBy 
     * @param {Number} opts.createdAtDay 
     * @param {Number} opts.createdAtDayIexact 
     * @param {Number} opts.createdAtDayGt 
     * @param {Number} opts.createdAtDayGte 
     * @param {Number} opts.createdAtDayLt 
     * @param {Number} opts.createdAtDayLte 
     * @param {Number} opts.createdAtDayIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtDayContains 
     * @param {Number} opts.createdAtDayIcontains 
     * @param {Number} opts.createdAtDayStartswith 
     * @param {Number} opts.createdAtDayIstartswith 
     * @param {Number} opts.createdAtDayEndswith 
     * @param {Number} opts.createdAtDayIendswith 
     * @param {Number} opts.createdAtDayRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtDayIsnull 
     * @param {Number} opts.createdAtDayRegex 
     * @param {Number} opts.createdAtDayIregex 
     * @param {Number} opts.createdAtDayContainedBy 
     * @param {Number} opts.createdAtWeekDay 
     * @param {Number} opts.createdAtWeekDayIexact 
     * @param {Number} opts.createdAtWeekDayGt 
     * @param {Number} opts.createdAtWeekDayGte 
     * @param {Number} opts.createdAtWeekDayLt 
     * @param {Number} opts.createdAtWeekDayLte 
     * @param {Number} opts.createdAtWeekDayIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtWeekDayContains 
     * @param {Number} opts.createdAtWeekDayIcontains 
     * @param {Number} opts.createdAtWeekDayStartswith 
     * @param {Number} opts.createdAtWeekDayIstartswith 
     * @param {Number} opts.createdAtWeekDayEndswith 
     * @param {Number} opts.createdAtWeekDayIendswith 
     * @param {Number} opts.createdAtWeekDayRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtWeekDayIsnull 
     * @param {Number} opts.createdAtWeekDayRegex 
     * @param {Number} opts.createdAtWeekDayIregex 
     * @param {Number} opts.createdAtWeekDayContainedBy 
     * @param {Number} opts.createdAtWeek 
     * @param {Number} opts.createdAtWeekIexact 
     * @param {Number} opts.createdAtWeekGt 
     * @param {Number} opts.createdAtWeekGte 
     * @param {Number} opts.createdAtWeekLt 
     * @param {Number} opts.createdAtWeekLte 
     * @param {Number} opts.createdAtWeekIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtWeekContains 
     * @param {Number} opts.createdAtWeekIcontains 
     * @param {Number} opts.createdAtWeekStartswith 
     * @param {Number} opts.createdAtWeekIstartswith 
     * @param {Number} opts.createdAtWeekEndswith 
     * @param {Number} opts.createdAtWeekIendswith 
     * @param {Number} opts.createdAtWeekRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtWeekIsnull 
     * @param {Number} opts.createdAtWeekRegex 
     * @param {Number} opts.createdAtWeekIregex 
     * @param {Number} opts.createdAtWeekContainedBy 
     * @param {Number} opts.createdAtIsoYear 
     * @param {Number} opts.createdAtIsoYearIexact 
     * @param {Number} opts.createdAtIsoYearGt 
     * @param {Number} opts.createdAtIsoYearGte 
     * @param {Number} opts.createdAtIsoYearLt 
     * @param {Number} opts.createdAtIsoYearLte 
     * @param {Number} opts.createdAtIsoYearIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtIsoYearContains 
     * @param {Number} opts.createdAtIsoYearIcontains 
     * @param {Number} opts.createdAtIsoYearStartswith 
     * @param {Number} opts.createdAtIsoYearIstartswith 
     * @param {Number} opts.createdAtIsoYearEndswith 
     * @param {Number} opts.createdAtIsoYearIendswith 
     * @param {Number} opts.createdAtIsoYearRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtIsoYearIsnull 
     * @param {Number} opts.createdAtIsoYearRegex 
     * @param {Number} opts.createdAtIsoYearIregex 
     * @param {Number} opts.createdAtIsoYearContainedBy 
     * @param {Number} opts.createdAtQuarter 
     * @param {Number} opts.createdAtQuarterIexact 
     * @param {Number} opts.createdAtQuarterGt 
     * @param {Number} opts.createdAtQuarterGte 
     * @param {Number} opts.createdAtQuarterLt 
     * @param {Number} opts.createdAtQuarterLte 
     * @param {Number} opts.createdAtQuarterIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtQuarterContains 
     * @param {Number} opts.createdAtQuarterIcontains 
     * @param {Number} opts.createdAtQuarterStartswith 
     * @param {Number} opts.createdAtQuarterIstartswith 
     * @param {Number} opts.createdAtQuarterEndswith 
     * @param {Number} opts.createdAtQuarterIendswith 
     * @param {Number} opts.createdAtQuarterRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtQuarterIsnull 
     * @param {Number} opts.createdAtQuarterRegex 
     * @param {Number} opts.createdAtQuarterIregex 
     * @param {Number} opts.createdAtQuarterContainedBy 
     * @param {String} opts.createdAtContainedBy 
     * @param {Number} opts.createdAtHour 
     * @param {Number} opts.createdAtHourIexact 
     * @param {Number} opts.createdAtHourGt 
     * @param {Number} opts.createdAtHourGte 
     * @param {Number} opts.createdAtHourLt 
     * @param {Number} opts.createdAtHourLte 
     * @param {Number} opts.createdAtHourIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtHourContains 
     * @param {Number} opts.createdAtHourIcontains 
     * @param {Number} opts.createdAtHourStartswith 
     * @param {Number} opts.createdAtHourIstartswith 
     * @param {Number} opts.createdAtHourEndswith 
     * @param {Number} opts.createdAtHourIendswith 
     * @param {Number} opts.createdAtHourRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtHourIsnull 
     * @param {Number} opts.createdAtHourRegex 
     * @param {Number} opts.createdAtHourIregex 
     * @param {Number} opts.createdAtHourContainedBy 
     * @param {Number} opts.createdAtMinute 
     * @param {Number} opts.createdAtMinuteIexact 
     * @param {Number} opts.createdAtMinuteGt 
     * @param {Number} opts.createdAtMinuteGte 
     * @param {Number} opts.createdAtMinuteLt 
     * @param {Number} opts.createdAtMinuteLte 
     * @param {Number} opts.createdAtMinuteIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtMinuteContains 
     * @param {Number} opts.createdAtMinuteIcontains 
     * @param {Number} opts.createdAtMinuteStartswith 
     * @param {Number} opts.createdAtMinuteIstartswith 
     * @param {Number} opts.createdAtMinuteEndswith 
     * @param {Number} opts.createdAtMinuteIendswith 
     * @param {Number} opts.createdAtMinuteRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtMinuteIsnull 
     * @param {Number} opts.createdAtMinuteRegex 
     * @param {Number} opts.createdAtMinuteIregex 
     * @param {Number} opts.createdAtMinuteContainedBy 
     * @param {Number} opts.createdAtSecond 
     * @param {Number} opts.createdAtSecondIexact 
     * @param {Number} opts.createdAtSecondGt 
     * @param {Number} opts.createdAtSecondGte 
     * @param {Number} opts.createdAtSecondLt 
     * @param {Number} opts.createdAtSecondLte 
     * @param {Number} opts.createdAtSecondIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtSecondContains 
     * @param {Number} opts.createdAtSecondIcontains 
     * @param {Number} opts.createdAtSecondStartswith 
     * @param {Number} opts.createdAtSecondIstartswith 
     * @param {Number} opts.createdAtSecondEndswith 
     * @param {Number} opts.createdAtSecondIendswith 
     * @param {Number} opts.createdAtSecondRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtSecondIsnull 
     * @param {Number} opts.createdAtSecondRegex 
     * @param {Number} opts.createdAtSecondIregex 
     * @param {Number} opts.createdAtSecondContainedBy 
     * @param {String} opts.createdAtDate 
     * @param {String} opts.createdAtDateIexact 
     * @param {String} opts.createdAtDateGt 
     * @param {String} opts.createdAtDateGte 
     * @param {String} opts.createdAtDateLt 
     * @param {String} opts.createdAtDateLte 
     * @param {String} opts.createdAtDateIn Multiple values may be separated by commas.
     * @param {String} opts.createdAtDateContains 
     * @param {String} opts.createdAtDateIcontains 
     * @param {String} opts.createdAtDateStartswith 
     * @param {String} opts.createdAtDateIstartswith 
     * @param {String} opts.createdAtDateEndswith 
     * @param {String} opts.createdAtDateIendswith 
     * @param {String} opts.createdAtDateRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtDateIsnull 
     * @param {String} opts.createdAtDateRegex 
     * @param {String} opts.createdAtDateIregex 
     * @param {Number} opts.createdAtDateYear 
     * @param {Number} opts.createdAtDateYearIexact 
     * @param {Number} opts.createdAtDateYearGt 
     * @param {Number} opts.createdAtDateYearGte 
     * @param {Number} opts.createdAtDateYearLt 
     * @param {Number} opts.createdAtDateYearLte 
     * @param {Number} opts.createdAtDateYearIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtDateYearContains 
     * @param {Number} opts.createdAtDateYearIcontains 
     * @param {Number} opts.createdAtDateYearStartswith 
     * @param {Number} opts.createdAtDateYearIstartswith 
     * @param {Number} opts.createdAtDateYearEndswith 
     * @param {Number} opts.createdAtDateYearIendswith 
     * @param {Number} opts.createdAtDateYearRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtDateYearIsnull 
     * @param {Number} opts.createdAtDateYearRegex 
     * @param {Number} opts.createdAtDateYearIregex 
     * @param {Number} opts.createdAtDateYearContainedBy 
     * @param {Number} opts.createdAtDateMonth 
     * @param {Number} opts.createdAtDateMonthIexact 
     * @param {Number} opts.createdAtDateMonthGt 
     * @param {Number} opts.createdAtDateMonthGte 
     * @param {Number} opts.createdAtDateMonthLt 
     * @param {Number} opts.createdAtDateMonthLte 
     * @param {Number} opts.createdAtDateMonthIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtDateMonthContains 
     * @param {Number} opts.createdAtDateMonthIcontains 
     * @param {Number} opts.createdAtDateMonthStartswith 
     * @param {Number} opts.createdAtDateMonthIstartswith 
     * @param {Number} opts.createdAtDateMonthEndswith 
     * @param {Number} opts.createdAtDateMonthIendswith 
     * @param {Number} opts.createdAtDateMonthRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtDateMonthIsnull 
     * @param {Number} opts.createdAtDateMonthRegex 
     * @param {Number} opts.createdAtDateMonthIregex 
     * @param {Number} opts.createdAtDateMonthContainedBy 
     * @param {Number} opts.createdAtDateDay 
     * @param {Number} opts.createdAtDateDayIexact 
     * @param {Number} opts.createdAtDateDayGt 
     * @param {Number} opts.createdAtDateDayGte 
     * @param {Number} opts.createdAtDateDayLt 
     * @param {Number} opts.createdAtDateDayLte 
     * @param {Number} opts.createdAtDateDayIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtDateDayContains 
     * @param {Number} opts.createdAtDateDayIcontains 
     * @param {Number} opts.createdAtDateDayStartswith 
     * @param {Number} opts.createdAtDateDayIstartswith 
     * @param {Number} opts.createdAtDateDayEndswith 
     * @param {Number} opts.createdAtDateDayIendswith 
     * @param {Number} opts.createdAtDateDayRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtDateDayIsnull 
     * @param {Number} opts.createdAtDateDayRegex 
     * @param {Number} opts.createdAtDateDayIregex 
     * @param {Number} opts.createdAtDateDayContainedBy 
     * @param {Number} opts.createdAtDateWeekDay 
     * @param {Number} opts.createdAtDateWeekDayIexact 
     * @param {Number} opts.createdAtDateWeekDayGt 
     * @param {Number} opts.createdAtDateWeekDayGte 
     * @param {Number} opts.createdAtDateWeekDayLt 
     * @param {Number} opts.createdAtDateWeekDayLte 
     * @param {Number} opts.createdAtDateWeekDayIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtDateWeekDayContains 
     * @param {Number} opts.createdAtDateWeekDayIcontains 
     * @param {Number} opts.createdAtDateWeekDayStartswith 
     * @param {Number} opts.createdAtDateWeekDayIstartswith 
     * @param {Number} opts.createdAtDateWeekDayEndswith 
     * @param {Number} opts.createdAtDateWeekDayIendswith 
     * @param {Number} opts.createdAtDateWeekDayRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtDateWeekDayIsnull 
     * @param {Number} opts.createdAtDateWeekDayRegex 
     * @param {Number} opts.createdAtDateWeekDayIregex 
     * @param {Number} opts.createdAtDateWeekDayContainedBy 
     * @param {Number} opts.createdAtDateWeek 
     * @param {Number} opts.createdAtDateWeekIexact 
     * @param {Number} opts.createdAtDateWeekGt 
     * @param {Number} opts.createdAtDateWeekGte 
     * @param {Number} opts.createdAtDateWeekLt 
     * @param {Number} opts.createdAtDateWeekLte 
     * @param {Number} opts.createdAtDateWeekIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtDateWeekContains 
     * @param {Number} opts.createdAtDateWeekIcontains 
     * @param {Number} opts.createdAtDateWeekStartswith 
     * @param {Number} opts.createdAtDateWeekIstartswith 
     * @param {Number} opts.createdAtDateWeekEndswith 
     * @param {Number} opts.createdAtDateWeekIendswith 
     * @param {Number} opts.createdAtDateWeekRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtDateWeekIsnull 
     * @param {Number} opts.createdAtDateWeekRegex 
     * @param {Number} opts.createdAtDateWeekIregex 
     * @param {Number} opts.createdAtDateWeekContainedBy 
     * @param {Number} opts.createdAtDateIsoYear 
     * @param {Number} opts.createdAtDateIsoYearIexact 
     * @param {Number} opts.createdAtDateIsoYearGt 
     * @param {Number} opts.createdAtDateIsoYearGte 
     * @param {Number} opts.createdAtDateIsoYearLt 
     * @param {Number} opts.createdAtDateIsoYearLte 
     * @param {Number} opts.createdAtDateIsoYearIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtDateIsoYearContains 
     * @param {Number} opts.createdAtDateIsoYearIcontains 
     * @param {Number} opts.createdAtDateIsoYearStartswith 
     * @param {Number} opts.createdAtDateIsoYearIstartswith 
     * @param {Number} opts.createdAtDateIsoYearEndswith 
     * @param {Number} opts.createdAtDateIsoYearIendswith 
     * @param {Number} opts.createdAtDateIsoYearRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtDateIsoYearIsnull 
     * @param {Number} opts.createdAtDateIsoYearRegex 
     * @param {Number} opts.createdAtDateIsoYearIregex 
     * @param {Number} opts.createdAtDateIsoYearContainedBy 
     * @param {Number} opts.createdAtDateQuarter 
     * @param {Number} opts.createdAtDateQuarterIexact 
     * @param {Number} opts.createdAtDateQuarterGt 
     * @param {Number} opts.createdAtDateQuarterGte 
     * @param {Number} opts.createdAtDateQuarterLt 
     * @param {Number} opts.createdAtDateQuarterLte 
     * @param {Number} opts.createdAtDateQuarterIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtDateQuarterContains 
     * @param {Number} opts.createdAtDateQuarterIcontains 
     * @param {Number} opts.createdAtDateQuarterStartswith 
     * @param {Number} opts.createdAtDateQuarterIstartswith 
     * @param {Number} opts.createdAtDateQuarterEndswith 
     * @param {Number} opts.createdAtDateQuarterIendswith 
     * @param {Number} opts.createdAtDateQuarterRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtDateQuarterIsnull 
     * @param {Number} opts.createdAtDateQuarterRegex 
     * @param {Number} opts.createdAtDateQuarterIregex 
     * @param {Number} opts.createdAtDateQuarterContainedBy 
     * @param {String} opts.createdAtDateContainedBy 
     * @param {String} opts.createdAtTime 
     * @param {String} opts.createdAtTimeIexact 
     * @param {String} opts.createdAtTimeGt 
     * @param {String} opts.createdAtTimeGte 
     * @param {String} opts.createdAtTimeLt 
     * @param {String} opts.createdAtTimeLte 
     * @param {String} opts.createdAtTimeIn Multiple values may be separated by commas.
     * @param {String} opts.createdAtTimeContains 
     * @param {String} opts.createdAtTimeIcontains 
     * @param {String} opts.createdAtTimeStartswith 
     * @param {String} opts.createdAtTimeIstartswith 
     * @param {String} opts.createdAtTimeEndswith 
     * @param {String} opts.createdAtTimeIendswith 
     * @param {String} opts.createdAtTimeRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtTimeIsnull 
     * @param {String} opts.createdAtTimeRegex 
     * @param {String} opts.createdAtTimeIregex 
     * @param {Number} opts.createdAtTimeHour 
     * @param {Number} opts.createdAtTimeHourIexact 
     * @param {Number} opts.createdAtTimeHourGt 
     * @param {Number} opts.createdAtTimeHourGte 
     * @param {Number} opts.createdAtTimeHourLt 
     * @param {Number} opts.createdAtTimeHourLte 
     * @param {Number} opts.createdAtTimeHourIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtTimeHourContains 
     * @param {Number} opts.createdAtTimeHourIcontains 
     * @param {Number} opts.createdAtTimeHourStartswith 
     * @param {Number} opts.createdAtTimeHourIstartswith 
     * @param {Number} opts.createdAtTimeHourEndswith 
     * @param {Number} opts.createdAtTimeHourIendswith 
     * @param {Number} opts.createdAtTimeHourRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtTimeHourIsnull 
     * @param {Number} opts.createdAtTimeHourRegex 
     * @param {Number} opts.createdAtTimeHourIregex 
     * @param {Number} opts.createdAtTimeHourContainedBy 
     * @param {Number} opts.createdAtTimeMinute 
     * @param {Number} opts.createdAtTimeMinuteIexact 
     * @param {Number} opts.createdAtTimeMinuteGt 
     * @param {Number} opts.createdAtTimeMinuteGte 
     * @param {Number} opts.createdAtTimeMinuteLt 
     * @param {Number} opts.createdAtTimeMinuteLte 
     * @param {Number} opts.createdAtTimeMinuteIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtTimeMinuteContains 
     * @param {Number} opts.createdAtTimeMinuteIcontains 
     * @param {Number} opts.createdAtTimeMinuteStartswith 
     * @param {Number} opts.createdAtTimeMinuteIstartswith 
     * @param {Number} opts.createdAtTimeMinuteEndswith 
     * @param {Number} opts.createdAtTimeMinuteIendswith 
     * @param {Number} opts.createdAtTimeMinuteRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtTimeMinuteIsnull 
     * @param {Number} opts.createdAtTimeMinuteRegex 
     * @param {Number} opts.createdAtTimeMinuteIregex 
     * @param {Number} opts.createdAtTimeMinuteContainedBy 
     * @param {Number} opts.createdAtTimeSecond 
     * @param {Number} opts.createdAtTimeSecondIexact 
     * @param {Number} opts.createdAtTimeSecondGt 
     * @param {Number} opts.createdAtTimeSecondGte 
     * @param {Number} opts.createdAtTimeSecondLt 
     * @param {Number} opts.createdAtTimeSecondLte 
     * @param {Number} opts.createdAtTimeSecondIn Multiple values may be separated by commas.
     * @param {Number} opts.createdAtTimeSecondContains 
     * @param {Number} opts.createdAtTimeSecondIcontains 
     * @param {Number} opts.createdAtTimeSecondStartswith 
     * @param {Number} opts.createdAtTimeSecondIstartswith 
     * @param {Number} opts.createdAtTimeSecondEndswith 
     * @param {Number} opts.createdAtTimeSecondIendswith 
     * @param {Number} opts.createdAtTimeSecondRange Multiple values may be separated by commas.
     * @param {String} opts.createdAtTimeSecondIsnull 
     * @param {Number} opts.createdAtTimeSecondRegex 
     * @param {Number} opts.createdAtTimeSecondIregex 
     * @param {Number} opts.createdAtTimeSecondContainedBy 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/TeamsApi~teamsCommentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20012}
     */
    this.teamsCommentsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling teamsCommentsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'group': opts['group'],
        'text': opts['text'],
        'text__iexact': opts['textIexact'],
        'text__gt': opts['textGt'],
        'text__gte': opts['textGte'],
        'text__lt': opts['textLt'],
        'text__lte': opts['textLte'],
        'text__in': opts['textIn'],
        'text__contains': opts['textContains'],
        'text__icontains': opts['textIcontains'],
        'text__startswith': opts['textStartswith'],
        'text__istartswith': opts['textIstartswith'],
        'text__endswith': opts['textEndswith'],
        'text__iendswith': opts['textIendswith'],
        'text__range': opts['textRange'],
        'text__isnull': opts['textIsnull'],
        'text__regex': opts['textRegex'],
        'text__iregex': opts['textIregex'],
        'text__unaccent': opts['textUnaccent'],
        'text__unaccent__iexact': opts['textUnaccentIexact'],
        'text__unaccent__gt': opts['textUnaccentGt'],
        'text__unaccent__gte': opts['textUnaccentGte'],
        'text__unaccent__lt': opts['textUnaccentLt'],
        'text__unaccent__lte': opts['textUnaccentLte'],
        'text__unaccent__in': opts['textUnaccentIn'],
        'text__unaccent__contains': opts['textUnaccentContains'],
        'text__unaccent__icontains': opts['textUnaccentIcontains'],
        'text__unaccent__startswith': opts['textUnaccentStartswith'],
        'text__unaccent__istartswith': opts['textUnaccentIstartswith'],
        'text__unaccent__endswith': opts['textUnaccentEndswith'],
        'text__unaccent__iendswith': opts['textUnaccentIendswith'],
        'text__unaccent__range': opts['textUnaccentRange'],
        'text__unaccent__isnull': opts['textUnaccentIsnull'],
        'text__unaccent__regex': opts['textUnaccentRegex'],
        'text__unaccent__iregex': opts['textUnaccentIregex'],
        'text__unaccent__search': opts['textUnaccentSearch'],
        'text__unaccent__trigram_similar': opts['textUnaccentTrigramSimilar'],
        'text__search': opts['textSearch'],
        'text__trigram_similar': opts['textTrigramSimilar'],
        'private_for': opts['privateFor'],
        'anonymous': opts['anonymous'],
        'visibility': opts['visibility'],
        'created_by': opts['createdBy'],
        'created_at': opts['createdAt'],
        'created_at__iexact': opts['createdAtIexact'],
        'created_at__gt': opts['createdAtGt'],
        'created_at__gte': opts['createdAtGte'],
        'created_at__lt': opts['createdAtLt'],
        'created_at__lte': opts['createdAtLte'],
        'created_at__in': opts['createdAtIn'],
        'created_at__contains': opts['createdAtContains'],
        'created_at__icontains': opts['createdAtIcontains'],
        'created_at__startswith': opts['createdAtStartswith'],
        'created_at__istartswith': opts['createdAtIstartswith'],
        'created_at__endswith': opts['createdAtEndswith'],
        'created_at__iendswith': opts['createdAtIendswith'],
        'created_at__range': opts['createdAtRange'],
        'created_at__isnull': opts['createdAtIsnull'],
        'created_at__regex': opts['createdAtRegex'],
        'created_at__iregex': opts['createdAtIregex'],
        'created_at__year': opts['createdAtYear'],
        'created_at__year__iexact': opts['createdAtYearIexact'],
        'created_at__year__gt': opts['createdAtYearGt'],
        'created_at__year__gte': opts['createdAtYearGte'],
        'created_at__year__lt': opts['createdAtYearLt'],
        'created_at__year__lte': opts['createdAtYearLte'],
        'created_at__year__in': opts['createdAtYearIn'],
        'created_at__year__contains': opts['createdAtYearContains'],
        'created_at__year__icontains': opts['createdAtYearIcontains'],
        'created_at__year__startswith': opts['createdAtYearStartswith'],
        'created_at__year__istartswith': opts['createdAtYearIstartswith'],
        'created_at__year__endswith': opts['createdAtYearEndswith'],
        'created_at__year__iendswith': opts['createdAtYearIendswith'],
        'created_at__year__range': opts['createdAtYearRange'],
        'created_at__year__isnull': opts['createdAtYearIsnull'],
        'created_at__year__regex': opts['createdAtYearRegex'],
        'created_at__year__iregex': opts['createdAtYearIregex'],
        'created_at__year__contained_by': opts['createdAtYearContainedBy'],
        'created_at__month': opts['createdAtMonth'],
        'created_at__month__iexact': opts['createdAtMonthIexact'],
        'created_at__month__gt': opts['createdAtMonthGt'],
        'created_at__month__gte': opts['createdAtMonthGte'],
        'created_at__month__lt': opts['createdAtMonthLt'],
        'created_at__month__lte': opts['createdAtMonthLte'],
        'created_at__month__in': opts['createdAtMonthIn'],
        'created_at__month__contains': opts['createdAtMonthContains'],
        'created_at__month__icontains': opts['createdAtMonthIcontains'],
        'created_at__month__startswith': opts['createdAtMonthStartswith'],
        'created_at__month__istartswith': opts['createdAtMonthIstartswith'],
        'created_at__month__endswith': opts['createdAtMonthEndswith'],
        'created_at__month__iendswith': opts['createdAtMonthIendswith'],
        'created_at__month__range': opts['createdAtMonthRange'],
        'created_at__month__isnull': opts['createdAtMonthIsnull'],
        'created_at__month__regex': opts['createdAtMonthRegex'],
        'created_at__month__iregex': opts['createdAtMonthIregex'],
        'created_at__month__contained_by': opts['createdAtMonthContainedBy'],
        'created_at__day': opts['createdAtDay'],
        'created_at__day__iexact': opts['createdAtDayIexact'],
        'created_at__day__gt': opts['createdAtDayGt'],
        'created_at__day__gte': opts['createdAtDayGte'],
        'created_at__day__lt': opts['createdAtDayLt'],
        'created_at__day__lte': opts['createdAtDayLte'],
        'created_at__day__in': opts['createdAtDayIn'],
        'created_at__day__contains': opts['createdAtDayContains'],
        'created_at__day__icontains': opts['createdAtDayIcontains'],
        'created_at__day__startswith': opts['createdAtDayStartswith'],
        'created_at__day__istartswith': opts['createdAtDayIstartswith'],
        'created_at__day__endswith': opts['createdAtDayEndswith'],
        'created_at__day__iendswith': opts['createdAtDayIendswith'],
        'created_at__day__range': opts['createdAtDayRange'],
        'created_at__day__isnull': opts['createdAtDayIsnull'],
        'created_at__day__regex': opts['createdAtDayRegex'],
        'created_at__day__iregex': opts['createdAtDayIregex'],
        'created_at__day__contained_by': opts['createdAtDayContainedBy'],
        'created_at__week_day': opts['createdAtWeekDay'],
        'created_at__week_day__iexact': opts['createdAtWeekDayIexact'],
        'created_at__week_day__gt': opts['createdAtWeekDayGt'],
        'created_at__week_day__gte': opts['createdAtWeekDayGte'],
        'created_at__week_day__lt': opts['createdAtWeekDayLt'],
        'created_at__week_day__lte': opts['createdAtWeekDayLte'],
        'created_at__week_day__in': opts['createdAtWeekDayIn'],
        'created_at__week_day__contains': opts['createdAtWeekDayContains'],
        'created_at__week_day__icontains': opts['createdAtWeekDayIcontains'],
        'created_at__week_day__startswith': opts['createdAtWeekDayStartswith'],
        'created_at__week_day__istartswith': opts['createdAtWeekDayIstartswith'],
        'created_at__week_day__endswith': opts['createdAtWeekDayEndswith'],
        'created_at__week_day__iendswith': opts['createdAtWeekDayIendswith'],
        'created_at__week_day__range': opts['createdAtWeekDayRange'],
        'created_at__week_day__isnull': opts['createdAtWeekDayIsnull'],
        'created_at__week_day__regex': opts['createdAtWeekDayRegex'],
        'created_at__week_day__iregex': opts['createdAtWeekDayIregex'],
        'created_at__week_day__contained_by': opts['createdAtWeekDayContainedBy'],
        'created_at__week': opts['createdAtWeek'],
        'created_at__week__iexact': opts['createdAtWeekIexact'],
        'created_at__week__gt': opts['createdAtWeekGt'],
        'created_at__week__gte': opts['createdAtWeekGte'],
        'created_at__week__lt': opts['createdAtWeekLt'],
        'created_at__week__lte': opts['createdAtWeekLte'],
        'created_at__week__in': opts['createdAtWeekIn'],
        'created_at__week__contains': opts['createdAtWeekContains'],
        'created_at__week__icontains': opts['createdAtWeekIcontains'],
        'created_at__week__startswith': opts['createdAtWeekStartswith'],
        'created_at__week__istartswith': opts['createdAtWeekIstartswith'],
        'created_at__week__endswith': opts['createdAtWeekEndswith'],
        'created_at__week__iendswith': opts['createdAtWeekIendswith'],
        'created_at__week__range': opts['createdAtWeekRange'],
        'created_at__week__isnull': opts['createdAtWeekIsnull'],
        'created_at__week__regex': opts['createdAtWeekRegex'],
        'created_at__week__iregex': opts['createdAtWeekIregex'],
        'created_at__week__contained_by': opts['createdAtWeekContainedBy'],
        'created_at__iso_year': opts['createdAtIsoYear'],
        'created_at__iso_year__iexact': opts['createdAtIsoYearIexact'],
        'created_at__iso_year__gt': opts['createdAtIsoYearGt'],
        'created_at__iso_year__gte': opts['createdAtIsoYearGte'],
        'created_at__iso_year__lt': opts['createdAtIsoYearLt'],
        'created_at__iso_year__lte': opts['createdAtIsoYearLte'],
        'created_at__iso_year__in': opts['createdAtIsoYearIn'],
        'created_at__iso_year__contains': opts['createdAtIsoYearContains'],
        'created_at__iso_year__icontains': opts['createdAtIsoYearIcontains'],
        'created_at__iso_year__startswith': opts['createdAtIsoYearStartswith'],
        'created_at__iso_year__istartswith': opts['createdAtIsoYearIstartswith'],
        'created_at__iso_year__endswith': opts['createdAtIsoYearEndswith'],
        'created_at__iso_year__iendswith': opts['createdAtIsoYearIendswith'],
        'created_at__iso_year__range': opts['createdAtIsoYearRange'],
        'created_at__iso_year__isnull': opts['createdAtIsoYearIsnull'],
        'created_at__iso_year__regex': opts['createdAtIsoYearRegex'],
        'created_at__iso_year__iregex': opts['createdAtIsoYearIregex'],
        'created_at__iso_year__contained_by': opts['createdAtIsoYearContainedBy'],
        'created_at__quarter': opts['createdAtQuarter'],
        'created_at__quarter__iexact': opts['createdAtQuarterIexact'],
        'created_at__quarter__gt': opts['createdAtQuarterGt'],
        'created_at__quarter__gte': opts['createdAtQuarterGte'],
        'created_at__quarter__lt': opts['createdAtQuarterLt'],
        'created_at__quarter__lte': opts['createdAtQuarterLte'],
        'created_at__quarter__in': opts['createdAtQuarterIn'],
        'created_at__quarter__contains': opts['createdAtQuarterContains'],
        'created_at__quarter__icontains': opts['createdAtQuarterIcontains'],
        'created_at__quarter__startswith': opts['createdAtQuarterStartswith'],
        'created_at__quarter__istartswith': opts['createdAtQuarterIstartswith'],
        'created_at__quarter__endswith': opts['createdAtQuarterEndswith'],
        'created_at__quarter__iendswith': opts['createdAtQuarterIendswith'],
        'created_at__quarter__range': opts['createdAtQuarterRange'],
        'created_at__quarter__isnull': opts['createdAtQuarterIsnull'],
        'created_at__quarter__regex': opts['createdAtQuarterRegex'],
        'created_at__quarter__iregex': opts['createdAtQuarterIregex'],
        'created_at__quarter__contained_by': opts['createdAtQuarterContainedBy'],
        'created_at__contained_by': opts['createdAtContainedBy'],
        'created_at__hour': opts['createdAtHour'],
        'created_at__hour__iexact': opts['createdAtHourIexact'],
        'created_at__hour__gt': opts['createdAtHourGt'],
        'created_at__hour__gte': opts['createdAtHourGte'],
        'created_at__hour__lt': opts['createdAtHourLt'],
        'created_at__hour__lte': opts['createdAtHourLte'],
        'created_at__hour__in': opts['createdAtHourIn'],
        'created_at__hour__contains': opts['createdAtHourContains'],
        'created_at__hour__icontains': opts['createdAtHourIcontains'],
        'created_at__hour__startswith': opts['createdAtHourStartswith'],
        'created_at__hour__istartswith': opts['createdAtHourIstartswith'],
        'created_at__hour__endswith': opts['createdAtHourEndswith'],
        'created_at__hour__iendswith': opts['createdAtHourIendswith'],
        'created_at__hour__range': opts['createdAtHourRange'],
        'created_at__hour__isnull': opts['createdAtHourIsnull'],
        'created_at__hour__regex': opts['createdAtHourRegex'],
        'created_at__hour__iregex': opts['createdAtHourIregex'],
        'created_at__hour__contained_by': opts['createdAtHourContainedBy'],
        'created_at__minute': opts['createdAtMinute'],
        'created_at__minute__iexact': opts['createdAtMinuteIexact'],
        'created_at__minute__gt': opts['createdAtMinuteGt'],
        'created_at__minute__gte': opts['createdAtMinuteGte'],
        'created_at__minute__lt': opts['createdAtMinuteLt'],
        'created_at__minute__lte': opts['createdAtMinuteLte'],
        'created_at__minute__in': opts['createdAtMinuteIn'],
        'created_at__minute__contains': opts['createdAtMinuteContains'],
        'created_at__minute__icontains': opts['createdAtMinuteIcontains'],
        'created_at__minute__startswith': opts['createdAtMinuteStartswith'],
        'created_at__minute__istartswith': opts['createdAtMinuteIstartswith'],
        'created_at__minute__endswith': opts['createdAtMinuteEndswith'],
        'created_at__minute__iendswith': opts['createdAtMinuteIendswith'],
        'created_at__minute__range': opts['createdAtMinuteRange'],
        'created_at__minute__isnull': opts['createdAtMinuteIsnull'],
        'created_at__minute__regex': opts['createdAtMinuteRegex'],
        'created_at__minute__iregex': opts['createdAtMinuteIregex'],
        'created_at__minute__contained_by': opts['createdAtMinuteContainedBy'],
        'created_at__second': opts['createdAtSecond'],
        'created_at__second__iexact': opts['createdAtSecondIexact'],
        'created_at__second__gt': opts['createdAtSecondGt'],
        'created_at__second__gte': opts['createdAtSecondGte'],
        'created_at__second__lt': opts['createdAtSecondLt'],
        'created_at__second__lte': opts['createdAtSecondLte'],
        'created_at__second__in': opts['createdAtSecondIn'],
        'created_at__second__contains': opts['createdAtSecondContains'],
        'created_at__second__icontains': opts['createdAtSecondIcontains'],
        'created_at__second__startswith': opts['createdAtSecondStartswith'],
        'created_at__second__istartswith': opts['createdAtSecondIstartswith'],
        'created_at__second__endswith': opts['createdAtSecondEndswith'],
        'created_at__second__iendswith': opts['createdAtSecondIendswith'],
        'created_at__second__range': opts['createdAtSecondRange'],
        'created_at__second__isnull': opts['createdAtSecondIsnull'],
        'created_at__second__regex': opts['createdAtSecondRegex'],
        'created_at__second__iregex': opts['createdAtSecondIregex'],
        'created_at__second__contained_by': opts['createdAtSecondContainedBy'],
        'created_at__date': opts['createdAtDate'],
        'created_at__date__iexact': opts['createdAtDateIexact'],
        'created_at__date__gt': opts['createdAtDateGt'],
        'created_at__date__gte': opts['createdAtDateGte'],
        'created_at__date__lt': opts['createdAtDateLt'],
        'created_at__date__lte': opts['createdAtDateLte'],
        'created_at__date__in': opts['createdAtDateIn'],
        'created_at__date__contains': opts['createdAtDateContains'],
        'created_at__date__icontains': opts['createdAtDateIcontains'],
        'created_at__date__startswith': opts['createdAtDateStartswith'],
        'created_at__date__istartswith': opts['createdAtDateIstartswith'],
        'created_at__date__endswith': opts['createdAtDateEndswith'],
        'created_at__date__iendswith': opts['createdAtDateIendswith'],
        'created_at__date__range': opts['createdAtDateRange'],
        'created_at__date__isnull': opts['createdAtDateIsnull'],
        'created_at__date__regex': opts['createdAtDateRegex'],
        'created_at__date__iregex': opts['createdAtDateIregex'],
        'created_at__date__year': opts['createdAtDateYear'],
        'created_at__date__year__iexact': opts['createdAtDateYearIexact'],
        'created_at__date__year__gt': opts['createdAtDateYearGt'],
        'created_at__date__year__gte': opts['createdAtDateYearGte'],
        'created_at__date__year__lt': opts['createdAtDateYearLt'],
        'created_at__date__year__lte': opts['createdAtDateYearLte'],
        'created_at__date__year__in': opts['createdAtDateYearIn'],
        'created_at__date__year__contains': opts['createdAtDateYearContains'],
        'created_at__date__year__icontains': opts['createdAtDateYearIcontains'],
        'created_at__date__year__startswith': opts['createdAtDateYearStartswith'],
        'created_at__date__year__istartswith': opts['createdAtDateYearIstartswith'],
        'created_at__date__year__endswith': opts['createdAtDateYearEndswith'],
        'created_at__date__year__iendswith': opts['createdAtDateYearIendswith'],
        'created_at__date__year__range': opts['createdAtDateYearRange'],
        'created_at__date__year__isnull': opts['createdAtDateYearIsnull'],
        'created_at__date__year__regex': opts['createdAtDateYearRegex'],
        'created_at__date__year__iregex': opts['createdAtDateYearIregex'],
        'created_at__date__year__contained_by': opts['createdAtDateYearContainedBy'],
        'created_at__date__month': opts['createdAtDateMonth'],
        'created_at__date__month__iexact': opts['createdAtDateMonthIexact'],
        'created_at__date__month__gt': opts['createdAtDateMonthGt'],
        'created_at__date__month__gte': opts['createdAtDateMonthGte'],
        'created_at__date__month__lt': opts['createdAtDateMonthLt'],
        'created_at__date__month__lte': opts['createdAtDateMonthLte'],
        'created_at__date__month__in': opts['createdAtDateMonthIn'],
        'created_at__date__month__contains': opts['createdAtDateMonthContains'],
        'created_at__date__month__icontains': opts['createdAtDateMonthIcontains'],
        'created_at__date__month__startswith': opts['createdAtDateMonthStartswith'],
        'created_at__date__month__istartswith': opts['createdAtDateMonthIstartswith'],
        'created_at__date__month__endswith': opts['createdAtDateMonthEndswith'],
        'created_at__date__month__iendswith': opts['createdAtDateMonthIendswith'],
        'created_at__date__month__range': opts['createdAtDateMonthRange'],
        'created_at__date__month__isnull': opts['createdAtDateMonthIsnull'],
        'created_at__date__month__regex': opts['createdAtDateMonthRegex'],
        'created_at__date__month__iregex': opts['createdAtDateMonthIregex'],
        'created_at__date__month__contained_by': opts['createdAtDateMonthContainedBy'],
        'created_at__date__day': opts['createdAtDateDay'],
        'created_at__date__day__iexact': opts['createdAtDateDayIexact'],
        'created_at__date__day__gt': opts['createdAtDateDayGt'],
        'created_at__date__day__gte': opts['createdAtDateDayGte'],
        'created_at__date__day__lt': opts['createdAtDateDayLt'],
        'created_at__date__day__lte': opts['createdAtDateDayLte'],
        'created_at__date__day__in': opts['createdAtDateDayIn'],
        'created_at__date__day__contains': opts['createdAtDateDayContains'],
        'created_at__date__day__icontains': opts['createdAtDateDayIcontains'],
        'created_at__date__day__startswith': opts['createdAtDateDayStartswith'],
        'created_at__date__day__istartswith': opts['createdAtDateDayIstartswith'],
        'created_at__date__day__endswith': opts['createdAtDateDayEndswith'],
        'created_at__date__day__iendswith': opts['createdAtDateDayIendswith'],
        'created_at__date__day__range': opts['createdAtDateDayRange'],
        'created_at__date__day__isnull': opts['createdAtDateDayIsnull'],
        'created_at__date__day__regex': opts['createdAtDateDayRegex'],
        'created_at__date__day__iregex': opts['createdAtDateDayIregex'],
        'created_at__date__day__contained_by': opts['createdAtDateDayContainedBy'],
        'created_at__date__week_day': opts['createdAtDateWeekDay'],
        'created_at__date__week_day__iexact': opts['createdAtDateWeekDayIexact'],
        'created_at__date__week_day__gt': opts['createdAtDateWeekDayGt'],
        'created_at__date__week_day__gte': opts['createdAtDateWeekDayGte'],
        'created_at__date__week_day__lt': opts['createdAtDateWeekDayLt'],
        'created_at__date__week_day__lte': opts['createdAtDateWeekDayLte'],
        'created_at__date__week_day__in': opts['createdAtDateWeekDayIn'],
        'created_at__date__week_day__contains': opts['createdAtDateWeekDayContains'],
        'created_at__date__week_day__icontains': opts['createdAtDateWeekDayIcontains'],
        'created_at__date__week_day__startswith': opts['createdAtDateWeekDayStartswith'],
        'created_at__date__week_day__istartswith': opts['createdAtDateWeekDayIstartswith'],
        'created_at__date__week_day__endswith': opts['createdAtDateWeekDayEndswith'],
        'created_at__date__week_day__iendswith': opts['createdAtDateWeekDayIendswith'],
        'created_at__date__week_day__range': opts['createdAtDateWeekDayRange'],
        'created_at__date__week_day__isnull': opts['createdAtDateWeekDayIsnull'],
        'created_at__date__week_day__regex': opts['createdAtDateWeekDayRegex'],
        'created_at__date__week_day__iregex': opts['createdAtDateWeekDayIregex'],
        'created_at__date__week_day__contained_by': opts['createdAtDateWeekDayContainedBy'],
        'created_at__date__week': opts['createdAtDateWeek'],
        'created_at__date__week__iexact': opts['createdAtDateWeekIexact'],
        'created_at__date__week__gt': opts['createdAtDateWeekGt'],
        'created_at__date__week__gte': opts['createdAtDateWeekGte'],
        'created_at__date__week__lt': opts['createdAtDateWeekLt'],
        'created_at__date__week__lte': opts['createdAtDateWeekLte'],
        'created_at__date__week__in': opts['createdAtDateWeekIn'],
        'created_at__date__week__contains': opts['createdAtDateWeekContains'],
        'created_at__date__week__icontains': opts['createdAtDateWeekIcontains'],
        'created_at__date__week__startswith': opts['createdAtDateWeekStartswith'],
        'created_at__date__week__istartswith': opts['createdAtDateWeekIstartswith'],
        'created_at__date__week__endswith': opts['createdAtDateWeekEndswith'],
        'created_at__date__week__iendswith': opts['createdAtDateWeekIendswith'],
        'created_at__date__week__range': opts['createdAtDateWeekRange'],
        'created_at__date__week__isnull': opts['createdAtDateWeekIsnull'],
        'created_at__date__week__regex': opts['createdAtDateWeekRegex'],
        'created_at__date__week__iregex': opts['createdAtDateWeekIregex'],
        'created_at__date__week__contained_by': opts['createdAtDateWeekContainedBy'],
        'created_at__date__iso_year': opts['createdAtDateIsoYear'],
        'created_at__date__iso_year__iexact': opts['createdAtDateIsoYearIexact'],
        'created_at__date__iso_year__gt': opts['createdAtDateIsoYearGt'],
        'created_at__date__iso_year__gte': opts['createdAtDateIsoYearGte'],
        'created_at__date__iso_year__lt': opts['createdAtDateIsoYearLt'],
        'created_at__date__iso_year__lte': opts['createdAtDateIsoYearLte'],
        'created_at__date__iso_year__in': opts['createdAtDateIsoYearIn'],
        'created_at__date__iso_year__contains': opts['createdAtDateIsoYearContains'],
        'created_at__date__iso_year__icontains': opts['createdAtDateIsoYearIcontains'],
        'created_at__date__iso_year__startswith': opts['createdAtDateIsoYearStartswith'],
        'created_at__date__iso_year__istartswith': opts['createdAtDateIsoYearIstartswith'],
        'created_at__date__iso_year__endswith': opts['createdAtDateIsoYearEndswith'],
        'created_at__date__iso_year__iendswith': opts['createdAtDateIsoYearIendswith'],
        'created_at__date__iso_year__range': opts['createdAtDateIsoYearRange'],
        'created_at__date__iso_year__isnull': opts['createdAtDateIsoYearIsnull'],
        'created_at__date__iso_year__regex': opts['createdAtDateIsoYearRegex'],
        'created_at__date__iso_year__iregex': opts['createdAtDateIsoYearIregex'],
        'created_at__date__iso_year__contained_by': opts['createdAtDateIsoYearContainedBy'],
        'created_at__date__quarter': opts['createdAtDateQuarter'],
        'created_at__date__quarter__iexact': opts['createdAtDateQuarterIexact'],
        'created_at__date__quarter__gt': opts['createdAtDateQuarterGt'],
        'created_at__date__quarter__gte': opts['createdAtDateQuarterGte'],
        'created_at__date__quarter__lt': opts['createdAtDateQuarterLt'],
        'created_at__date__quarter__lte': opts['createdAtDateQuarterLte'],
        'created_at__date__quarter__in': opts['createdAtDateQuarterIn'],
        'created_at__date__quarter__contains': opts['createdAtDateQuarterContains'],
        'created_at__date__quarter__icontains': opts['createdAtDateQuarterIcontains'],
        'created_at__date__quarter__startswith': opts['createdAtDateQuarterStartswith'],
        'created_at__date__quarter__istartswith': opts['createdAtDateQuarterIstartswith'],
        'created_at__date__quarter__endswith': opts['createdAtDateQuarterEndswith'],
        'created_at__date__quarter__iendswith': opts['createdAtDateQuarterIendswith'],
        'created_at__date__quarter__range': opts['createdAtDateQuarterRange'],
        'created_at__date__quarter__isnull': opts['createdAtDateQuarterIsnull'],
        'created_at__date__quarter__regex': opts['createdAtDateQuarterRegex'],
        'created_at__date__quarter__iregex': opts['createdAtDateQuarterIregex'],
        'created_at__date__quarter__contained_by': opts['createdAtDateQuarterContainedBy'],
        'created_at__date__contained_by': opts['createdAtDateContainedBy'],
        'created_at__time': opts['createdAtTime'],
        'created_at__time__iexact': opts['createdAtTimeIexact'],
        'created_at__time__gt': opts['createdAtTimeGt'],
        'created_at__time__gte': opts['createdAtTimeGte'],
        'created_at__time__lt': opts['createdAtTimeLt'],
        'created_at__time__lte': opts['createdAtTimeLte'],
        'created_at__time__in': opts['createdAtTimeIn'],
        'created_at__time__contains': opts['createdAtTimeContains'],
        'created_at__time__icontains': opts['createdAtTimeIcontains'],
        'created_at__time__startswith': opts['createdAtTimeStartswith'],
        'created_at__time__istartswith': opts['createdAtTimeIstartswith'],
        'created_at__time__endswith': opts['createdAtTimeEndswith'],
        'created_at__time__iendswith': opts['createdAtTimeIendswith'],
        'created_at__time__range': opts['createdAtTimeRange'],
        'created_at__time__isnull': opts['createdAtTimeIsnull'],
        'created_at__time__regex': opts['createdAtTimeRegex'],
        'created_at__time__iregex': opts['createdAtTimeIregex'],
        'created_at__time__hour': opts['createdAtTimeHour'],
        'created_at__time__hour__iexact': opts['createdAtTimeHourIexact'],
        'created_at__time__hour__gt': opts['createdAtTimeHourGt'],
        'created_at__time__hour__gte': opts['createdAtTimeHourGte'],
        'created_at__time__hour__lt': opts['createdAtTimeHourLt'],
        'created_at__time__hour__lte': opts['createdAtTimeHourLte'],
        'created_at__time__hour__in': opts['createdAtTimeHourIn'],
        'created_at__time__hour__contains': opts['createdAtTimeHourContains'],
        'created_at__time__hour__icontains': opts['createdAtTimeHourIcontains'],
        'created_at__time__hour__startswith': opts['createdAtTimeHourStartswith'],
        'created_at__time__hour__istartswith': opts['createdAtTimeHourIstartswith'],
        'created_at__time__hour__endswith': opts['createdAtTimeHourEndswith'],
        'created_at__time__hour__iendswith': opts['createdAtTimeHourIendswith'],
        'created_at__time__hour__range': opts['createdAtTimeHourRange'],
        'created_at__time__hour__isnull': opts['createdAtTimeHourIsnull'],
        'created_at__time__hour__regex': opts['createdAtTimeHourRegex'],
        'created_at__time__hour__iregex': opts['createdAtTimeHourIregex'],
        'created_at__time__hour__contained_by': opts['createdAtTimeHourContainedBy'],
        'created_at__time__minute': opts['createdAtTimeMinute'],
        'created_at__time__minute__iexact': opts['createdAtTimeMinuteIexact'],
        'created_at__time__minute__gt': opts['createdAtTimeMinuteGt'],
        'created_at__time__minute__gte': opts['createdAtTimeMinuteGte'],
        'created_at__time__minute__lt': opts['createdAtTimeMinuteLt'],
        'created_at__time__minute__lte': opts['createdAtTimeMinuteLte'],
        'created_at__time__minute__in': opts['createdAtTimeMinuteIn'],
        'created_at__time__minute__contains': opts['createdAtTimeMinuteContains'],
        'created_at__time__minute__icontains': opts['createdAtTimeMinuteIcontains'],
        'created_at__time__minute__startswith': opts['createdAtTimeMinuteStartswith'],
        'created_at__time__minute__istartswith': opts['createdAtTimeMinuteIstartswith'],
        'created_at__time__minute__endswith': opts['createdAtTimeMinuteEndswith'],
        'created_at__time__minute__iendswith': opts['createdAtTimeMinuteIendswith'],
        'created_at__time__minute__range': opts['createdAtTimeMinuteRange'],
        'created_at__time__minute__isnull': opts['createdAtTimeMinuteIsnull'],
        'created_at__time__minute__regex': opts['createdAtTimeMinuteRegex'],
        'created_at__time__minute__iregex': opts['createdAtTimeMinuteIregex'],
        'created_at__time__minute__contained_by': opts['createdAtTimeMinuteContainedBy'],
        'created_at__time__second': opts['createdAtTimeSecond'],
        'created_at__time__second__iexact': opts['createdAtTimeSecondIexact'],
        'created_at__time__second__gt': opts['createdAtTimeSecondGt'],
        'created_at__time__second__gte': opts['createdAtTimeSecondGte'],
        'created_at__time__second__lt': opts['createdAtTimeSecondLt'],
        'created_at__time__second__lte': opts['createdAtTimeSecondLte'],
        'created_at__time__second__in': opts['createdAtTimeSecondIn'],
        'created_at__time__second__contains': opts['createdAtTimeSecondContains'],
        'created_at__time__second__icontains': opts['createdAtTimeSecondIcontains'],
        'created_at__time__second__startswith': opts['createdAtTimeSecondStartswith'],
        'created_at__time__second__istartswith': opts['createdAtTimeSecondIstartswith'],
        'created_at__time__second__endswith': opts['createdAtTimeSecondEndswith'],
        'created_at__time__second__iendswith': opts['createdAtTimeSecondIendswith'],
        'created_at__time__second__range': opts['createdAtTimeSecondRange'],
        'created_at__time__second__isnull': opts['createdAtTimeSecondIsnull'],
        'created_at__time__second__regex': opts['createdAtTimeSecondRegex'],
        'created_at__time__second__iregex': opts['createdAtTimeSecondIregex'],
        'created_at__time__second__contained_by': opts['createdAtTimeSecondContainedBy'],
        'ordering': opts['ordering'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/teams/{company_id}/comments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCommentsRead operation.
     * @callback module:api/TeamsApi~teamsCommentsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IndicatorComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/TeamsApi~teamsCommentsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IndicatorComment}
     */
    this.teamsCommentsRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling teamsCommentsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsCommentsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IndicatorComment;

      return this.apiClient.callApi(
        '/teams/{company_id}/comments/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsContactsCreate operation.
     * @callback module:api/TeamsApi~teamsContactsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:api/TeamsApi~teamsContactsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.teamsContactsCreate = function(companyId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling teamsContactsCreate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/teams/{company_id}/contacts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsContactsDelete operation.
     * @callback module:api/TeamsApi~teamsContactsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/TeamsApi~teamsContactsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.teamsContactsDelete = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling teamsContactsDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsContactsDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/teams/{company_id}/contacts/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsContactsList operation.
     * @callback module:api/TeamsApi~teamsContactsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/TeamsApi~teamsContactsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.teamsContactsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling teamsContactsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/teams/{company_id}/contacts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsContactsPartialUpdate operation.
     * @callback module:api/TeamsApi~teamsContactsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/TeamsApi~teamsContactsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.teamsContactsPartialUpdate = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling teamsContactsPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsContactsPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/teams/{company_id}/contacts/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsContactsRead operation.
     * @callback module:api/TeamsApi~teamsContactsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/TeamsApi~teamsContactsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.teamsContactsRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling teamsContactsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsContactsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/teams/{company_id}/contacts/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsContactsUpdate operation.
     * @callback module:api/TeamsApi~teamsContactsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/TeamsApi~teamsContactsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.teamsContactsUpdate = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling teamsContactsUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsContactsUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/teams/{company_id}/contacts/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
