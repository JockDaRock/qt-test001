/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AboutMeSerializerV1', 'model/ApiIndicatorSerializer', 'model/Collection', 'model/Comment', 'model/CommentSerializer', 'model/InlineResponse20013', 'model/InlineResponse20014', 'model/InlineResponse20015', 'model/InlineResponse20016', 'model/InlineResponse20017', 'model/InlineResponse20018', 'model/InlineResponse20019', 'model/InlineResponse20020', 'model/InlineResponse20021', 'model/MarketplacePolymorphic', 'model/NetworkSubnet', 'model/Organizations', 'model/SLACreation', 'model/Store', 'model/SupportedDevice', 'model/SuppressionsAndEscalations', 'model/TeamHealth', 'model/TeamMfaSettings'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AboutMeSerializerV1'), require('../model/ApiIndicatorSerializer'), require('../model/Collection'), require('../model/Comment'), require('../model/CommentSerializer'), require('../model/InlineResponse20013'), require('../model/InlineResponse20014'), require('../model/InlineResponse20015'), require('../model/InlineResponse20016'), require('../model/InlineResponse20017'), require('../model/InlineResponse20018'), require('../model/InlineResponse20019'), require('../model/InlineResponse20020'), require('../model/InlineResponse20021'), require('../model/MarketplacePolymorphic'), require('../model/NetworkSubnet'), require('../model/Organizations'), require('../model/SLACreation'), require('../model/Store'), require('../model/SupportedDevice'), require('../model/SuppressionsAndEscalations'), require('../model/TeamHealth'), require('../model/TeamMfaSettings'));
  } else {
    // Browser globals (root is window)
    if (!root.PerchApi) {
      root.PerchApi = {};
    }
    root.PerchApi.V1Api = factory(root.PerchApi.ApiClient, root.PerchApi.AboutMeSerializerV1, root.PerchApi.ApiIndicatorSerializer, root.PerchApi.Collection, root.PerchApi.Comment, root.PerchApi.CommentSerializer, root.PerchApi.InlineResponse20013, root.PerchApi.InlineResponse20014, root.PerchApi.InlineResponse20015, root.PerchApi.InlineResponse20016, root.PerchApi.InlineResponse20017, root.PerchApi.InlineResponse20018, root.PerchApi.InlineResponse20019, root.PerchApi.InlineResponse20020, root.PerchApi.InlineResponse20021, root.PerchApi.MarketplacePolymorphic, root.PerchApi.NetworkSubnet, root.PerchApi.Organizations, root.PerchApi.SLACreation, root.PerchApi.Store, root.PerchApi.SupportedDevice, root.PerchApi.SuppressionsAndEscalations, root.PerchApi.TeamHealth, root.PerchApi.TeamMfaSettings);
  }
}(this, function(ApiClient, AboutMeSerializerV1, ApiIndicatorSerializer, Collection, Comment, CommentSerializer, InlineResponse20013, InlineResponse20014, InlineResponse20015, InlineResponse20016, InlineResponse20017, InlineResponse20018, InlineResponse20019, InlineResponse20020, InlineResponse20021, MarketplacePolymorphic, NetworkSubnet, Organizations, SLACreation, Store, SupportedDevice, SuppressionsAndEscalations, TeamHealth, TeamMfaSettings) {
  'use strict';

  /**
   * V1 service.
   * @module api/V1Api
   * @version v1
   */

  /**
   * Constructs a new V1Api. 
   * @alias module:api/V1Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the v1AlertGroupingsByIpsCreate operation.
     * @callback module:api/V1Api~v1AlertGroupingsByIpsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/V1Api~v1AlertGroupingsByIpsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1AlertGroupingsByIpsCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/alert-groupings-by-ips', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AlertGroupingsByIpsDelete operation.
     * @callback module:api/V1Api~v1AlertGroupingsByIpsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} groupingId 
     * @param {module:api/V1Api~v1AlertGroupingsByIpsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1AlertGroupingsByIpsDelete = function(groupingId, callback) {
      var postBody = null;

      // verify the required parameter 'groupingId' is set
      if (groupingId === undefined || groupingId === null) {
        throw new Error("Missing the required parameter 'groupingId' when calling v1AlertGroupingsByIpsDelete");
      }


      var pathParams = {
        'grouping_id': groupingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/alert-groupings-by-ips/{grouping_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AlertGroupingsByIpsList operation.
     * @callback module:api/V1Api~v1AlertGroupingsByIpsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1AlertGroupingsByIpsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1AlertGroupingsByIpsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/alert-groupings-by-ips', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AlertGroupingsByIpsPartialUpdate operation.
     * @callback module:api/V1Api~v1AlertGroupingsByIpsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} groupingId 
     * @param {module:api/V1Api~v1AlertGroupingsByIpsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1AlertGroupingsByIpsPartialUpdate = function(groupingId, callback) {
      var postBody = null;

      // verify the required parameter 'groupingId' is set
      if (groupingId === undefined || groupingId === null) {
        throw new Error("Missing the required parameter 'groupingId' when calling v1AlertGroupingsByIpsPartialUpdate");
      }


      var pathParams = {
        'grouping_id': groupingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/alert-groupings-by-ips/{grouping_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AlertGroupingsByIpsRead operation.
     * @callback module:api/V1Api~v1AlertGroupingsByIpsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} groupingId 
     * @param {module:api/V1Api~v1AlertGroupingsByIpsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1AlertGroupingsByIpsRead = function(groupingId, callback) {
      var postBody = null;

      // verify the required parameter 'groupingId' is set
      if (groupingId === undefined || groupingId === null) {
        throw new Error("Missing the required parameter 'groupingId' when calling v1AlertGroupingsByIpsRead");
      }


      var pathParams = {
        'grouping_id': groupingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/alert-groupings-by-ips/{grouping_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AlertGroupingsByIpsUpdate operation.
     * @callback module:api/V1Api~v1AlertGroupingsByIpsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} groupingId 
     * @param {module:api/V1Api~v1AlertGroupingsByIpsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1AlertGroupingsByIpsUpdate = function(groupingId, callback) {
      var postBody = null;

      // verify the required parameter 'groupingId' is set
      if (groupingId === undefined || groupingId === null) {
        throw new Error("Missing the required parameter 'groupingId' when calling v1AlertGroupingsByIpsUpdate");
      }


      var pathParams = {
        'grouping_id': groupingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/alert-groupings-by-ips/{grouping_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AlertsSuppressionsCreate operation.
     * @callback module:api/V1Api~v1AlertsSuppressionsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/V1Api~v1AlertsSuppressionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1AlertsSuppressionsCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/alerts/suppressions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AlertsSuppressionsDelete operation.
     * @callback module:api/V1Api~v1AlertsSuppressionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1AlertsSuppressionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1AlertsSuppressionsDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1AlertsSuppressionsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/alerts/suppressions/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AlertsSuppressionsList operation.
     * @callback module:api/V1Api~v1AlertsSuppressionsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.indicatorId 
     * @param {String} opts.scope 
     * @param {String} opts.reason 
     * @param {String} opts.reasonDetail 
     * @param {String} opts.teamId 
     * @param {String} opts.suppressedAtGte 
     * @param {String} opts.suppressedAtLte 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {String} opts.search A search term.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1AlertsSuppressionsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1AlertsSuppressionsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'indicator_id': opts['indicatorId'],
        'scope': opts['scope'],
        'reason': opts['reason'],
        'reason_detail': opts['reasonDetail'],
        'team_id': opts['teamId'],
        'suppressed_at__gte': opts['suppressedAtGte'],
        'suppressed_at__lte': opts['suppressedAtLte'],
        'ordering': opts['ordering'],
        'search': opts['search'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/alerts/suppressions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AlertsSuppressionsPartialUpdate operation.
     * @callback module:api/V1Api~v1AlertsSuppressionsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1AlertsSuppressionsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1AlertsSuppressionsPartialUpdate = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1AlertsSuppressionsPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/alerts/suppressions/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AlertsSuppressionsRead operation.
     * @callback module:api/V1Api~v1AlertsSuppressionsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1AlertsSuppressionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1AlertsSuppressionsRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1AlertsSuppressionsRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/alerts/suppressions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AlertsSuppressionsUpdate operation.
     * @callback module:api/V1Api~v1AlertsSuppressionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1AlertsSuppressionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1AlertsSuppressionsUpdate = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1AlertsSuppressionsUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/alerts/suppressions/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyDevicesCreate operation.
     * @callback module:api/V1Api~v1CompanyDevicesCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:api/V1Api~v1CompanyDevicesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyDevicesCreate = function(companyId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyDevicesCreate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/devices', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyDevicesDelete operation.
     * @callback module:api/V1Api~v1CompanyDevicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/V1Api~v1CompanyDevicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyDevicesDelete = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyDevicesDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CompanyDevicesDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/devices/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyDevicesList operation.
     * @callback module:api/V1Api~v1CompanyDevicesListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1CompanyDevicesListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyDevicesList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyDevicesList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/devices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyDevicesPartialUpdate operation.
     * @callback module:api/V1Api~v1CompanyDevicesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/V1Api~v1CompanyDevicesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyDevicesPartialUpdate = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyDevicesPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CompanyDevicesPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/devices/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyDevicesRead operation.
     * @callback module:api/V1Api~v1CompanyDevicesReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/V1Api~v1CompanyDevicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyDevicesRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyDevicesRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CompanyDevicesRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/devices/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyDevicesUpdate operation.
     * @callback module:api/V1Api~v1CompanyDevicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/V1Api~v1CompanyDevicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyDevicesUpdate = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyDevicesUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CompanyDevicesUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/devices/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyIndicatorsList operation.
     * @callback module:api/V1Api~v1CompanyIndicatorsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1CompanyIndicatorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20013}
     */
    this.v1CompanyIndicatorsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyIndicatorsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/indicators', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyIndicatorsRead operation.
     * @callback module:api/V1Api~v1CompanyIndicatorsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiIndicatorSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/V1Api~v1CompanyIndicatorsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiIndicatorSerializer}
     */
    this.v1CompanyIndicatorsRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyIndicatorsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CompanyIndicatorsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiIndicatorSerializer;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/indicators/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyIntegrationServiceCreate operation.
     * @callback module:api/V1Api~v1CompanyIntegrationServiceCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pass requests to the integration service
     * @param {String} companyId 
     * @param {String} route 
     * @param {module:api/V1Api~v1CompanyIntegrationServiceCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyIntegrationServiceCreate = function(companyId, route, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyIntegrationServiceCreate");
      }

      // verify the required parameter 'route' is set
      if (route === undefined || route === null) {
        throw new Error("Missing the required parameter 'route' when calling v1CompanyIntegrationServiceCreate");
      }


      var pathParams = {
        'company_id': companyId,
        'route': route
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/integration-service/{route}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyIntegrationServiceRead operation.
     * @callback module:api/V1Api~v1CompanyIntegrationServiceReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pass requests to the integration service
     * @param {String} companyId 
     * @param {String} route 
     * @param {module:api/V1Api~v1CompanyIntegrationServiceReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyIntegrationServiceRead = function(companyId, route, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyIntegrationServiceRead");
      }

      // verify the required parameter 'route' is set
      if (route === undefined || route === null) {
        throw new Error("Missing the required parameter 'route' when calling v1CompanyIntegrationServiceRead");
      }


      var pathParams = {
        'company_id': companyId,
        'route': route
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/integration-service/{route}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyLoginsList operation.
     * @callback module:api/V1Api~v1CompanyLoginsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1CompanyLoginsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyLoginsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyLoginsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['text/csv', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/logins', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyMemberDelete operation.
     * @callback module:api/V1Api~v1CompanyMemberDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:api/V1Api~v1CompanyMemberDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyMemberDelete = function(companyId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyMemberDelete");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1CompanyMemberDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/member/{user_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyMemberList operation.
     * @callback module:api/V1Api~v1CompanyMemberListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.search A search term.
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1CompanyMemberListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyMemberList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyMemberList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'search': opts['search'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/member', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyMemberPartialUpdate operation.
     * @callback module:api/V1Api~v1CompanyMemberPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:api/V1Api~v1CompanyMemberPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyMemberPartialUpdate = function(companyId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyMemberPartialUpdate");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1CompanyMemberPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/member/{user_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyMemberRead operation.
     * @callback module:api/V1Api~v1CompanyMemberReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:api/V1Api~v1CompanyMemberReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyMemberRead = function(companyId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyMemberRead");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1CompanyMemberRead");
      }


      var pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/member/{user_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyMemberSensorsDelete operation.
     * @callback module:api/V1Api~v1CompanyMemberSensorsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:api/V1Api~v1CompanyMemberSensorsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyMemberSensorsDelete = function(companyId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyMemberSensorsDelete");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1CompanyMemberSensorsDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/member/sensors/{user_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyMemberSensorsList operation.
     * @callback module:api/V1Api~v1CompanyMemberSensorsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.search A search term.
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1CompanyMemberSensorsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyMemberSensorsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyMemberSensorsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'search': opts['search'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/member/sensors', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyMemberSensorsPartialUpdate operation.
     * @callback module:api/V1Api~v1CompanyMemberSensorsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:api/V1Api~v1CompanyMemberSensorsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyMemberSensorsPartialUpdate = function(companyId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyMemberSensorsPartialUpdate");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1CompanyMemberSensorsPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/member/sensors/{user_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyMemberSensorsRead operation.
     * @callback module:api/V1Api~v1CompanyMemberSensorsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:api/V1Api~v1CompanyMemberSensorsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyMemberSensorsRead = function(companyId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyMemberSensorsRead");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1CompanyMemberSensorsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/member/sensors/{user_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyMemberSensorsUpdate operation.
     * @callback module:api/V1Api~v1CompanyMemberSensorsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:api/V1Api~v1CompanyMemberSensorsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyMemberSensorsUpdate = function(companyId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyMemberSensorsUpdate");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1CompanyMemberSensorsUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/member/sensors/{user_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyMemberUpdate operation.
     * @callback module:api/V1Api~v1CompanyMemberUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:api/V1Api~v1CompanyMemberUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanyMemberUpdate = function(companyId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyMemberUpdate");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1CompanyMemberUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/member/{user_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyMfaSettingsPartialUpdate operation.
     * @callback module:api/V1Api~v1CompanyMfaSettingsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMfaSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/TeamMfaSettings} data 
     * @param {module:api/V1Api~v1CompanyMfaSettingsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMfaSettings}
     */
    this.v1CompanyMfaSettingsPartialUpdate = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyMfaSettingsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1CompanyMfaSettingsPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TeamMfaSettings;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/mfa-settings', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyMfaSettingsRead operation.
     * @callback module:api/V1Api~v1CompanyMfaSettingsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMfaSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:api/V1Api~v1CompanyMfaSettingsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMfaSettings}
     */
    this.v1CompanyMfaSettingsRead = function(companyId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyMfaSettingsRead");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TeamMfaSettings;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/mfa-settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanySubnetsCreate operation.
     * @callback module:api/V1Api~v1CompanySubnetsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkSubnet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/NetworkSubnet} data 
     * @param {module:api/V1Api~v1CompanySubnetsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkSubnet}
     */
    this.v1CompanySubnetsCreate = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanySubnetsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1CompanySubnetsCreate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkSubnet;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/subnets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanySubnetsDelete operation.
     * @callback module:api/V1Api~v1CompanySubnetsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/V1Api~v1CompanySubnetsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1CompanySubnetsDelete = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanySubnetsDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CompanySubnetsDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/subnets/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanySubnetsList operation.
     * @callback module:api/V1Api~v1CompanySubnetsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {String} opts.search A search term.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1CompanySubnetsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20014}
     */
    this.v1CompanySubnetsList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanySubnetsList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'search': opts['search'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/subnets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanySubnetsPartialUpdate operation.
     * @callback module:api/V1Api~v1CompanySubnetsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkSubnet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/NetworkSubnet} data 
     * @param {module:api/V1Api~v1CompanySubnetsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkSubnet}
     */
    this.v1CompanySubnetsPartialUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanySubnetsPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CompanySubnetsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1CompanySubnetsPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkSubnet;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/subnets/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanySubnetsRead operation.
     * @callback module:api/V1Api~v1CompanySubnetsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkSubnet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/V1Api~v1CompanySubnetsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkSubnet}
     */
    this.v1CompanySubnetsRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanySubnetsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CompanySubnetsRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkSubnet;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/subnets/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanySubnetsUpdate operation.
     * @callback module:api/V1Api~v1CompanySubnetsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkSubnet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/NetworkSubnet} data 
     * @param {module:api/V1Api~v1CompanySubnetsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkSubnet}
     */
    this.v1CompanySubnetsUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanySubnetsUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CompanySubnetsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1CompanySubnetsUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkSubnet;

      return this.apiClient.callApi(
        '/v1/company/{company_id}/subnets/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EscalationsCreate operation.
     * @callback module:api/V1Api~v1EscalationsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/V1Api~v1EscalationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1EscalationsCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/escalations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EscalationsDelete operation.
     * @callback module:api/V1Api~v1EscalationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} securityEventId 
     * @param {module:api/V1Api~v1EscalationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1EscalationsDelete = function(securityEventId, callback) {
      var postBody = null;

      // verify the required parameter 'securityEventId' is set
      if (securityEventId === undefined || securityEventId === null) {
        throw new Error("Missing the required parameter 'securityEventId' when calling v1EscalationsDelete");
      }


      var pathParams = {
        'security_event_id': securityEventId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/escalations/{security_event_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EscalationsList operation.
     * @callback module:api/V1Api~v1EscalationsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @param {String} opts.teamId 
     * @param {String} opts.indicatorId 
     * @param {String} opts.indicatorTitle 
     * @param {String} opts.communityId 
     * @param {String} opts.createdAt 
     * @param {String} opts.escalatedAt 
     * @param {String} opts.closedAt 
     * @param {String} opts.srcIp 
     * @param {String} opts.srcPort 
     * @param {String} opts.destIp 
     * @param {String} opts.destPort 
     * @param {String} opts.sensorId 
     * @param {String} opts.sensorName 
     * @param {String} opts.suppressionReason 
     * @param {String} opts.observableId 
     * @param {String} opts.closed 
     * @param {String} opts.status 
     * @param {String} opts.lastSeenAt 
     * @param {String} opts.indicatorLoaded 
     * @param {String} opts.closedAtGte 
     * @param {String} opts.closedAtLte 
     * @param {String} opts.createdAtGte 
     * @param {String} opts.createdAtLte 
     * @param {String} opts.protocol 
     * @param {String} opts.fullUrl 
     * @param {String} opts.flowId 
     * @param {String} opts.hostIp 
     * @param {String} opts.srcOrDestIp 
     * @param {String} opts.srcFqdn 
     * @param {String} opts.destFqdn 
     * @param {String} opts.wasSuppressed 
     * @param {String} opts.hasSla 
     * @param {String} opts.isCompliant 
     * @param {String} opts.totalSecondsRemaining 
     * @param {String} opts.totalSecondsRemainingLt 
     * @param {String} opts.totalSecondsRemainingLte 
     * @param {String} opts.totalSecondsRemainingGt 
     * @param {String} opts.totalSecondsRemainingGte 
     * @param {String} opts.search 
     * @param {String} opts.escalatedAtGte 
     * @param {String} opts.escalatedAtLte 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1EscalationsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1EscalationsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
        'team_id': opts['teamId'],
        'indicator_id': opts['indicatorId'],
        'indicator_title': opts['indicatorTitle'],
        'community_id': opts['communityId'],
        'created_at': opts['createdAt'],
        'escalated_at': opts['escalatedAt'],
        'closed_at': opts['closedAt'],
        'src_ip': opts['srcIp'],
        'src_port': opts['srcPort'],
        'dest_ip': opts['destIp'],
        'dest_port': opts['destPort'],
        'sensor_id': opts['sensorId'],
        'sensor_name': opts['sensorName'],
        'suppression_reason': opts['suppressionReason'],
        'observable_id': opts['observableId'],
        'closed': opts['closed'],
        'status': opts['status'],
        'last_seen_at': opts['lastSeenAt'],
        'indicator_loaded': opts['indicatorLoaded'],
        'closed_at__gte': opts['closedAtGte'],
        'closed_at__lte': opts['closedAtLte'],
        'created_at__gte': opts['createdAtGte'],
        'created_at__lte': opts['createdAtLte'],
        'protocol': opts['protocol'],
        'full_url': opts['fullUrl'],
        'flow_id': opts['flowId'],
        'host_ip': opts['hostIp'],
        'src_or_dest_ip': opts['srcOrDestIp'],
        'src_fqdn': opts['srcFqdn'],
        'dest_fqdn': opts['destFqdn'],
        'was_suppressed': opts['wasSuppressed'],
        'has_sla': opts['hasSla'],
        'is_compliant': opts['isCompliant'],
        'total_seconds_remaining': opts['totalSecondsRemaining'],
        'total_seconds_remaining__lt': opts['totalSecondsRemainingLt'],
        'total_seconds_remaining__lte': opts['totalSecondsRemainingLte'],
        'total_seconds_remaining__gt': opts['totalSecondsRemainingGt'],
        'total_seconds_remaining__gte': opts['totalSecondsRemainingGte'],
        'search': opts['search'],
        'escalated_at__gte': opts['escalatedAtGte'],
        'escalated_at__lte': opts['escalatedAtLte'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/escalations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EscalationsPartialUpdate operation.
     * @callback module:api/V1Api~v1EscalationsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} securityEventId 
     * @param {module:api/V1Api~v1EscalationsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1EscalationsPartialUpdate = function(securityEventId, callback) {
      var postBody = null;

      // verify the required parameter 'securityEventId' is set
      if (securityEventId === undefined || securityEventId === null) {
        throw new Error("Missing the required parameter 'securityEventId' when calling v1EscalationsPartialUpdate");
      }


      var pathParams = {
        'security_event_id': securityEventId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/escalations/{security_event_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EscalationsRead operation.
     * @callback module:api/V1Api~v1EscalationsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} securityEventId 
     * @param {module:api/V1Api~v1EscalationsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1EscalationsRead = function(securityEventId, callback) {
      var postBody = null;

      // verify the required parameter 'securityEventId' is set
      if (securityEventId === undefined || securityEventId === null) {
        throw new Error("Missing the required parameter 'securityEventId' when calling v1EscalationsRead");
      }


      var pathParams = {
        'security_event_id': securityEventId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/escalations/{security_event_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EscalationsUpdate operation.
     * @callback module:api/V1Api~v1EscalationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} securityEventId 
     * @param {module:api/V1Api~v1EscalationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1EscalationsUpdate = function(securityEventId, callback) {
      var postBody = null;

      // verify the required parameter 'securityEventId' is set
      if (securityEventId === undefined || securityEventId === null) {
        throw new Error("Missing the required parameter 'securityEventId' when calling v1EscalationsUpdate");
      }


      var pathParams = {
        'security_event_id': securityEventId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/escalations/{security_event_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EventsCommonHostsCreate operation.
     * @callback module:api/V1Api~v1EventsCommonHostsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/V1Api~v1EventsCommonHostsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1EventsCommonHostsCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/events/common-hosts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EventsCommonValuesCreate operation.
     * @callback module:api/V1Api~v1EventsCommonValuesCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds the custom_values available for suppression across all provided event_ids.
     * @param {module:api/V1Api~v1EventsCommonValuesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1EventsCommonValuesCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/events/common-values', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceCollectionsAdd operation.
     * @callback module:api/V1Api~v1MarketplaceCollectionsAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/Collection} data 
     * @param {module:api/V1Api~v1MarketplaceCollectionsAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    this.v1MarketplaceCollectionsAdd = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceCollectionsAdd");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1MarketplaceCollectionsAdd");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Collection;

      return this.apiClient.callApi(
        '/v1/marketplace/collections/{id}/add', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceCollectionsCreate operation.
     * @callback module:api/V1Api~v1MarketplaceCollectionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Collection} data 
     * @param {module:api/V1Api~v1MarketplaceCollectionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    this.v1MarketplaceCollectionsCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1MarketplaceCollectionsCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Collection;

      return this.apiClient.callApi(
        '/v1/marketplace/collections', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceCollectionsDelete operation.
     * @callback module:api/V1Api~v1MarketplaceCollectionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1MarketplaceCollectionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1MarketplaceCollectionsDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceCollectionsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/marketplace/collections/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceCollectionsList operation.
     * @callback module:api/V1Api~v1MarketplaceCollectionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20015} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.isInstalled 
     * @param {String} opts.itemType 
     * @param {String} opts.visibleFor 
     * @param {String} opts.store 
     * @param {Number} opts.collection 
     * @param {String} opts.search 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1MarketplaceCollectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20015}
     */
    this.v1MarketplaceCollectionsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'is_installed': opts['isInstalled'],
        'item_type': opts['itemType'],
        'visible_for': opts['visibleFor'],
        'store': opts['store'],
        'collection': opts['collection'],
        'search': opts['search'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/v1/marketplace/collections', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceCollectionsPartialUpdate operation.
     * @callback module:api/V1Api~v1MarketplaceCollectionsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/Collection} data 
     * @param {module:api/V1Api~v1MarketplaceCollectionsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    this.v1MarketplaceCollectionsPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceCollectionsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1MarketplaceCollectionsPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Collection;

      return this.apiClient.callApi(
        '/v1/marketplace/collections/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceCollectionsRead operation.
     * @callback module:api/V1Api~v1MarketplaceCollectionsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1MarketplaceCollectionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    this.v1MarketplaceCollectionsRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceCollectionsRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Collection;

      return this.apiClient.callApi(
        '/v1/marketplace/collections/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceCollectionsRemoveCreate operation.
     * @callback module:api/V1Api~v1MarketplaceCollectionsRemoveCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/Collection} data 
     * @param {module:api/V1Api~v1MarketplaceCollectionsRemoveCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    this.v1MarketplaceCollectionsRemoveCreate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceCollectionsRemoveCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1MarketplaceCollectionsRemoveCreate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Collection;

      return this.apiClient.callApi(
        '/v1/marketplace/collections/{id}/remove', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceCollectionsRemoveDelete operation.
     * @callback module:api/V1Api~v1MarketplaceCollectionsRemoveDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1MarketplaceCollectionsRemoveDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1MarketplaceCollectionsRemoveDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceCollectionsRemoveDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/marketplace/collections/{id}/remove', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceCollectionsUpdate operation.
     * @callback module:api/V1Api~v1MarketplaceCollectionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/Collection} data 
     * @param {module:api/V1Api~v1MarketplaceCollectionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    this.v1MarketplaceCollectionsUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceCollectionsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1MarketplaceCollectionsUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Collection;

      return this.apiClient.callApi(
        '/v1/marketplace/collections/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceItemsAdd operation.
     * @callback module:api/V1Api~v1MarketplaceItemsAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketplacePolymorphic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/MarketplacePolymorphic} data 
     * @param {module:api/V1Api~v1MarketplaceItemsAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketplacePolymorphic}
     */
    this.v1MarketplaceItemsAdd = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceItemsAdd");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1MarketplaceItemsAdd");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MarketplacePolymorphic;

      return this.apiClient.callApi(
        '/v1/marketplace/items/{id}/add', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceItemsCreate operation.
     * @callback module:api/V1Api~v1MarketplaceItemsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketplacePolymorphic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/MarketplacePolymorphic} data 
     * @param {module:api/V1Api~v1MarketplaceItemsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketplacePolymorphic}
     */
    this.v1MarketplaceItemsCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1MarketplaceItemsCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MarketplacePolymorphic;

      return this.apiClient.callApi(
        '/v1/marketplace/items', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceItemsDelete operation.
     * @callback module:api/V1Api~v1MarketplaceItemsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1MarketplaceItemsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1MarketplaceItemsDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceItemsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/marketplace/items/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceItemsList operation.
     * @callback module:api/V1Api~v1MarketplaceItemsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20016} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.isInstalled 
     * @param {String} opts.itemType 
     * @param {String} opts.visibleFor 
     * @param {String} opts.store 
     * @param {Number} opts.collection 
     * @param {String} opts.search 
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1MarketplaceItemsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20016}
     */
    this.v1MarketplaceItemsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'is_installed': opts['isInstalled'],
        'item_type': opts['itemType'],
        'visible_for': opts['visibleFor'],
        'store': opts['store'],
        'collection': opts['collection'],
        'search': opts['search'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/v1/marketplace/items', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceItemsPartialUpdate operation.
     * @callback module:api/V1Api~v1MarketplaceItemsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketplacePolymorphic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/MarketplacePolymorphic} data 
     * @param {module:api/V1Api~v1MarketplaceItemsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketplacePolymorphic}
     */
    this.v1MarketplaceItemsPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceItemsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1MarketplaceItemsPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MarketplacePolymorphic;

      return this.apiClient.callApi(
        '/v1/marketplace/items/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceItemsRead operation.
     * @callback module:api/V1Api~v1MarketplaceItemsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketplacePolymorphic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1MarketplaceItemsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketplacePolymorphic}
     */
    this.v1MarketplaceItemsRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceItemsRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MarketplacePolymorphic;

      return this.apiClient.callApi(
        '/v1/marketplace/items/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceItemsRemoveCreate operation.
     * @callback module:api/V1Api~v1MarketplaceItemsRemoveCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketplacePolymorphic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/MarketplacePolymorphic} data 
     * @param {module:api/V1Api~v1MarketplaceItemsRemoveCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketplacePolymorphic}
     */
    this.v1MarketplaceItemsRemoveCreate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceItemsRemoveCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1MarketplaceItemsRemoveCreate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MarketplacePolymorphic;

      return this.apiClient.callApi(
        '/v1/marketplace/items/{id}/remove', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceItemsRemoveDelete operation.
     * @callback module:api/V1Api~v1MarketplaceItemsRemoveDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1MarketplaceItemsRemoveDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1MarketplaceItemsRemoveDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceItemsRemoveDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/marketplace/items/{id}/remove', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceItemsUpdate operation.
     * @callback module:api/V1Api~v1MarketplaceItemsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketplacePolymorphic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/MarketplacePolymorphic} data 
     * @param {module:api/V1Api~v1MarketplaceItemsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketplacePolymorphic}
     */
    this.v1MarketplaceItemsUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceItemsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1MarketplaceItemsUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MarketplacePolymorphic;

      return this.apiClient.callApi(
        '/v1/marketplace/items/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceStoresCreate operation.
     * @callback module:api/V1Api~v1MarketplaceStoresCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Store} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/Store} data 
     * @param {module:api/V1Api~v1MarketplaceStoresCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Store}
     */
    this.v1MarketplaceStoresCreate = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MarketplaceStoresCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1MarketplaceStoresCreate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Store;

      return this.apiClient.callApi(
        '/v1/marketplace/{company_id}/stores', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceStoresCreate_0 operation.
     * @callback module:api/V1Api~v1MarketplaceStoresCreate_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} itemType 
     * @param {String} storeId 
     * @param {module:api/V1Api~v1MarketplaceStoresCreate_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1MarketplaceStoresCreate_0 = function(companyId, itemType, storeId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MarketplaceStoresCreate_0");
      }

      // verify the required parameter 'itemType' is set
      if (itemType === undefined || itemType === null) {
        throw new Error("Missing the required parameter 'itemType' when calling v1MarketplaceStoresCreate_0");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling v1MarketplaceStoresCreate_0");
      }


      var pathParams = {
        'company_id': companyId,
        'item_type': itemType,
        'store_id': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/marketplace/{company_id}/stores/{store_id}/{item_type}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceStoresDelete operation.
     * @callback module:api/V1Api~v1MarketplaceStoresDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/V1Api~v1MarketplaceStoresDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1MarketplaceStoresDelete = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MarketplaceStoresDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceStoresDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/marketplace/{company_id}/stores/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceStoresDelete_0 operation.
     * @callback module:api/V1Api~v1MarketplaceStoresDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} itemType 
     * @param {String} storeId 
     * @param {module:api/V1Api~v1MarketplaceStoresDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1MarketplaceStoresDelete_0 = function(companyId, id, itemType, storeId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MarketplaceStoresDelete_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceStoresDelete_0");
      }

      // verify the required parameter 'itemType' is set
      if (itemType === undefined || itemType === null) {
        throw new Error("Missing the required parameter 'itemType' when calling v1MarketplaceStoresDelete_0");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling v1MarketplaceStoresDelete_0");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'item_type': itemType,
        'store_id': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/marketplace/{company_id}/stores/{store_id}/{item_type}/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceStoresList operation.
     * @callback module:api/V1Api~v1MarketplaceStoresListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20017} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1MarketplaceStoresListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20017}
     */
    this.v1MarketplaceStoresList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MarketplaceStoresList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/v1/marketplace/{company_id}/stores', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceStoresList_0 operation.
     * @callback module:api/V1Api~v1MarketplaceStoresList_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} itemType 
     * @param {String} storeId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1MarketplaceStoresList_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1MarketplaceStoresList_0 = function(companyId, itemType, storeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MarketplaceStoresList_0");
      }

      // verify the required parameter 'itemType' is set
      if (itemType === undefined || itemType === null) {
        throw new Error("Missing the required parameter 'itemType' when calling v1MarketplaceStoresList_0");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling v1MarketplaceStoresList_0");
      }


      var pathParams = {
        'company_id': companyId,
        'item_type': itemType,
        'store_id': storeId
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/marketplace/{company_id}/stores/{store_id}/{item_type}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceStoresPartialUpdate operation.
     * @callback module:api/V1Api~v1MarketplaceStoresPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Store} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/Store} data 
     * @param {module:api/V1Api~v1MarketplaceStoresPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Store}
     */
    this.v1MarketplaceStoresPartialUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MarketplaceStoresPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceStoresPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1MarketplaceStoresPartialUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Store;

      return this.apiClient.callApi(
        '/v1/marketplace/{company_id}/stores/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceStoresPartialUpdate_0 operation.
     * @callback module:api/V1Api~v1MarketplaceStoresPartialUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} itemType 
     * @param {String} storeId 
     * @param {module:api/V1Api~v1MarketplaceStoresPartialUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1MarketplaceStoresPartialUpdate_0 = function(companyId, id, itemType, storeId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MarketplaceStoresPartialUpdate_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceStoresPartialUpdate_0");
      }

      // verify the required parameter 'itemType' is set
      if (itemType === undefined || itemType === null) {
        throw new Error("Missing the required parameter 'itemType' when calling v1MarketplaceStoresPartialUpdate_0");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling v1MarketplaceStoresPartialUpdate_0");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'item_type': itemType,
        'store_id': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/marketplace/{company_id}/stores/{store_id}/{item_type}/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceStoresRead operation.
     * @callback module:api/V1Api~v1MarketplaceStoresReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Store} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/V1Api~v1MarketplaceStoresReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Store}
     */
    this.v1MarketplaceStoresRead = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MarketplaceStoresRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceStoresRead");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Store;

      return this.apiClient.callApi(
        '/v1/marketplace/{company_id}/stores/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceStoresRead_0 operation.
     * @callback module:api/V1Api~v1MarketplaceStoresRead_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} itemType 
     * @param {String} storeId 
     * @param {module:api/V1Api~v1MarketplaceStoresRead_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1MarketplaceStoresRead_0 = function(companyId, id, itemType, storeId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MarketplaceStoresRead_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceStoresRead_0");
      }

      // verify the required parameter 'itemType' is set
      if (itemType === undefined || itemType === null) {
        throw new Error("Missing the required parameter 'itemType' when calling v1MarketplaceStoresRead_0");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling v1MarketplaceStoresRead_0");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'item_type': itemType,
        'store_id': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/marketplace/{company_id}/stores/{store_id}/{item_type}/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceStoresUpdate operation.
     * @callback module:api/V1Api~v1MarketplaceStoresUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Store} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/Store} data 
     * @param {module:api/V1Api~v1MarketplaceStoresUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Store}
     */
    this.v1MarketplaceStoresUpdate = function(companyId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MarketplaceStoresUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceStoresUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1MarketplaceStoresUpdate");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Store;

      return this.apiClient.callApi(
        '/v1/marketplace/{company_id}/stores/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MarketplaceStoresUpdate_0 operation.
     * @callback module:api/V1Api~v1MarketplaceStoresUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} itemType 
     * @param {String} storeId 
     * @param {module:api/V1Api~v1MarketplaceStoresUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1MarketplaceStoresUpdate_0 = function(companyId, id, itemType, storeId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MarketplaceStoresUpdate_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MarketplaceStoresUpdate_0");
      }

      // verify the required parameter 'itemType' is set
      if (itemType === undefined || itemType === null) {
        throw new Error("Missing the required parameter 'itemType' when calling v1MarketplaceStoresUpdate_0");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling v1MarketplaceStoresUpdate_0");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id,
        'item_type': itemType,
        'store_id': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/marketplace/{company_id}/stores/{store_id}/{item_type}/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MetricsOrganizationsList operation.
     * @callback module:api/V1Api~v1MetricsOrganizationsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Organizations>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts._date 
     * @param {String} opts.dateLt 
     * @param {String} opts.dateLte 
     * @param {String} opts.dateGt 
     * @param {String} opts.dateGte 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/V1Api~v1MetricsOrganizationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Organizations>}
     */
    this.v1MetricsOrganizationsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'date': opts['_date'],
        'date__lt': opts['dateLt'],
        'date__lte': opts['dateLte'],
        'date__gt': opts['dateGt'],
        'date__gte': opts['dateGte'],
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Organizations];

      return this.apiClient.callApi(
        '/v1/metrics/organizations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MetricsOrganizationsRead operation.
     * @callback module:api/V1Api~v1MetricsOrganizationsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organizations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1MetricsOrganizationsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organizations}
     */
    this.v1MetricsOrganizationsRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MetricsOrganizationsRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Organizations;

      return this.apiClient.callApi(
        '/v1/metrics/organizations/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MetricsSuppressionsAndEscalationsList operation.
     * @callback module:api/V1Api~v1MetricsSuppressionsAndEscalationsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SuppressionsAndEscalations>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This is used to populate the Suppressions & Escalations chart on the organizations page
     * @param {Object} opts Optional parameters
     * @param {Number} opts.company 
     * @param {Number} opts.companyIexact 
     * @param {Number} opts.companyGt 
     * @param {Number} opts.companyGte 
     * @param {Number} opts.companyLt 
     * @param {Number} opts.companyLte 
     * @param {Number} opts.companyIn Multiple values may be separated by commas.
     * @param {Number} opts.companyContains 
     * @param {Number} opts.companyIcontains 
     * @param {Number} opts.companyStartswith 
     * @param {Number} opts.companyIstartswith 
     * @param {Number} opts.companyEndswith 
     * @param {Number} opts.companyIendswith 
     * @param {Number} opts.companyRange Multiple values may be separated by commas.
     * @param {String} opts.companyIsnull 
     * @param {Number} opts.companyRegex 
     * @param {Number} opts.companyIregex 
     * @param {Number} opts.companyContainedBy 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/V1Api~v1MetricsSuppressionsAndEscalationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SuppressionsAndEscalations>}
     */
    this.v1MetricsSuppressionsAndEscalationsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'company': opts['company'],
        'company__iexact': opts['companyIexact'],
        'company__gt': opts['companyGt'],
        'company__gte': opts['companyGte'],
        'company__lt': opts['companyLt'],
        'company__lte': opts['companyLte'],
        'company__in': opts['companyIn'],
        'company__contains': opts['companyContains'],
        'company__icontains': opts['companyIcontains'],
        'company__startswith': opts['companyStartswith'],
        'company__istartswith': opts['companyIstartswith'],
        'company__endswith': opts['companyEndswith'],
        'company__iendswith': opts['companyIendswith'],
        'company__range': opts['companyRange'],
        'company__isnull': opts['companyIsnull'],
        'company__regex': opts['companyRegex'],
        'company__iregex': opts['companyIregex'],
        'company__contained_by': opts['companyContainedBy'],
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SuppressionsAndEscalations];

      return this.apiClient.callApi(
        '/v1/metrics/suppressions-and-escalations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MetricsSuppressionsAndEscalationsRead operation.
     * @callback module:api/V1Api~v1MetricsSuppressionsAndEscalationsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuppressionsAndEscalations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This is used to populate the Suppressions & Escalations chart on the organizations page
     * @param {String} id 
     * @param {module:api/V1Api~v1MetricsSuppressionsAndEscalationsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuppressionsAndEscalations}
     */
    this.v1MetricsSuppressionsAndEscalationsRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MetricsSuppressionsAndEscalationsRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuppressionsAndEscalations;

      return this.apiClient.callApi(
        '/v1/metrics/suppressions-and-escalations/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MetricsTeamsAllStatsList operation.
     * @callback module:api/V1Api~v1MetricsTeamsAllStatsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/V1Api~v1MetricsTeamsAllStatsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1MetricsTeamsAllStatsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/metrics/teams/all/stats', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MsspsSlasCreate operation.
     * @callback module:api/V1Api~v1MsspsSlasCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SLACreation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {module:model/SLACreation} data 
     * @param {module:api/V1Api~v1MsspsSlasCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SLACreation}
     */
    this.v1MsspsSlasCreate = function(companyId, data, callback) {
      var postBody = data;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MsspsSlasCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1MsspsSlasCreate");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SLACreation;

      return this.apiClient.callApi(
        '/v1/mssps/{company_id}/slas', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MsspsSlasDelete operation.
     * @callback module:api/V1Api~v1MsspsSlasDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/V1Api~v1MsspsSlasDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1MsspsSlasDelete = function(companyId, id, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MsspsSlasDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MsspsSlasDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/mssps/{company_id}/slas/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MsspsSlasList operation.
     * @callback module:api/V1Api~v1MsspsSlasListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20018} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.owner 
     * @param {String} opts.timezone 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1MsspsSlasListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20018}
     */
    this.v1MsspsSlasList = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MsspsSlasList");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'owner': opts['owner'],
        'timezone': opts['timezone'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20018;

      return this.apiClient.callApi(
        '/v1/mssps/{company_id}/slas', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MsspsTeamsDelete operation.
     * @callback module:api/V1Api~v1MsspsTeamsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {String} msspId 
     * @param {module:api/V1Api~v1MsspsTeamsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1MsspsTeamsDelete = function(companyId, msspId, callback) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1MsspsTeamsDelete");
      }

      // verify the required parameter 'msspId' is set
      if (msspId === undefined || msspId === null) {
        throw new Error("Missing the required parameter 'msspId' when calling v1MsspsTeamsDelete");
      }


      var pathParams = {
        'company_id': companyId,
        'mssp_id': msspId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/mssps/{mssp_id}/teams/{company_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1NewTeamRegistrationCreate operation.
     * @callback module:api/V1Api~v1NewTeamRegistrationCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/V1Api~v1NewTeamRegistrationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1NewTeamRegistrationCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/new-team-registration', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SecurityEventsCommentsCreate operation.
     * @callback module:api/V1Api~v1SecurityEventsCommentsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/V1Api~v1SecurityEventsCommentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1SecurityEventsCommentsCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/security-events/comments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SecurityEventsCommentsDelete operation.
     * @callback module:api/V1Api~v1SecurityEventsCommentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this comment.
     * @param {module:api/V1Api~v1SecurityEventsCommentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1SecurityEventsCommentsDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SecurityEventsCommentsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/security-events/comments/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SecurityEventsCommentsList operation.
     * @callback module:api/V1Api~v1SecurityEventsCommentsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/V1Api~v1SecurityEventsCommentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    this.v1SecurityEventsCommentsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Comment];

      return this.apiClient.callApi(
        '/v1/security-events/comments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SecurityEventsCommentsPartialUpdate operation.
     * @callback module:api/V1Api~v1SecurityEventsCommentsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this comment.
     * @param {module:model/CommentSerializer} data 
     * @param {module:api/V1Api~v1SecurityEventsCommentsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentSerializer}
     */
    this.v1SecurityEventsCommentsPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SecurityEventsCommentsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1SecurityEventsCommentsPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentSerializer;

      return this.apiClient.callApi(
        '/v1/security-events/comments/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SecurityEventsCommentsUpdate operation.
     * @callback module:api/V1Api~v1SecurityEventsCommentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this comment.
     * @param {module:api/V1Api~v1SecurityEventsCommentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1SecurityEventsCommentsUpdate = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SecurityEventsCommentsUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/security-events/comments/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SecurityEventsCreate operation.
     * @callback module:api/V1Api~v1SecurityEventsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of alerts viewable by the user.
     * @param {module:api/V1Api~v1SecurityEventsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1SecurityEventsCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/security-events', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SecurityEventsDelete operation.
     * @callback module:api/V1Api~v1SecurityEventsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of alerts viewable by the user.
     * @param {String} securityEventId 
     * @param {module:api/V1Api~v1SecurityEventsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1SecurityEventsDelete = function(securityEventId, callback) {
      var postBody = null;

      // verify the required parameter 'securityEventId' is set
      if (securityEventId === undefined || securityEventId === null) {
        throw new Error("Missing the required parameter 'securityEventId' when calling v1SecurityEventsDelete");
      }


      var pathParams = {
        'security_event_id': securityEventId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/security-events/{security_event_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SecurityEventsList operation.
     * @callback module:api/V1Api~v1SecurityEventsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of alerts viewable by the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.lastSeenAt 
     * @param {String} opts.id 
     * @param {String} opts.indicatorId 
     * @param {String} opts.indicatorTitle 
     * @param {String} opts.sensorId 
     * @param {String} opts.sensorName 
     * @param {String} opts.teamId 
     * @param {String} opts.communityId 
     * @param {String} opts.createdAt 
     * @param {String} opts.srcIp 
     * @param {String} opts.srcPort 
     * @param {String} opts.destIp 
     * @param {String} opts.destPort 
     * @param {String} opts.protocol 
     * @param {String} opts.observableId 
     * @param {String} opts.status 
     * @param {String} opts.fullUrl 
     * @param {String} opts.indicatorLoaded 
     * @param {String} opts.closedAt 
     * @param {String} opts.isCompliant 
     * @param {String} opts.hasSla 
     * @param {String} opts.closed 
     * @param {String} opts.closedAtGte 
     * @param {String} opts.closedAtLte 
     * @param {String} opts.createdAtGte 
     * @param {String} opts.createdAtLte 
     * @param {String} opts.flowId 
     * @param {String} opts.hostIp 
     * @param {String} opts.srcOrDestIp 
     * @param {String} opts.srcFqdn 
     * @param {String} opts.destFqdn 
     * @param {String} opts.wasSuppressed 
     * @param {String} opts.totalSecondsRemaining 
     * @param {String} opts.totalSecondsRemainingLt 
     * @param {String} opts.totalSecondsRemainingLte 
     * @param {String} opts.totalSecondsRemainingGt 
     * @param {String} opts.totalSecondsRemainingGte 
     * @param {String} opts.search 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1SecurityEventsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1SecurityEventsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'last_seen_at': opts['lastSeenAt'],
        'id': opts['id'],
        'indicator_id': opts['indicatorId'],
        'indicator_title': opts['indicatorTitle'],
        'sensor_id': opts['sensorId'],
        'sensor_name': opts['sensorName'],
        'team_id': opts['teamId'],
        'community_id': opts['communityId'],
        'created_at': opts['createdAt'],
        'src_ip': opts['srcIp'],
        'src_port': opts['srcPort'],
        'dest_ip': opts['destIp'],
        'dest_port': opts['destPort'],
        'protocol': opts['protocol'],
        'observable_id': opts['observableId'],
        'status': opts['status'],
        'full_url': opts['fullUrl'],
        'indicator_loaded': opts['indicatorLoaded'],
        'closed_at': opts['closedAt'],
        'is_compliant': opts['isCompliant'],
        'has_sla': opts['hasSla'],
        'closed': opts['closed'],
        'closed_at__gte': opts['closedAtGte'],
        'closed_at__lte': opts['closedAtLte'],
        'created_at__gte': opts['createdAtGte'],
        'created_at__lte': opts['createdAtLte'],
        'flow_id': opts['flowId'],
        'host_ip': opts['hostIp'],
        'src_or_dest_ip': opts['srcOrDestIp'],
        'src_fqdn': opts['srcFqdn'],
        'dest_fqdn': opts['destFqdn'],
        'was_suppressed': opts['wasSuppressed'],
        'total_seconds_remaining': opts['totalSecondsRemaining'],
        'total_seconds_remaining__lt': opts['totalSecondsRemainingLt'],
        'total_seconds_remaining__lte': opts['totalSecondsRemainingLte'],
        'total_seconds_remaining__gt': opts['totalSecondsRemainingGt'],
        'total_seconds_remaining__gte': opts['totalSecondsRemainingGte'],
        'search': opts['search'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/security-events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SecurityEventsPartialUpdate operation.
     * @callback module:api/V1Api~v1SecurityEventsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of alerts viewable by the user.
     * @param {String} securityEventId 
     * @param {module:api/V1Api~v1SecurityEventsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1SecurityEventsPartialUpdate = function(securityEventId, callback) {
      var postBody = null;

      // verify the required parameter 'securityEventId' is set
      if (securityEventId === undefined || securityEventId === null) {
        throw new Error("Missing the required parameter 'securityEventId' when calling v1SecurityEventsPartialUpdate");
      }


      var pathParams = {
        'security_event_id': securityEventId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/security-events/{security_event_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SecurityEventsRead operation.
     * @callback module:api/V1Api~v1SecurityEventsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of alerts viewable by the user.
     * @param {String} securityEventId 
     * @param {module:api/V1Api~v1SecurityEventsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1SecurityEventsRead = function(securityEventId, callback) {
      var postBody = null;

      // verify the required parameter 'securityEventId' is set
      if (securityEventId === undefined || securityEventId === null) {
        throw new Error("Missing the required parameter 'securityEventId' when calling v1SecurityEventsRead");
      }


      var pathParams = {
        'security_event_id': securityEventId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/security-events/{security_event_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SecurityEventsStatusStatusCounts operation.
     * @callback module:api/V1Api~v1SecurityEventsStatusStatusCountsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of alerts viewable by the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.lastSeenAt 
     * @param {String} opts.id 
     * @param {String} opts.indicatorId 
     * @param {String} opts.indicatorTitle 
     * @param {String} opts.sensorId 
     * @param {String} opts.sensorName 
     * @param {String} opts.teamId 
     * @param {String} opts.communityId 
     * @param {String} opts.createdAt 
     * @param {String} opts.srcIp 
     * @param {String} opts.srcPort 
     * @param {String} opts.destIp 
     * @param {String} opts.destPort 
     * @param {String} opts.protocol 
     * @param {String} opts.observableId 
     * @param {String} opts.status 
     * @param {String} opts.fullUrl 
     * @param {String} opts.indicatorLoaded 
     * @param {String} opts.closedAt 
     * @param {String} opts.isCompliant 
     * @param {String} opts.hasSla 
     * @param {String} opts.closed 
     * @param {String} opts.closedAtGte 
     * @param {String} opts.closedAtLte 
     * @param {String} opts.createdAtGte 
     * @param {String} opts.createdAtLte 
     * @param {String} opts.flowId 
     * @param {String} opts.hostIp 
     * @param {String} opts.srcOrDestIp 
     * @param {String} opts.srcFqdn 
     * @param {String} opts.destFqdn 
     * @param {String} opts.wasSuppressed 
     * @param {String} opts.totalSecondsRemaining 
     * @param {String} opts.totalSecondsRemainingLt 
     * @param {String} opts.totalSecondsRemainingLte 
     * @param {String} opts.totalSecondsRemainingGt 
     * @param {String} opts.totalSecondsRemainingGte 
     * @param {String} opts.search 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1SecurityEventsStatusStatusCountsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1SecurityEventsStatusStatusCounts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'last_seen_at': opts['lastSeenAt'],
        'id': opts['id'],
        'indicator_id': opts['indicatorId'],
        'indicator_title': opts['indicatorTitle'],
        'sensor_id': opts['sensorId'],
        'sensor_name': opts['sensorName'],
        'team_id': opts['teamId'],
        'community_id': opts['communityId'],
        'created_at': opts['createdAt'],
        'src_ip': opts['srcIp'],
        'src_port': opts['srcPort'],
        'dest_ip': opts['destIp'],
        'dest_port': opts['destPort'],
        'protocol': opts['protocol'],
        'observable_id': opts['observableId'],
        'status': opts['status'],
        'full_url': opts['fullUrl'],
        'indicator_loaded': opts['indicatorLoaded'],
        'closed_at': opts['closedAt'],
        'is_compliant': opts['isCompliant'],
        'has_sla': opts['hasSla'],
        'closed': opts['closed'],
        'closed_at__gte': opts['closedAtGte'],
        'closed_at__lte': opts['closedAtLte'],
        'created_at__gte': opts['createdAtGte'],
        'created_at__lte': opts['createdAtLte'],
        'flow_id': opts['flowId'],
        'host_ip': opts['hostIp'],
        'src_or_dest_ip': opts['srcOrDestIp'],
        'src_fqdn': opts['srcFqdn'],
        'dest_fqdn': opts['destFqdn'],
        'was_suppressed': opts['wasSuppressed'],
        'total_seconds_remaining': opts['totalSecondsRemaining'],
        'total_seconds_remaining__lt': opts['totalSecondsRemainingLt'],
        'total_seconds_remaining__lte': opts['totalSecondsRemainingLte'],
        'total_seconds_remaining__gt': opts['totalSecondsRemainingGt'],
        'total_seconds_remaining__gte': opts['totalSecondsRemainingGte'],
        'search': opts['search'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/security-events/status/counts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SecurityEventsUpdate operation.
     * @callback module:api/V1Api~v1SecurityEventsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of alerts viewable by the user.
     * @param {String} securityEventId 
     * @param {module:api/V1Api~v1SecurityEventsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1SecurityEventsUpdate = function(securityEventId, callback) {
      var postBody = null;

      // verify the required parameter 'securityEventId' is set
      if (securityEventId === undefined || securityEventId === null) {
        throw new Error("Missing the required parameter 'securityEventId' when calling v1SecurityEventsUpdate");
      }


      var pathParams = {
        'security_event_id': securityEventId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/security-events/{security_event_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SensorFilesDownloadList operation.
     * @callback module:api/V1Api~v1SensorFilesDownloadListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} fileName 
     * @param {module:api/V1Api~v1SensorFilesDownloadListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1SensorFilesDownloadList = function(fileName, callback) {
      var postBody = null;

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling v1SensorFilesDownloadList");
      }


      var pathParams = {
        'file_name': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/sensor/files/{file_name}/download', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SensorFilesDownloadList_0 operation.
     * @callback module:api/V1Api~v1SensorFilesDownloadList_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} fileName 
     * @param {String} sensorId 
     * @param {module:api/V1Api~v1SensorFilesDownloadList_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1SensorFilesDownloadList_0 = function(fileName, sensorId, callback) {
      var postBody = null;

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling v1SensorFilesDownloadList_0");
      }

      // verify the required parameter 'sensorId' is set
      if (sensorId === undefined || sensorId === null) {
        throw new Error("Missing the required parameter 'sensorId' when calling v1SensorFilesDownloadList_0");
      }


      var pathParams = {
        'file_name': fileName,
        'sensor_id': sensorId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/sensor/{sensor_id}/files/{file_name}/download', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SensorFilesHashList operation.
     * @callback module:api/V1Api~v1SensorFilesHashListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/V1Api~v1SensorFilesHashListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1SensorFilesHashList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/sensor/files/hash', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SensorHealthRead operation.
     * @callback module:api/V1Api~v1SensorHealthReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Basically the same as the unversioned viewset, just doesn't require the team ID to be part of the URL
     * @param {String} id 
     * @param {module:api/V1Api~v1SensorHealthReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1SensorHealthRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SensorHealthRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/sensor/health/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SingleTeam operation.
     * @callback module:api/V1Api~v1SingleTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.dateLt 
     * @param {String} opts.dateLte 
     * @param {String} opts.dateGt 
     * @param {String} opts.dateGte 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1SingleTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20021}
     */
    this.v1SingleTeam = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1SingleTeam");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'date__lt': opts['dateLt'],
        'date__lte': opts['dateLte'],
        'date__gt': opts['dateGt'],
        'date__gte': opts['dateGte'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/v1/usage/{company_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SupportedDevicesList operation.
     * @callback module:api/V1Api~v1SupportedDevicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20019} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1SupportedDevicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20019}
     */
    this.v1SupportedDevicesList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20019;

      return this.apiClient.callApi(
        '/v1/supported_devices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SupportedDevicesRead operation.
     * @callback module:api/V1Api~v1SupportedDevicesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupportedDevice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1SupportedDevicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupportedDevice}
     */
    this.v1SupportedDevicesRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SupportedDevicesRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SupportedDevice;

      return this.apiClient.callApi(
        '/v1/supported_devices/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TeamsHealthList operation.
     * @callback module:api/V1Api~v1TeamsHealthListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20020} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.teamId 
     * @param {String} opts.alerts 
     * @param {String} opts.alertsGte 
     * @param {String} opts.alertsLte 
     * @param {String} opts.escalations 
     * @param {String} opts.lastLogin 
     * @param {String} opts.lastEscalation 
     * @param {String} opts.onboardingIncomplete 
     * @param {String} opts.escalationsGte 
     * @param {String} opts.escalationsLte 
     * @param {String} opts.lastLoginGte 
     * @param {String} opts.lastLoginLte 
     * @param {String} opts.lastEscalationGte 
     * @param {String} opts.lastEscalationLte 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1TeamsHealthListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20020}
     */
    this.v1TeamsHealthList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'team_id': opts['teamId'],
        'alerts': opts['alerts'],
        'alerts__gte': opts['alertsGte'],
        'alerts__lte': opts['alertsLte'],
        'escalations': opts['escalations'],
        'last_login': opts['lastLogin'],
        'last_escalation': opts['lastEscalation'],
        'onboarding_incomplete': opts['onboardingIncomplete'],
        'escalations__gte': opts['escalationsGte'],
        'escalations__lte': opts['escalationsLte'],
        'last_login__gte': opts['lastLoginGte'],
        'last_login__lte': opts['lastLoginLte'],
        'last_escalation__gte': opts['lastEscalationGte'],
        'last_escalation__lte': opts['lastEscalationLte'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = InlineResponse20020;

      return this.apiClient.callApi(
        '/v1/teams/health', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TeamsHealthRead operation.
     * @callback module:api/V1Api~v1TeamsHealthReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamHealth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1TeamsHealthReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamHealth}
     */
    this.v1TeamsHealthRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1TeamsHealthRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = TeamHealth;

      return this.apiClient.callApi(
        '/v1/teams/health/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TeamsSensorsSummaryCreate operation.
     * @callback module:api/V1Api~v1TeamsSensorsSummaryCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/V1Api~v1TeamsSensorsSummaryCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1TeamsSensorsSummaryCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/teams/sensors/summary', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TeamsSensorsSummaryDelete operation.
     * @callback module:api/V1Api~v1TeamsSensorsSummaryDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1TeamsSensorsSummaryDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1TeamsSensorsSummaryDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1TeamsSensorsSummaryDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/teams/sensors/summary/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TeamsSensorsSummaryList operation.
     * @callback module:api/V1Api~v1TeamsSensorsSummaryListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * We need to override the standard `list` method in order to apply sorting to non-database fields at the end of the request lifecycle
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {String} opts.search A search term.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1TeamsSensorsSummaryListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1TeamsSensorsSummaryList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'search': opts['search'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/teams/sensors/summary', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TeamsSensorsSummaryPartialUpdate operation.
     * @callback module:api/V1Api~v1TeamsSensorsSummaryPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1TeamsSensorsSummaryPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1TeamsSensorsSummaryPartialUpdate = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1TeamsSensorsSummaryPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/teams/sensors/summary/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TeamsSensorsSummaryRead operation.
     * @callback module:api/V1Api~v1TeamsSensorsSummaryReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1TeamsSensorsSummaryReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1TeamsSensorsSummaryRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1TeamsSensorsSummaryRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/teams/sensors/summary/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TeamsSensorsSummaryUpdate operation.
     * @callback module:api/V1Api~v1TeamsSensorsSummaryUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/V1Api~v1TeamsSensorsSummaryUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1TeamsSensorsSummaryUpdate = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1TeamsSensorsSummaryUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/teams/sensors/summary/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1UsageAllTeamsForUser operation.
     * @callback module:api/V1Api~v1UsageAllTeamsForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.dateLt 
     * @param {String} opts.dateLte 
     * @param {String} opts.dateGt 
     * @param {String} opts.dateGte 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1UsageAllTeamsForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20021}
     */
    this.v1UsageAllTeamsForUser = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'date__lt': opts['dateLt'],
        'date__lte': opts['dateLte'],
        'date__gt': opts['dateGt'],
        'date__gte': opts['dateGte'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/v1/usage/all', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1UsageManagedTeams operation.
     * @callback module:api/V1Api~v1UsageManagedTeamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.dateLt 
     * @param {String} opts.dateLte 
     * @param {String} opts.dateGt 
     * @param {String} opts.dateGte 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1UsageManagedTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20021}
     */
    this.v1UsageManagedTeams = function(companyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1UsageManagedTeams");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'date__lt': opts['dateLt'],
        'date__lte': opts['dateLte'],
        'date__gt': opts['dateGt'],
        'date__gte': opts['dateGte'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/csv'];
      var returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/v1/usage/{company_id}/managed-teams', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1UserLoginsList operation.
     * @callback module:api/V1Api~v1UserLoginsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/V1Api~v1UserLoginsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v1UserLoginsList = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1UserLoginsList");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/user/logins/{user_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1UserMePartialUpdate operation.
     * @callback module:api/V1Api~v1UserMePartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AboutMeSerializerV1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/AboutMeSerializerV1} data 
     * @param {module:api/V1Api~v1UserMePartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AboutMeSerializerV1}
     */
    this.v1UserMePartialUpdate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1UserMePartialUpdate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AboutMeSerializerV1;

      return this.apiClient.callApi(
        '/v1/user/me', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1UserMeRead operation.
     * @callback module:api/V1Api~v1UserMeReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AboutMeSerializerV1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/V1Api~v1UserMeReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AboutMeSerializerV1}
     */
    this.v1UserMeRead = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AboutMeSerializerV1;

      return this.apiClient.callApi(
        '/v1/user/me', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1UserPartialUpdate operation.
     * @callback module:api/V1Api~v1UserPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AboutMeSerializerV1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The AboutMeViewSetV1 already handles this same behavior, but is hardwired to only handle the current user. This view extends that, adds a permission, and slightly adjusts it to work with a passed user id.
     * @param {String} userId 
     * @param {module:model/AboutMeSerializerV1} data 
     * @param {module:api/V1Api~v1UserPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AboutMeSerializerV1}
     */
    this.v1UserPartialUpdate = function(userId, data, callback) {
      var postBody = data;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1UserPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1UserPartialUpdate");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AboutMeSerializerV1;

      return this.apiClient.callApi(
        '/v1/user/{user_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1UserRead operation.
     * @callback module:api/V1Api~v1UserReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AboutMeSerializerV1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The AboutMeViewSetV1 already handles this same behavior, but is hardwired to only handle the current user. This view extends that, adds a permission, and slightly adjusts it to work with a passed user id.
     * @param {String} userId 
     * @param {module:api/V1Api~v1UserReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AboutMeSerializerV1}
     */
    this.v1UserRead = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1UserRead");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AboutMeSerializerV1;

      return this.apiClient.callApi(
        '/v1/user/{user_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
