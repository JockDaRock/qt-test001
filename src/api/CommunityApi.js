/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CommentSerializer', 'model/CommunityAlertSuppression', 'model/CommunityFile', 'model/InlineResponse2001'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CommentSerializer'), require('../model/CommunityAlertSuppression'), require('../model/CommunityFile'), require('../model/InlineResponse2001'));
  } else {
    // Browser globals (root is window)
    if (!root.PerchApi) {
      root.PerchApi = {};
    }
    root.PerchApi.CommunityApi = factory(root.PerchApi.ApiClient, root.PerchApi.CommentSerializer, root.PerchApi.CommunityAlertSuppression, root.PerchApi.CommunityFile, root.PerchApi.InlineResponse2001);
  }
}(this, function(ApiClient, CommentSerializer, CommunityAlertSuppression, CommunityFile, InlineResponse2001) {
  'use strict';

  /**
   * Community service.
   * @module api/CommunityApi
   * @version v1
   */

  /**
   * Constructs a new CommunityApi. 
   * @alias module:api/CommunityApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the communityFeedsCreate operation.
     * @callback module:api/CommunityApi~communityFeedsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {module:api/CommunityApi~communityFeedsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.communityFeedsCreate = function(communityId, callback) {
      var postBody = null;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling communityFeedsCreate");
      }


      var pathParams = {
        'community_id': communityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/x-www-form-urlencoded', 'multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/community/{community_id}/feeds', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the communityFilesCommentsCreate operation.
     * @callback module:api/CommunityApi~communityFilesCommentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {String} fileId 
     * @param {module:model/CommentSerializer} data 
     * @param {module:api/CommunityApi~communityFilesCommentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentSerializer}
     */
    this.communityFilesCommentsCreate = function(communityId, fileId, data, callback) {
      var postBody = data;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling communityFilesCommentsCreate");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling communityFilesCommentsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling communityFilesCommentsCreate");
      }


      var pathParams = {
        'community_id': communityId,
        'file_id': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentSerializer;

      return this.apiClient.callApi(
        '/community/{community_id}/files/{file_id}/comments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the communityFilesCommentsDelete operation.
     * @callback module:api/CommunityApi~communityFilesCommentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {String} fileId 
     * @param {Number} id A unique integer value identifying this comment.
     * @param {module:api/CommunityApi~communityFilesCommentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.communityFilesCommentsDelete = function(communityId, fileId, id, callback) {
      var postBody = null;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling communityFilesCommentsDelete");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling communityFilesCommentsDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling communityFilesCommentsDelete");
      }


      var pathParams = {
        'community_id': communityId,
        'file_id': fileId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/community/{community_id}/files/{file_id}/comments/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the communityFilesCommentsPartialUpdate operation.
     * @callback module:api/CommunityApi~communityFilesCommentsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {String} fileId 
     * @param {Number} id A unique integer value identifying this comment.
     * @param {module:model/CommentSerializer} data 
     * @param {module:api/CommunityApi~communityFilesCommentsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentSerializer}
     */
    this.communityFilesCommentsPartialUpdate = function(communityId, fileId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling communityFilesCommentsPartialUpdate");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling communityFilesCommentsPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling communityFilesCommentsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling communityFilesCommentsPartialUpdate");
      }


      var pathParams = {
        'community_id': communityId,
        'file_id': fileId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentSerializer;

      return this.apiClient.callApi(
        '/community/{community_id}/files/{file_id}/comments/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the communityFilesCommentsUpdate operation.
     * @callback module:api/CommunityApi~communityFilesCommentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {String} fileId 
     * @param {Number} id A unique integer value identifying this comment.
     * @param {module:model/CommentSerializer} data 
     * @param {module:api/CommunityApi~communityFilesCommentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentSerializer}
     */
    this.communityFilesCommentsUpdate = function(communityId, fileId, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling communityFilesCommentsUpdate");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling communityFilesCommentsUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling communityFilesCommentsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling communityFilesCommentsUpdate");
      }


      var pathParams = {
        'community_id': communityId,
        'file_id': fileId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentSerializer;

      return this.apiClient.callApi(
        '/community/{community_id}/files/{file_id}/comments/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the communityFilesCreate operation.
     * @callback module:api/CommunityApi~communityFilesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunityFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {module:model/CommunityFile} data 
     * @param {module:api/CommunityApi~communityFilesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunityFile}
     */
    this.communityFilesCreate = function(communityId, data, callback) {
      var postBody = data;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling communityFilesCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling communityFilesCreate");
      }


      var pathParams = {
        'community_id': communityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommunityFile;

      return this.apiClient.callApi(
        '/community/{community_id}/files', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the communityFilesDelete operation.
     * @callback module:api/CommunityApi~communityFilesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {String} id 
     * @param {module:api/CommunityApi~communityFilesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.communityFilesDelete = function(communityId, id, callback) {
      var postBody = null;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling communityFilesDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling communityFilesDelete");
      }


      var pathParams = {
        'community_id': communityId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/community/{community_id}/files/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the communityFilesDownloadList operation.
     * @callback module:api/CommunityApi~communityFilesDownloadListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {String} fileId 
     * @param {module:api/CommunityApi~communityFilesDownloadListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.communityFilesDownloadList = function(communityId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling communityFilesDownloadList");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling communityFilesDownloadList");
      }


      var pathParams = {
        'community_id': communityId,
        'file_id': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/community/{community_id}/files/{file_id}/download', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the communityFilesList operation.
     * @callback module:api/CommunityApi~communityFilesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommunityFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/CommunityApi~communityFilesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommunityFile>}
     */
    this.communityFilesList = function(communityId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling communityFilesList");
      }


      var pathParams = {
        'community_id': communityId
      };
      var queryParams = {
        'ordering': opts['ordering'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CommunityFile];

      return this.apiClient.callApi(
        '/community/{community_id}/files', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the communityFilesRead operation.
     * @callback module:api/CommunityApi~communityFilesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunityFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {String} id 
     * @param {module:api/CommunityApi~communityFilesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunityFile}
     */
    this.communityFilesRead = function(communityId, id, callback) {
      var postBody = null;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling communityFilesRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling communityFilesRead");
      }


      var pathParams = {
        'community_id': communityId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommunityFile;

      return this.apiClient.callApi(
        '/community/{community_id}/files/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the communityIndicatorsList operation.
     * @callback module:api/CommunityApi~communityIndicatorsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.p A page number within the paginated result set.
     * @param {Number} opts.ps Number of results to return per page.
     * @param {module:api/CommunityApi~communityIndicatorsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.communityIndicatorsList = function(communityId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling communityIndicatorsList");
      }


      var pathParams = {
        'community_id': communityId
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'p': opts['p'],
        'ps': opts['ps'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/community/{community_id}/indicators', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the communitySuppressionsList operation.
     * @callback module:api/CommunityApi~communitySuppressionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.indicatorId 
     * @param {String} opts.scope 
     * @param {String} opts.reason 
     * @param {String} opts.reasonDetail 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pageNumber A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/CommunityApi~communitySuppressionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.communitySuppressionsList = function(communityId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling communitySuppressionsList");
      }


      var pathParams = {
        'community_id': communityId
      };
      var queryParams = {
        'indicator_id': opts['indicatorId'],
        'scope': opts['scope'],
        'reason': opts['reason'],
        'reason_detail': opts['reasonDetail'],
        'ordering': opts['ordering'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/community/{community_id}/suppressions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the communitySuppressionsRead operation.
     * @callback module:api/CommunityApi~communitySuppressionsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunityAlertSuppression} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} communityId 
     * @param {String} id 
     * @param {module:api/CommunityApi~communitySuppressionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunityAlertSuppression}
     */
    this.communitySuppressionsRead = function(communityId, id, callback) {
      var postBody = null;

      // verify the required parameter 'communityId' is set
      if (communityId === undefined || communityId === null) {
        throw new Error("Missing the required parameter 'communityId' when calling communitySuppressionsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling communitySuppressionsRead");
      }


      var pathParams = {
        'community_id': communityId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommunityAlertSuppression;

      return this.apiClient.callApi(
        '/community/{community_id}/suppressions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
