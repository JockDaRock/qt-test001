/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PerchApi);
  }
}(this, function(expect, PerchApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ApiSecurityEventStatusSerializer', function() {
      beforeEach(function() {
        instance = new PerchApi.ApiSecurityEventStatusSerializer();
      });

      it('should create an instance of ApiSecurityEventStatusSerializer', function() {
        // TODO: update the code to test ApiSecurityEventStatusSerializer
        expect(instance).to.be.a(PerchApi.ApiSecurityEventStatusSerializer);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property indicatorId (base name: "indicator_id")', function() {
        // TODO: update the code to test the property indicatorId
        expect(instance).to.have.property('indicatorId');
        // expect(instance.indicatorId).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property closedAt (base name: "closed_at")', function() {
        // TODO: update the code to test the property closedAt
        expect(instance).to.have.property('closedAt');
        // expect(instance.closedAt).to.be(expectedValueLiteral);
      });

      it('should have the property slaExpiresAt (base name: "sla_expires_at")', function() {
        // TODO: update the code to test the property slaExpiresAt
        expect(instance).to.have.property('slaExpiresAt');
        // expect(instance.slaExpiresAt).to.be(expectedValueLiteral);
      });

      it('should have the property slaRespondedAt (base name: "sla_responded_at")', function() {
        // TODO: update the code to test the property slaRespondedAt
        expect(instance).to.have.property('slaRespondedAt');
        // expect(instance.slaRespondedAt).to.be(expectedValueLiteral);
      });

      it('should have the property closedReason (base name: "closed_reason")', function() {
        // TODO: update the code to test the property closedReason
        expect(instance).to.have.property('closedReason');
        // expect(instance.closedReason).to.be(expectedValueLiteral);
      });

      it('should have the property closedReasonDetail (base name: "closed_reason_detail")', function() {
        // TODO: update the code to test the property closedReasonDetail
        expect(instance).to.have.property('closedReasonDetail');
        // expect(instance.closedReasonDetail).to.be(expectedValueLiteral);
      });

      it('should have the property closedNotes (base name: "closed_notes")', function() {
        // TODO: update the code to test the property closedNotes
        expect(instance).to.have.property('closedNotes');
        // expect(instance.closedNotes).to.be(expectedValueLiteral);
      });

      it('should have the property team (base name: "team")', function() {
        // TODO: update the code to test the property team
        expect(instance).to.have.property('team');
        // expect(instance.team).to.be(expectedValueLiteral);
      });

      it('should have the property suppressedBy (base name: "suppressed_by")', function() {
        // TODO: update the code to test the property suppressedBy
        expect(instance).to.have.property('suppressedBy');
        // expect(instance.suppressedBy).to.be(expectedValueLiteral);
      });

      it('should have the property slaResponder (base name: "sla_responder")', function() {
        // TODO: update the code to test the property slaResponder
        expect(instance).to.have.property('slaResponder');
        // expect(instance.slaResponder).to.be(expectedValueLiteral);
      });

      it('should have the property sla (base name: "sla")', function() {
        // TODO: update the code to test the property sla
        expect(instance).to.have.property('sla');
        // expect(instance.sla).to.be(expectedValueLiteral);
      });

      it('should have the property closedBy (base name: "closed_by")', function() {
        // TODO: update the code to test the property closedBy
        expect(instance).to.have.property('closedBy');
        // expect(instance.closedBy).to.be(expectedValueLiteral);
      });

    });
  });

}));
