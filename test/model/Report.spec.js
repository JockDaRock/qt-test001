/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PerchApi);
  }
}(this, function(expect, PerchApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Report', function() {
      beforeEach(function() {
        instance = new PerchApi.Report();
      });

      it('should create an instance of Report', function() {
        // TODO: update the code to test Report
        expect(instance).to.be.a(PerchApi.Report);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property scheduledReport (base name: "scheduled_report")', function() {
        // TODO: update the code to test the property scheduledReport
        expect(instance).to.have.property('scheduledReport');
        // expect(instance.scheduledReport).to.be(expectedValueLiteral);
      });

      it('should have the property runForTeam (base name: "run_for_team")', function() {
        // TODO: update the code to test the property runForTeam
        expect(instance).to.have.property('runForTeam');
        // expect(instance.runForTeam).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property contentType (base name: "content_type")', function() {
        // TODO: update the code to test the property contentType
        expect(instance).to.have.property('contentType');
        // expect(instance.contentType).to.be(expectedValueLiteral);
      });

      it('should have the property outputSize (base name: "output_size")', function() {
        // TODO: update the code to test the property outputSize
        expect(instance).to.have.property('outputSize');
        // expect(instance.outputSize).to.be(expectedValueLiteral);
      });

      it('should have the property outputSizeHuman (base name: "output_size_human")', function() {
        // TODO: update the code to test the property outputSizeHuman
        expect(instance).to.have.property('outputSizeHuman');
        // expect(instance.outputSizeHuman).to.be(expectedValueLiteral);
      });

      it('should have the property errorMsg (base name: "error_msg")', function() {
        // TODO: update the code to test the property errorMsg
        expect(instance).to.have.property('errorMsg');
        // expect(instance.errorMsg).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property savedObjectType (base name: "saved_object_type")', function() {
        // TODO: update the code to test the property savedObjectType
        expect(instance).to.have.property('savedObjectType');
        // expect(instance.savedObjectType).to.be(expectedValueLiteral);
      });

      it('should have the property savedObjectId (base name: "saved_object_id")', function() {
        // TODO: update the code to test the property savedObjectId
        expect(instance).to.have.property('savedObjectId');
        // expect(instance.savedObjectId).to.be(expectedValueLiteral);
      });

      it('should have the property fromTime (base name: "from_time")', function() {
        // TODO: update the code to test the property fromTime
        expect(instance).to.have.property('fromTime');
        // expect(instance.fromTime).to.be(expectedValueLiteral);
      });

      it('should have the property toTime (base name: "to_time")', function() {
        // TODO: update the code to test the property toTime
        expect(instance).to.have.property('toTime');
        // expect(instance.toTime).to.be(expectedValueLiteral);
      });

    });
  });

}));
