/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PerchApi);
  }
}(this, function(expect, PerchApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Collection', function() {
      beforeEach(function() {
        instance = new PerchApi.Collection();
      });

      it('should create an instance of Collection', function() {
        // TODO: update the code to test Collection
        expect(instance).to.be.a(PerchApi.Collection);
      });

      it('should have the property autoAddManagedTeams (base name: "auto_add_managed_teams")', function() {
        // TODO: update the code to test the property autoAddManagedTeams
        expect(instance).to.have.property('autoAddManagedTeams');
        // expect(instance.autoAddManagedTeams).to.be(expectedValueLiteral);
      });

      it('should have the property addToManagedTeams (base name: "add_to_managed_teams")', function() {
        // TODO: update the code to test the property addToManagedTeams
        expect(instance).to.have.property('addToManagedTeams');
        // expect(instance.addToManagedTeams).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "created_by")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property installCount (base name: "install_count")', function() {
        // TODO: update the code to test the property installCount
        expect(instance).to.have.property('installCount');
        // expect(instance.installCount).to.be(expectedValueLiteral);
      });

      it('should have the property isInstalled (base name: "is_installed")', function() {
        // TODO: update the code to test the property isInstalled
        expect(instance).to.have.property('isInstalled');
        // expect(instance.isInstalled).to.be(expectedValueLiteral);
      });

      it('should have the property isOwner (base name: "is_owner")', function() {
        // TODO: update the code to test the property isOwner
        expect(instance).to.have.property('isOwner');
        // expect(instance.isOwner).to.be(expectedValueLiteral);
      });

      it('should have the property itemType (base name: "item_type")', function() {
        // TODO: update the code to test the property itemType
        expect(instance).to.have.property('itemType');
        // expect(instance.itemType).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property patronTeams (base name: "patron_teams")', function() {
        // TODO: update the code to test the property patronTeams
        expect(instance).to.have.property('patronTeams');
        // expect(instance.patronTeams).to.be(expectedValueLiteral);
      });

      it('should have the property store (base name: "store")', function() {
        // TODO: update the code to test the property store
        expect(instance).to.have.property('store');
        // expect(instance.store).to.be(expectedValueLiteral);
      });

      it('should have the property storeId (base name: "store_id")', function() {
        // TODO: update the code to test the property storeId
        expect(instance).to.have.property('storeId');
        // expect(instance.storeId).to.be(expectedValueLiteral);
      });

      it('should have the property itemCount (base name: "item_count")', function() {
        // TODO: update the code to test the property itemCount
        expect(instance).to.have.property('itemCount');
        // expect(instance.itemCount).to.be(expectedValueLiteral);
      });

      it('should have the property totalInstallCount (base name: "total_install_count")', function() {
        // TODO: update the code to test the property totalInstallCount
        expect(instance).to.have.property('totalInstallCount');
        // expect(instance.totalInstallCount).to.be(expectedValueLiteral);
      });

    });
  });

}));
