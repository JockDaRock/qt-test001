/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PerchApi);
  }
}(this, function(expect, PerchApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TeamMfaSettings', function() {
      beforeEach(function() {
        instance = new PerchApi.TeamMfaSettings();
      });

      it('should create an instance of TeamMfaSettings', function() {
        // TODO: update the code to test TeamMfaSettings
        expect(instance).to.be.a(PerchApi.TeamMfaSettings);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property team (base name: "team")', function() {
        // TODO: update the code to test the property team
        expect(instance).to.have.property('team');
        // expect(instance.team).to.be(expectedValueLiteral);
      });

      it('should have the property isMfaMandatory (base name: "is_mfa_mandatory")', function() {
        // TODO: update the code to test the property isMfaMandatory
        expect(instance).to.have.property('isMfaMandatory');
        // expect(instance.isMfaMandatory).to.be(expectedValueLiteral);
      });

      it('should have the property useDuoMfa (base name: "use_duo_mfa")', function() {
        // TODO: update the code to test the property useDuoMfa
        expect(instance).to.have.property('useDuoMfa');
        // expect(instance.useDuoMfa).to.be(expectedValueLiteral);
      });

      it('should have the property duoMfaIkey (base name: "duo_mfa_ikey")', function() {
        // TODO: update the code to test the property duoMfaIkey
        expect(instance).to.have.property('duoMfaIkey');
        // expect(instance.duoMfaIkey).to.be(expectedValueLiteral);
      });

      it('should have the property duoMfaSkey (base name: "duo_mfa_skey")', function() {
        // TODO: update the code to test the property duoMfaSkey
        expect(instance).to.have.property('duoMfaSkey');
        // expect(instance.duoMfaSkey).to.be(expectedValueLiteral);
      });

      it('should have the property duoMfaHostname (base name: "duo_mfa_hostname")', function() {
        // TODO: update the code to test the property duoMfaHostname
        expect(instance).to.have.property('duoMfaHostname');
        // expect(instance.duoMfaHostname).to.be(expectedValueLiteral);
      });

      it('should have the property duoDisableRememberBrowser (base name: "duo_disable_remember_browser")', function() {
        // TODO: update the code to test the property duoDisableRememberBrowser
        expect(instance).to.have.property('duoDisableRememberBrowser');
        // expect(instance.duoDisableRememberBrowser).to.be(expectedValueLiteral);
      });

    });
  });

}));
