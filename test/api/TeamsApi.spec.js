/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PerchApi);
  }
}(this, function(expect, PerchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PerchApi.TeamsApi();
  });

  describe('(package)', function() {
    describe('TeamsApi', function() {
      describe('teamsBlacklistCreate', function() {
        it('should call teamsBlacklistCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for teamsBlacklistCreate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var version = "version_example";
          var data = new PerchApi.PublicFirewallBlacklistSerializer();
          data.createdBy = new PerchApi.PublicUserSerializer();
          data.createdBy.name = "";
          data.createdBy.username = "";
          data.updatedBy = new PerchApi.PublicUserSerializer();
          data.updatedBy.name = "";
          data.updatedBy.username = "";
          data.brand = 0;
          data.type = 0;
          data.value = "";
          data.team = new PerchApi.PublicTeamSerializer();
          data.team.name = "";

          instance.teamsBlacklistCreate(companyId, version, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.PublicFirewallBlacklistSerializer);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a(PerchApi.PublicUserSerializer);
                  expect(data.createdBy.id).to.be.a('number');
              expect(data.createdBy.id).to.be(0);
              expect(data.createdBy.name).to.be.a('string');
              expect(data.createdBy.name).to.be("");
              expect(data.createdBy.username).to.be.a('string');
              expect(data.createdBy.username).to.be("");
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a(PerchApi.PublicUserSerializer);
                  expect(data.updatedBy.id).to.be.a('number');
              expect(data.updatedBy.id).to.be(0);
              expect(data.updatedBy.name).to.be.a('string');
              expect(data.updatedBy.name).to.be("");
              expect(data.updatedBy.username).to.be.a('string');
              expect(data.updatedBy.username).to.be("");
            expect(data.brand).to.be.a('number');
            expect(data.brand).to.be(0);
            expect(data.brandName).to.be.a('string');
            expect(data.brandName).to.be("");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(0);
            expect(data.typeName).to.be.a('string');
            expect(data.typeName).to.be("");
            expect(data.value).to.be.a('string');
            expect(data.value).to.be("");
            expect(data.team).to.be.a(PerchApi.PublicTeamSerializer);
                  expect(data.team.id).to.be.a('number');
              expect(data.team.id).to.be(0);
              expect(data.team.name).to.be.a('string');
              expect(data.team.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamsBlacklistDelete', function() {
        it('should call teamsBlacklistDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for teamsBlacklistDelete call
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var version = "version_example";

          instance.teamsBlacklistDelete(companyId, id, version, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamsBlacklistList', function() {
        it('should call teamsBlacklistList successfully', function(done) {
          // TODO: uncomment, update parameter values for teamsBlacklistList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var version = "version_example";
          var opts = {};
          opts.createdBy = "createdBy_example";
          opts.updatedBy = "updatedBy_example";
          opts.brand = "brand_example";
          opts.type = "type_example";
          opts.value = "value_example";
          opts.createdAt = "createdAt_example";
          opts.createdAtGte = "createdAtGte_example";
          opts.createdAtGt = "createdAtGt_example";
          opts.createdAtLte = "createdAtLte_example";
          opts.createdAtLt = "createdAtLt_example";
          opts.updatedAt = "updatedAt_example";
          opts.updatedAtGte = "updatedAtGte_example";
          opts.updatedAtGt = "updatedAtGt_example";
          opts.updatedAtLte = "updatedAtLte_example";
          opts.updatedAtLt = "updatedAtLt_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.teamsBlacklistList(companyId, version, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse20023);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.PublicFirewallBlacklistSerializer);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(new Date());
                expect(data.createdBy).to.be.a(PerchApi.PublicUserSerializer);
                      expect(data.createdBy.id).to.be.a('number');
                  expect(data.createdBy.id).to.be(0);
                  expect(data.createdBy.name).to.be.a('string');
                  expect(data.createdBy.name).to.be("");
                  expect(data.createdBy.username).to.be.a('string');
                  expect(data.createdBy.username).to.be("");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(new Date());
                expect(data.updatedBy).to.be.a(PerchApi.PublicUserSerializer);
                      expect(data.updatedBy.id).to.be.a('number');
                  expect(data.updatedBy.id).to.be(0);
                  expect(data.updatedBy.name).to.be.a('string');
                  expect(data.updatedBy.name).to.be("");
                  expect(data.updatedBy.username).to.be.a('string');
                  expect(data.updatedBy.username).to.be("");
                expect(data.brand).to.be.a('number');
                expect(data.brand).to.be(0);
                expect(data.brandName).to.be.a('string');
                expect(data.brandName).to.be("");
                expect(data.type).to.be.a('number');
                expect(data.type).to.be(0);
                expect(data.typeName).to.be.a('string');
                expect(data.typeName).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                expect(data.team).to.be.a(PerchApi.PublicTeamSerializer);
                      expect(data.team.id).to.be.a('number');
                  expect(data.team.id).to.be(0);
                  expect(data.team.name).to.be.a('string');
                  expect(data.team.name).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamsBlacklistPartialUpdate', function() {
        it('should call teamsBlacklistPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for teamsBlacklistPartialUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var version = "version_example";
          var data = new PerchApi.PublicFirewallBlacklistSerializer();
          data.createdBy = new PerchApi.PublicUserSerializer();
          data.createdBy.name = "";
          data.createdBy.username = "";
          data.updatedBy = new PerchApi.PublicUserSerializer();
          data.updatedBy.name = "";
          data.updatedBy.username = "";
          data.brand = 0;
          data.type = 0;
          data.value = "";
          data.team = new PerchApi.PublicTeamSerializer();
          data.team.name = "";

          instance.teamsBlacklistPartialUpdate(companyId, id, version, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.PublicFirewallBlacklistSerializer);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a(PerchApi.PublicUserSerializer);
                  expect(data.createdBy.id).to.be.a('number');
              expect(data.createdBy.id).to.be(0);
              expect(data.createdBy.name).to.be.a('string');
              expect(data.createdBy.name).to.be("");
              expect(data.createdBy.username).to.be.a('string');
              expect(data.createdBy.username).to.be("");
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a(PerchApi.PublicUserSerializer);
                  expect(data.updatedBy.id).to.be.a('number');
              expect(data.updatedBy.id).to.be(0);
              expect(data.updatedBy.name).to.be.a('string');
              expect(data.updatedBy.name).to.be("");
              expect(data.updatedBy.username).to.be.a('string');
              expect(data.updatedBy.username).to.be("");
            expect(data.brand).to.be.a('number');
            expect(data.brand).to.be(0);
            expect(data.brandName).to.be.a('string');
            expect(data.brandName).to.be("");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(0);
            expect(data.typeName).to.be.a('string');
            expect(data.typeName).to.be("");
            expect(data.value).to.be.a('string');
            expect(data.value).to.be("");
            expect(data.team).to.be.a(PerchApi.PublicTeamSerializer);
                  expect(data.team.id).to.be.a('number');
              expect(data.team.id).to.be(0);
              expect(data.team.name).to.be.a('string');
              expect(data.team.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamsBlacklistRead', function() {
        it('should call teamsBlacklistRead successfully', function(done) {
          // TODO: uncomment, update parameter values for teamsBlacklistRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var version = "version_example";

          instance.teamsBlacklistRead(companyId, id, version, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.PublicFirewallBlacklistSerializer);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a(PerchApi.PublicUserSerializer);
                  expect(data.createdBy.id).to.be.a('number');
              expect(data.createdBy.id).to.be(0);
              expect(data.createdBy.name).to.be.a('string');
              expect(data.createdBy.name).to.be("");
              expect(data.createdBy.username).to.be.a('string');
              expect(data.createdBy.username).to.be("");
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a(PerchApi.PublicUserSerializer);
                  expect(data.updatedBy.id).to.be.a('number');
              expect(data.updatedBy.id).to.be(0);
              expect(data.updatedBy.name).to.be.a('string');
              expect(data.updatedBy.name).to.be("");
              expect(data.updatedBy.username).to.be.a('string');
              expect(data.updatedBy.username).to.be("");
            expect(data.brand).to.be.a('number');
            expect(data.brand).to.be(0);
            expect(data.brandName).to.be.a('string');
            expect(data.brandName).to.be("");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(0);
            expect(data.typeName).to.be.a('string');
            expect(data.typeName).to.be("");
            expect(data.value).to.be.a('string');
            expect(data.value).to.be("");
            expect(data.team).to.be.a(PerchApi.PublicTeamSerializer);
                  expect(data.team.id).to.be.a('number');
              expect(data.team.id).to.be(0);
              expect(data.team.name).to.be.a('string');
              expect(data.team.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamsBlacklistUpdate', function() {
        it('should call teamsBlacklistUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for teamsBlacklistUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var version = "version_example";
          var data = new PerchApi.PublicFirewallBlacklistSerializer();
          data.createdBy = new PerchApi.PublicUserSerializer();
          data.createdBy.name = "";
          data.createdBy.username = "";
          data.updatedBy = new PerchApi.PublicUserSerializer();
          data.updatedBy.name = "";
          data.updatedBy.username = "";
          data.brand = 0;
          data.type = 0;
          data.value = "";
          data.team = new PerchApi.PublicTeamSerializer();
          data.team.name = "";

          instance.teamsBlacklistUpdate(companyId, id, version, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.PublicFirewallBlacklistSerializer);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a(PerchApi.PublicUserSerializer);
                  expect(data.createdBy.id).to.be.a('number');
              expect(data.createdBy.id).to.be(0);
              expect(data.createdBy.name).to.be.a('string');
              expect(data.createdBy.name).to.be("");
              expect(data.createdBy.username).to.be.a('string');
              expect(data.createdBy.username).to.be("");
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a(PerchApi.PublicUserSerializer);
                  expect(data.updatedBy.id).to.be.a('number');
              expect(data.updatedBy.id).to.be(0);
              expect(data.updatedBy.name).to.be.a('string');
              expect(data.updatedBy.name).to.be("");
              expect(data.updatedBy.username).to.be.a('string');
              expect(data.updatedBy.username).to.be("");
            expect(data.brand).to.be.a('number');
            expect(data.brand).to.be(0);
            expect(data.brandName).to.be.a('string');
            expect(data.brandName).to.be("");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(0);
            expect(data.typeName).to.be.a('string');
            expect(data.typeName).to.be("");
            expect(data.value).to.be.a('string');
            expect(data.value).to.be("");
            expect(data.team).to.be.a(PerchApi.PublicTeamSerializer);
                  expect(data.team.id).to.be.a('number');
              expect(data.team.id).to.be(0);
              expect(data.team.name).to.be.a('string');
              expect(data.team.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamsCommentsList', function() {
        it('should call teamsCommentsList successfully', function(done) {
          // TODO: uncomment, update parameter values for teamsCommentsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.group = "group_example";
          opts.text = "text_example";
          opts.textIexact = "textIexact_example";
          opts.textGt = "textGt_example";
          opts.textGte = "textGte_example";
          opts.textLt = "textLt_example";
          opts.textLte = "textLte_example";
          opts.textIn = "textIn_example";
          opts.textContains = "textContains_example";
          opts.textIcontains = "textIcontains_example";
          opts.textStartswith = "textStartswith_example";
          opts.textIstartswith = "textIstartswith_example";
          opts.textEndswith = "textEndswith_example";
          opts.textIendswith = "textIendswith_example";
          opts.textRange = "textRange_example";
          opts.textIsnull = "textIsnull_example";
          opts.textRegex = "textRegex_example";
          opts.textIregex = "textIregex_example";
          opts.textUnaccent = "textUnaccent_example";
          opts.textUnaccentIexact = "textUnaccentIexact_example";
          opts.textUnaccentGt = "textUnaccentGt_example";
          opts.textUnaccentGte = "textUnaccentGte_example";
          opts.textUnaccentLt = "textUnaccentLt_example";
          opts.textUnaccentLte = "textUnaccentLte_example";
          opts.textUnaccentIn = "textUnaccentIn_example";
          opts.textUnaccentContains = "textUnaccentContains_example";
          opts.textUnaccentIcontains = "textUnaccentIcontains_example";
          opts.textUnaccentStartswith = "textUnaccentStartswith_example";
          opts.textUnaccentIstartswith = "textUnaccentIstartswith_example";
          opts.textUnaccentEndswith = "textUnaccentEndswith_example";
          opts.textUnaccentIendswith = "textUnaccentIendswith_example";
          opts.textUnaccentRange = "textUnaccentRange_example";
          opts.textUnaccentIsnull = "textUnaccentIsnull_example";
          opts.textUnaccentRegex = "textUnaccentRegex_example";
          opts.textUnaccentIregex = "textUnaccentIregex_example";
          opts.textUnaccentSearch = "textUnaccentSearch_example";
          opts.textUnaccentTrigramSimilar = "textUnaccentTrigramSimilar_example";
          opts.textSearch = "textSearch_example";
          opts.textTrigramSimilar = "textTrigramSimilar_example";
          opts.privateFor = "privateFor_example";
          opts.anonymous = "anonymous_example";
          opts.visibility = "visibility_example";
          opts.createdBy = "createdBy_example";
          opts.createdAt = "createdAt_example";
          opts.createdAtIexact = "createdAtIexact_example";
          opts.createdAtGt = "createdAtGt_example";
          opts.createdAtGte = "createdAtGte_example";
          opts.createdAtLt = "createdAtLt_example";
          opts.createdAtLte = "createdAtLte_example";
          opts.createdAtIn = "createdAtIn_example";
          opts.createdAtContains = "createdAtContains_example";
          opts.createdAtIcontains = "createdAtIcontains_example";
          opts.createdAtStartswith = "createdAtStartswith_example";
          opts.createdAtIstartswith = "createdAtIstartswith_example";
          opts.createdAtEndswith = "createdAtEndswith_example";
          opts.createdAtIendswith = "createdAtIendswith_example";
          opts.createdAtRange = "createdAtRange_example";
          opts.createdAtIsnull = "createdAtIsnull_example";
          opts.createdAtRegex = "createdAtRegex_example";
          opts.createdAtIregex = "createdAtIregex_example";
          opts.createdAtYear = 8.14;
          opts.createdAtYearIexact = 8.14;
          opts.createdAtYearGt = 8.14;
          opts.createdAtYearGte = 8.14;
          opts.createdAtYearLt = 8.14;
          opts.createdAtYearLte = 8.14;
          opts.createdAtYearIn = 8.14;
          opts.createdAtYearContains = 8.14;
          opts.createdAtYearIcontains = 8.14;
          opts.createdAtYearStartswith = 8.14;
          opts.createdAtYearIstartswith = 8.14;
          opts.createdAtYearEndswith = 8.14;
          opts.createdAtYearIendswith = 8.14;
          opts.createdAtYearRange = 8.14;
          opts.createdAtYearIsnull = "createdAtYearIsnull_example";
          opts.createdAtYearRegex = 8.14;
          opts.createdAtYearIregex = 8.14;
          opts.createdAtYearContainedBy = 8.14;
          opts.createdAtMonth = 8.14;
          opts.createdAtMonthIexact = 8.14;
          opts.createdAtMonthGt = 8.14;
          opts.createdAtMonthGte = 8.14;
          opts.createdAtMonthLt = 8.14;
          opts.createdAtMonthLte = 8.14;
          opts.createdAtMonthIn = 8.14;
          opts.createdAtMonthContains = 8.14;
          opts.createdAtMonthIcontains = 8.14;
          opts.createdAtMonthStartswith = 8.14;
          opts.createdAtMonthIstartswith = 8.14;
          opts.createdAtMonthEndswith = 8.14;
          opts.createdAtMonthIendswith = 8.14;
          opts.createdAtMonthRange = 8.14;
          opts.createdAtMonthIsnull = "createdAtMonthIsnull_example";
          opts.createdAtMonthRegex = 8.14;
          opts.createdAtMonthIregex = 8.14;
          opts.createdAtMonthContainedBy = 8.14;
          opts.createdAtDay = 8.14;
          opts.createdAtDayIexact = 8.14;
          opts.createdAtDayGt = 8.14;
          opts.createdAtDayGte = 8.14;
          opts.createdAtDayLt = 8.14;
          opts.createdAtDayLte = 8.14;
          opts.createdAtDayIn = 8.14;
          opts.createdAtDayContains = 8.14;
          opts.createdAtDayIcontains = 8.14;
          opts.createdAtDayStartswith = 8.14;
          opts.createdAtDayIstartswith = 8.14;
          opts.createdAtDayEndswith = 8.14;
          opts.createdAtDayIendswith = 8.14;
          opts.createdAtDayRange = 8.14;
          opts.createdAtDayIsnull = "createdAtDayIsnull_example";
          opts.createdAtDayRegex = 8.14;
          opts.createdAtDayIregex = 8.14;
          opts.createdAtDayContainedBy = 8.14;
          opts.createdAtWeekDay = 8.14;
          opts.createdAtWeekDayIexact = 8.14;
          opts.createdAtWeekDayGt = 8.14;
          opts.createdAtWeekDayGte = 8.14;
          opts.createdAtWeekDayLt = 8.14;
          opts.createdAtWeekDayLte = 8.14;
          opts.createdAtWeekDayIn = 8.14;
          opts.createdAtWeekDayContains = 8.14;
          opts.createdAtWeekDayIcontains = 8.14;
          opts.createdAtWeekDayStartswith = 8.14;
          opts.createdAtWeekDayIstartswith = 8.14;
          opts.createdAtWeekDayEndswith = 8.14;
          opts.createdAtWeekDayIendswith = 8.14;
          opts.createdAtWeekDayRange = 8.14;
          opts.createdAtWeekDayIsnull = "createdAtWeekDayIsnull_example";
          opts.createdAtWeekDayRegex = 8.14;
          opts.createdAtWeekDayIregex = 8.14;
          opts.createdAtWeekDayContainedBy = 8.14;
          opts.createdAtWeek = 8.14;
          opts.createdAtWeekIexact = 8.14;
          opts.createdAtWeekGt = 8.14;
          opts.createdAtWeekGte = 8.14;
          opts.createdAtWeekLt = 8.14;
          opts.createdAtWeekLte = 8.14;
          opts.createdAtWeekIn = 8.14;
          opts.createdAtWeekContains = 8.14;
          opts.createdAtWeekIcontains = 8.14;
          opts.createdAtWeekStartswith = 8.14;
          opts.createdAtWeekIstartswith = 8.14;
          opts.createdAtWeekEndswith = 8.14;
          opts.createdAtWeekIendswith = 8.14;
          opts.createdAtWeekRange = 8.14;
          opts.createdAtWeekIsnull = "createdAtWeekIsnull_example";
          opts.createdAtWeekRegex = 8.14;
          opts.createdAtWeekIregex = 8.14;
          opts.createdAtWeekContainedBy = 8.14;
          opts.createdAtIsoYear = 8.14;
          opts.createdAtIsoYearIexact = 8.14;
          opts.createdAtIsoYearGt = 8.14;
          opts.createdAtIsoYearGte = 8.14;
          opts.createdAtIsoYearLt = 8.14;
          opts.createdAtIsoYearLte = 8.14;
          opts.createdAtIsoYearIn = 8.14;
          opts.createdAtIsoYearContains = 8.14;
          opts.createdAtIsoYearIcontains = 8.14;
          opts.createdAtIsoYearStartswith = 8.14;
          opts.createdAtIsoYearIstartswith = 8.14;
          opts.createdAtIsoYearEndswith = 8.14;
          opts.createdAtIsoYearIendswith = 8.14;
          opts.createdAtIsoYearRange = 8.14;
          opts.createdAtIsoYearIsnull = "createdAtIsoYearIsnull_example";
          opts.createdAtIsoYearRegex = 8.14;
          opts.createdAtIsoYearIregex = 8.14;
          opts.createdAtIsoYearContainedBy = 8.14;
          opts.createdAtQuarter = 8.14;
          opts.createdAtQuarterIexact = 8.14;
          opts.createdAtQuarterGt = 8.14;
          opts.createdAtQuarterGte = 8.14;
          opts.createdAtQuarterLt = 8.14;
          opts.createdAtQuarterLte = 8.14;
          opts.createdAtQuarterIn = 8.14;
          opts.createdAtQuarterContains = 8.14;
          opts.createdAtQuarterIcontains = 8.14;
          opts.createdAtQuarterStartswith = 8.14;
          opts.createdAtQuarterIstartswith = 8.14;
          opts.createdAtQuarterEndswith = 8.14;
          opts.createdAtQuarterIendswith = 8.14;
          opts.createdAtQuarterRange = 8.14;
          opts.createdAtQuarterIsnull = "createdAtQuarterIsnull_example";
          opts.createdAtQuarterRegex = 8.14;
          opts.createdAtQuarterIregex = 8.14;
          opts.createdAtQuarterContainedBy = 8.14;
          opts.createdAtContainedBy = "createdAtContainedBy_example";
          opts.createdAtHour = 8.14;
          opts.createdAtHourIexact = 8.14;
          opts.createdAtHourGt = 8.14;
          opts.createdAtHourGte = 8.14;
          opts.createdAtHourLt = 8.14;
          opts.createdAtHourLte = 8.14;
          opts.createdAtHourIn = 8.14;
          opts.createdAtHourContains = 8.14;
          opts.createdAtHourIcontains = 8.14;
          opts.createdAtHourStartswith = 8.14;
          opts.createdAtHourIstartswith = 8.14;
          opts.createdAtHourEndswith = 8.14;
          opts.createdAtHourIendswith = 8.14;
          opts.createdAtHourRange = 8.14;
          opts.createdAtHourIsnull = "createdAtHourIsnull_example";
          opts.createdAtHourRegex = 8.14;
          opts.createdAtHourIregex = 8.14;
          opts.createdAtHourContainedBy = 8.14;
          opts.createdAtMinute = 8.14;
          opts.createdAtMinuteIexact = 8.14;
          opts.createdAtMinuteGt = 8.14;
          opts.createdAtMinuteGte = 8.14;
          opts.createdAtMinuteLt = 8.14;
          opts.createdAtMinuteLte = 8.14;
          opts.createdAtMinuteIn = 8.14;
          opts.createdAtMinuteContains = 8.14;
          opts.createdAtMinuteIcontains = 8.14;
          opts.createdAtMinuteStartswith = 8.14;
          opts.createdAtMinuteIstartswith = 8.14;
          opts.createdAtMinuteEndswith = 8.14;
          opts.createdAtMinuteIendswith = 8.14;
          opts.createdAtMinuteRange = 8.14;
          opts.createdAtMinuteIsnull = "createdAtMinuteIsnull_example";
          opts.createdAtMinuteRegex = 8.14;
          opts.createdAtMinuteIregex = 8.14;
          opts.createdAtMinuteContainedBy = 8.14;
          opts.createdAtSecond = 8.14;
          opts.createdAtSecondIexact = 8.14;
          opts.createdAtSecondGt = 8.14;
          opts.createdAtSecondGte = 8.14;
          opts.createdAtSecondLt = 8.14;
          opts.createdAtSecondLte = 8.14;
          opts.createdAtSecondIn = 8.14;
          opts.createdAtSecondContains = 8.14;
          opts.createdAtSecondIcontains = 8.14;
          opts.createdAtSecondStartswith = 8.14;
          opts.createdAtSecondIstartswith = 8.14;
          opts.createdAtSecondEndswith = 8.14;
          opts.createdAtSecondIendswith = 8.14;
          opts.createdAtSecondRange = 8.14;
          opts.createdAtSecondIsnull = "createdAtSecondIsnull_example";
          opts.createdAtSecondRegex = 8.14;
          opts.createdAtSecondIregex = 8.14;
          opts.createdAtSecondContainedBy = 8.14;
          opts.createdAtDate = "createdAtDate_example";
          opts.createdAtDateIexact = "createdAtDateIexact_example";
          opts.createdAtDateGt = "createdAtDateGt_example";
          opts.createdAtDateGte = "createdAtDateGte_example";
          opts.createdAtDateLt = "createdAtDateLt_example";
          opts.createdAtDateLte = "createdAtDateLte_example";
          opts.createdAtDateIn = "createdAtDateIn_example";
          opts.createdAtDateContains = "createdAtDateContains_example";
          opts.createdAtDateIcontains = "createdAtDateIcontains_example";
          opts.createdAtDateStartswith = "createdAtDateStartswith_example";
          opts.createdAtDateIstartswith = "createdAtDateIstartswith_example";
          opts.createdAtDateEndswith = "createdAtDateEndswith_example";
          opts.createdAtDateIendswith = "createdAtDateIendswith_example";
          opts.createdAtDateRange = "createdAtDateRange_example";
          opts.createdAtDateIsnull = "createdAtDateIsnull_example";
          opts.createdAtDateRegex = "createdAtDateRegex_example";
          opts.createdAtDateIregex = "createdAtDateIregex_example";
          opts.createdAtDateYear = 8.14;
          opts.createdAtDateYearIexact = 8.14;
          opts.createdAtDateYearGt = 8.14;
          opts.createdAtDateYearGte = 8.14;
          opts.createdAtDateYearLt = 8.14;
          opts.createdAtDateYearLte = 8.14;
          opts.createdAtDateYearIn = 8.14;
          opts.createdAtDateYearContains = 8.14;
          opts.createdAtDateYearIcontains = 8.14;
          opts.createdAtDateYearStartswith = 8.14;
          opts.createdAtDateYearIstartswith = 8.14;
          opts.createdAtDateYearEndswith = 8.14;
          opts.createdAtDateYearIendswith = 8.14;
          opts.createdAtDateYearRange = 8.14;
          opts.createdAtDateYearIsnull = "createdAtDateYearIsnull_example";
          opts.createdAtDateYearRegex = 8.14;
          opts.createdAtDateYearIregex = 8.14;
          opts.createdAtDateYearContainedBy = 8.14;
          opts.createdAtDateMonth = 8.14;
          opts.createdAtDateMonthIexact = 8.14;
          opts.createdAtDateMonthGt = 8.14;
          opts.createdAtDateMonthGte = 8.14;
          opts.createdAtDateMonthLt = 8.14;
          opts.createdAtDateMonthLte = 8.14;
          opts.createdAtDateMonthIn = 8.14;
          opts.createdAtDateMonthContains = 8.14;
          opts.createdAtDateMonthIcontains = 8.14;
          opts.createdAtDateMonthStartswith = 8.14;
          opts.createdAtDateMonthIstartswith = 8.14;
          opts.createdAtDateMonthEndswith = 8.14;
          opts.createdAtDateMonthIendswith = 8.14;
          opts.createdAtDateMonthRange = 8.14;
          opts.createdAtDateMonthIsnull = "createdAtDateMonthIsnull_example";
          opts.createdAtDateMonthRegex = 8.14;
          opts.createdAtDateMonthIregex = 8.14;
          opts.createdAtDateMonthContainedBy = 8.14;
          opts.createdAtDateDay = 8.14;
          opts.createdAtDateDayIexact = 8.14;
          opts.createdAtDateDayGt = 8.14;
          opts.createdAtDateDayGte = 8.14;
          opts.createdAtDateDayLt = 8.14;
          opts.createdAtDateDayLte = 8.14;
          opts.createdAtDateDayIn = 8.14;
          opts.createdAtDateDayContains = 8.14;
          opts.createdAtDateDayIcontains = 8.14;
          opts.createdAtDateDayStartswith = 8.14;
          opts.createdAtDateDayIstartswith = 8.14;
          opts.createdAtDateDayEndswith = 8.14;
          opts.createdAtDateDayIendswith = 8.14;
          opts.createdAtDateDayRange = 8.14;
          opts.createdAtDateDayIsnull = "createdAtDateDayIsnull_example";
          opts.createdAtDateDayRegex = 8.14;
          opts.createdAtDateDayIregex = 8.14;
          opts.createdAtDateDayContainedBy = 8.14;
          opts.createdAtDateWeekDay = 8.14;
          opts.createdAtDateWeekDayIexact = 8.14;
          opts.createdAtDateWeekDayGt = 8.14;
          opts.createdAtDateWeekDayGte = 8.14;
          opts.createdAtDateWeekDayLt = 8.14;
          opts.createdAtDateWeekDayLte = 8.14;
          opts.createdAtDateWeekDayIn = 8.14;
          opts.createdAtDateWeekDayContains = 8.14;
          opts.createdAtDateWeekDayIcontains = 8.14;
          opts.createdAtDateWeekDayStartswith = 8.14;
          opts.createdAtDateWeekDayIstartswith = 8.14;
          opts.createdAtDateWeekDayEndswith = 8.14;
          opts.createdAtDateWeekDayIendswith = 8.14;
          opts.createdAtDateWeekDayRange = 8.14;
          opts.createdAtDateWeekDayIsnull = "createdAtDateWeekDayIsnull_example";
          opts.createdAtDateWeekDayRegex = 8.14;
          opts.createdAtDateWeekDayIregex = 8.14;
          opts.createdAtDateWeekDayContainedBy = 8.14;
          opts.createdAtDateWeek = 8.14;
          opts.createdAtDateWeekIexact = 8.14;
          opts.createdAtDateWeekGt = 8.14;
          opts.createdAtDateWeekGte = 8.14;
          opts.createdAtDateWeekLt = 8.14;
          opts.createdAtDateWeekLte = 8.14;
          opts.createdAtDateWeekIn = 8.14;
          opts.createdAtDateWeekContains = 8.14;
          opts.createdAtDateWeekIcontains = 8.14;
          opts.createdAtDateWeekStartswith = 8.14;
          opts.createdAtDateWeekIstartswith = 8.14;
          opts.createdAtDateWeekEndswith = 8.14;
          opts.createdAtDateWeekIendswith = 8.14;
          opts.createdAtDateWeekRange = 8.14;
          opts.createdAtDateWeekIsnull = "createdAtDateWeekIsnull_example";
          opts.createdAtDateWeekRegex = 8.14;
          opts.createdAtDateWeekIregex = 8.14;
          opts.createdAtDateWeekContainedBy = 8.14;
          opts.createdAtDateIsoYear = 8.14;
          opts.createdAtDateIsoYearIexact = 8.14;
          opts.createdAtDateIsoYearGt = 8.14;
          opts.createdAtDateIsoYearGte = 8.14;
          opts.createdAtDateIsoYearLt = 8.14;
          opts.createdAtDateIsoYearLte = 8.14;
          opts.createdAtDateIsoYearIn = 8.14;
          opts.createdAtDateIsoYearContains = 8.14;
          opts.createdAtDateIsoYearIcontains = 8.14;
          opts.createdAtDateIsoYearStartswith = 8.14;
          opts.createdAtDateIsoYearIstartswith = 8.14;
          opts.createdAtDateIsoYearEndswith = 8.14;
          opts.createdAtDateIsoYearIendswith = 8.14;
          opts.createdAtDateIsoYearRange = 8.14;
          opts.createdAtDateIsoYearIsnull = "createdAtDateIsoYearIsnull_example";
          opts.createdAtDateIsoYearRegex = 8.14;
          opts.createdAtDateIsoYearIregex = 8.14;
          opts.createdAtDateIsoYearContainedBy = 8.14;
          opts.createdAtDateQuarter = 8.14;
          opts.createdAtDateQuarterIexact = 8.14;
          opts.createdAtDateQuarterGt = 8.14;
          opts.createdAtDateQuarterGte = 8.14;
          opts.createdAtDateQuarterLt = 8.14;
          opts.createdAtDateQuarterLte = 8.14;
          opts.createdAtDateQuarterIn = 8.14;
          opts.createdAtDateQuarterContains = 8.14;
          opts.createdAtDateQuarterIcontains = 8.14;
          opts.createdAtDateQuarterStartswith = 8.14;
          opts.createdAtDateQuarterIstartswith = 8.14;
          opts.createdAtDateQuarterEndswith = 8.14;
          opts.createdAtDateQuarterIendswith = 8.14;
          opts.createdAtDateQuarterRange = 8.14;
          opts.createdAtDateQuarterIsnull = "createdAtDateQuarterIsnull_example";
          opts.createdAtDateQuarterRegex = 8.14;
          opts.createdAtDateQuarterIregex = 8.14;
          opts.createdAtDateQuarterContainedBy = 8.14;
          opts.createdAtDateContainedBy = "createdAtDateContainedBy_example";
          opts.createdAtTime = "createdAtTime_example";
          opts.createdAtTimeIexact = "createdAtTimeIexact_example";
          opts.createdAtTimeGt = "createdAtTimeGt_example";
          opts.createdAtTimeGte = "createdAtTimeGte_example";
          opts.createdAtTimeLt = "createdAtTimeLt_example";
          opts.createdAtTimeLte = "createdAtTimeLte_example";
          opts.createdAtTimeIn = "createdAtTimeIn_example";
          opts.createdAtTimeContains = "createdAtTimeContains_example";
          opts.createdAtTimeIcontains = "createdAtTimeIcontains_example";
          opts.createdAtTimeStartswith = "createdAtTimeStartswith_example";
          opts.createdAtTimeIstartswith = "createdAtTimeIstartswith_example";
          opts.createdAtTimeEndswith = "createdAtTimeEndswith_example";
          opts.createdAtTimeIendswith = "createdAtTimeIendswith_example";
          opts.createdAtTimeRange = "createdAtTimeRange_example";
          opts.createdAtTimeIsnull = "createdAtTimeIsnull_example";
          opts.createdAtTimeRegex = "createdAtTimeRegex_example";
          opts.createdAtTimeIregex = "createdAtTimeIregex_example";
          opts.createdAtTimeHour = 8.14;
          opts.createdAtTimeHourIexact = 8.14;
          opts.createdAtTimeHourGt = 8.14;
          opts.createdAtTimeHourGte = 8.14;
          opts.createdAtTimeHourLt = 8.14;
          opts.createdAtTimeHourLte = 8.14;
          opts.createdAtTimeHourIn = 8.14;
          opts.createdAtTimeHourContains = 8.14;
          opts.createdAtTimeHourIcontains = 8.14;
          opts.createdAtTimeHourStartswith = 8.14;
          opts.createdAtTimeHourIstartswith = 8.14;
          opts.createdAtTimeHourEndswith = 8.14;
          opts.createdAtTimeHourIendswith = 8.14;
          opts.createdAtTimeHourRange = 8.14;
          opts.createdAtTimeHourIsnull = "createdAtTimeHourIsnull_example";
          opts.createdAtTimeHourRegex = 8.14;
          opts.createdAtTimeHourIregex = 8.14;
          opts.createdAtTimeHourContainedBy = 8.14;
          opts.createdAtTimeMinute = 8.14;
          opts.createdAtTimeMinuteIexact = 8.14;
          opts.createdAtTimeMinuteGt = 8.14;
          opts.createdAtTimeMinuteGte = 8.14;
          opts.createdAtTimeMinuteLt = 8.14;
          opts.createdAtTimeMinuteLte = 8.14;
          opts.createdAtTimeMinuteIn = 8.14;
          opts.createdAtTimeMinuteContains = 8.14;
          opts.createdAtTimeMinuteIcontains = 8.14;
          opts.createdAtTimeMinuteStartswith = 8.14;
          opts.createdAtTimeMinuteIstartswith = 8.14;
          opts.createdAtTimeMinuteEndswith = 8.14;
          opts.createdAtTimeMinuteIendswith = 8.14;
          opts.createdAtTimeMinuteRange = 8.14;
          opts.createdAtTimeMinuteIsnull = "createdAtTimeMinuteIsnull_example";
          opts.createdAtTimeMinuteRegex = 8.14;
          opts.createdAtTimeMinuteIregex = 8.14;
          opts.createdAtTimeMinuteContainedBy = 8.14;
          opts.createdAtTimeSecond = 8.14;
          opts.createdAtTimeSecondIexact = 8.14;
          opts.createdAtTimeSecondGt = 8.14;
          opts.createdAtTimeSecondGte = 8.14;
          opts.createdAtTimeSecondLt = 8.14;
          opts.createdAtTimeSecondLte = 8.14;
          opts.createdAtTimeSecondIn = 8.14;
          opts.createdAtTimeSecondContains = 8.14;
          opts.createdAtTimeSecondIcontains = 8.14;
          opts.createdAtTimeSecondStartswith = 8.14;
          opts.createdAtTimeSecondIstartswith = 8.14;
          opts.createdAtTimeSecondEndswith = 8.14;
          opts.createdAtTimeSecondIendswith = 8.14;
          opts.createdAtTimeSecondRange = 8.14;
          opts.createdAtTimeSecondIsnull = "createdAtTimeSecondIsnull_example";
          opts.createdAtTimeSecondRegex = 8.14;
          opts.createdAtTimeSecondIregex = 8.14;
          opts.createdAtTimeSecondContainedBy = 8.14;
          opts.ordering = "ordering_example";
          opts.page = 56;
          opts.pageSize = 56;

          instance.teamsCommentsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse20012);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.IndicatorComment);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.groupId).to.be.a('number');
                expect(data.groupId).to.be(0);
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.privateFor).to.be.a('number');
                expect(data.privateFor).to.be(0);
                expect(data.anonymous).to.be.a('boolean');
                expect(data.anonymous).to.be(false);
                expect(data.visibility).to.be.a('number');
                expect(data.visibility).to.be(0);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(new Date());
                expect(data.canDelete).to.be.a('string');
                expect(data.canDelete).to.be("");
                expect(data.indicatorId).to.be.a('string');
                expect(data.indicatorId).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamsCommentsRead', function() {
        it('should call teamsCommentsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for teamsCommentsRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.teamsCommentsRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.IndicatorComment);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.groupId).to.be.a('number');
            expect(data.groupId).to.be(0);
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.privateFor).to.be.a('number');
            expect(data.privateFor).to.be(0);
            expect(data.anonymous).to.be.a('boolean');
            expect(data.anonymous).to.be(false);
            expect(data.visibility).to.be.a('number');
            expect(data.visibility).to.be(0);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.canDelete).to.be.a('string');
            expect(data.canDelete).to.be("");
            expect(data.indicatorId).to.be.a('string');
            expect(data.indicatorId).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamsContactsCreate', function() {
        it('should call teamsContactsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for teamsContactsCreate call
          /*
          var companyId = "companyId_example";

          instance.teamsContactsCreate(companyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamsContactsDelete', function() {
        it('should call teamsContactsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for teamsContactsDelete call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.teamsContactsDelete(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamsContactsList', function() {
        it('should call teamsContactsList successfully', function(done) {
          // TODO: uncomment, update parameter values for teamsContactsList call
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";

          instance.teamsContactsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamsContactsPartialUpdate', function() {
        it('should call teamsContactsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for teamsContactsPartialUpdate call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.teamsContactsPartialUpdate(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamsContactsRead', function() {
        it('should call teamsContactsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for teamsContactsRead call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.teamsContactsRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamsContactsUpdate', function() {
        it('should call teamsContactsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for teamsContactsUpdate call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.teamsContactsUpdate(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
