/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PerchApi);
  }
}(this, function(expect, PerchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PerchApi.MetricsApi();
  });

  describe('(package)', function() {
    describe('MetricsApi', function() {
      describe('metricsAlertProcessingList', function() {
        it('should call metricsAlertProcessingList successfully', function(done) {
          // TODO: uncomment metricsAlertProcessingList call
          /*

          instance.metricsAlertProcessingList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsAlertProcessingNoisyTeamsList', function() {
        it('should call metricsAlertProcessingNoisyTeamsList successfully', function(done) {
          // TODO: uncomment metricsAlertProcessingNoisyTeamsList call
          /*

          instance.metricsAlertProcessingNoisyTeamsList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsAnalystActivityRead', function() {
        it('should call metricsAnalystActivityRead successfully', function(done) {
          // TODO: uncomment, update parameter values for metricsAnalystActivityRead call
          /*
          var userId = "userId_example";

          instance.metricsAnalystActivityRead(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsAnalystSummaryList', function() {
        it('should call metricsAnalystSummaryList successfully', function(done) {
          // TODO: uncomment metricsAnalystSummaryList call
          /*

          instance.metricsAnalystSummaryList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsCommunityDailyEventsList', function() {
        it('should call metricsCommunityDailyEventsList successfully', function(done) {
          // TODO: uncomment, update parameter values for metricsCommunityDailyEventsList call
          /*
          var communityId = "communityId_example";

          instance.metricsCommunityDailyEventsList(communityId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsCommunitySuppressionsList', function() {
        it('should call metricsCommunitySuppressionsList successfully', function(done) {
          // TODO: uncomment, update parameter values for metricsCommunitySuppressionsList call
          /*
          var communityId = "communityId_example";

          instance.metricsCommunitySuppressionsList(communityId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsCommunityTrendingIndicatorsList', function() {
        it('should call metricsCommunityTrendingIndicatorsList successfully', function(done) {
          // TODO: uncomment, update parameter values for metricsCommunityTrendingIndicatorsList call
          /*
          var communityId = "communityId_example";

          instance.metricsCommunityTrendingIndicatorsList(communityId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsCustomerSuccessActivityList', function() {
        it('should call metricsCustomerSuccessActivityList successfully', function(done) {
          // TODO: uncomment metricsCustomerSuccessActivityList call
          /*

          instance.metricsCustomerSuccessActivityList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsEventsClosedCountList', function() {
        it('should call metricsEventsClosedCountList successfully', function(done) {
          // TODO: uncomment metricsEventsClosedCountList call
          /*

          instance.metricsEventsClosedCountList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsStatsIpCountsListAggregationsForAllTeams', function() {
        it('should call metricsStatsIpCountsListAggregationsForAllTeams successfully', function(done) {
          // TODO: uncomment, update parameter values for metricsStatsIpCountsListAggregationsForAllTeams call and complete the assertions
          /*
          var opts = {};
          opts.dateCountedForLt = "dateCountedForLt_example";
          opts.dateCountedForLte = "dateCountedForLte_example";
          opts.dateCountedForGt = "dateCountedForGt_example";
          opts.dateCountedForGte = "dateCountedForGte_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.metricsStatsIpCountsListAggregationsForAllTeams(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse2005);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.TeamIpCount);
                expect(data.dateCountedFor).to.be.a(Date);
                expect(data.dateCountedFor).to.be(new Date());
                expect(data.privateCount).to.be.a('number');
                expect(data.privateCount).to.be(0);
                expect(data.team).to.be.a(PerchApi.MetricsTeamSerializer);
                      expect(data.team.id).to.be.a('number');
                  expect(data.team.id).to.be(0);
                  expect(data.team.name).to.be.a('string');
                  expect(data.team.name).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsTeamsIndicatorsByCommunityList', function() {
        it('should call metricsTeamsIndicatorsByCommunityList successfully', function(done) {
          // TODO: uncomment, update parameter values for metricsTeamsIndicatorsByCommunityList call
          /*
          var companyId = "companyId_example";

          instance.metricsTeamsIndicatorsByCommunityList(companyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsTeamsSightingsByCommunityList', function() {
        it('should call metricsTeamsSightingsByCommunityList successfully', function(done) {
          // TODO: uncomment, update parameter values for metricsTeamsSightingsByCommunityList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";

          instance.metricsTeamsSightingsByCommunityList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.NameChartSerializer);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.value).to.be.a('number');
              expect(data.value).to.be();
              expect(data.id).to.be.a('number');
              expect(data.id).to.be();
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsTeamsStatsIpCountsList', function() {
        it('should call metricsTeamsStatsIpCountsList successfully', function(done) {
          // TODO: uncomment, update parameter values for metricsTeamsStatsIpCountsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.dateCountedForLt = "dateCountedForLt_example";
          opts.dateCountedForLte = "dateCountedForLte_example";
          opts.dateCountedForGt = "dateCountedForGt_example";
          opts.dateCountedForGte = "dateCountedForGte_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.metricsTeamsStatsIpCountsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse2005);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.TeamIpCount);
                expect(data.dateCountedFor).to.be.a(Date);
                expect(data.dateCountedFor).to.be(new Date());
                expect(data.privateCount).to.be.a('number');
                expect(data.privateCount).to.be(0);
                expect(data.team).to.be.a(PerchApi.MetricsTeamSerializer);
                      expect(data.team.id).to.be.a('number');
                  expect(data.team.id).to.be(0);
                  expect(data.team.name).to.be.a('string');
                  expect(data.team.name).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsTeamsStatsIpCountsListAggregationsForManagedTeams', function() {
        it('should call metricsTeamsStatsIpCountsListAggregationsForManagedTeams successfully', function(done) {
          // TODO: uncomment, update parameter values for metricsTeamsStatsIpCountsListAggregationsForManagedTeams call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.dateCountedForLt = "dateCountedForLt_example";
          opts.dateCountedForLte = "dateCountedForLte_example";
          opts.dateCountedForGt = "dateCountedForGt_example";
          opts.dateCountedForGte = "dateCountedForGte_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.metricsTeamsStatsIpCountsListAggregationsForManagedTeams(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse2005);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.TeamIpCount);
                expect(data.dateCountedFor).to.be.a(Date);
                expect(data.dateCountedFor).to.be(new Date());
                expect(data.privateCount).to.be.a('number');
                expect(data.privateCount).to.be(0);
                expect(data.team).to.be.a(PerchApi.MetricsTeamSerializer);
                      expect(data.team.id).to.be.a('number');
                  expect(data.team.id).to.be(0);
                  expect(data.team.name).to.be.a('string');
                  expect(data.team.name).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsTeamsStatsList', function() {
        it('should call metricsTeamsStatsList successfully', function(done) {
          // TODO: uncomment, update parameter values for metricsTeamsStatsList call
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";

          instance.metricsTeamsStatsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsTeamsStatsNoisyHostsList', function() {
        it('should call metricsTeamsStatsNoisyHostsList successfully', function(done) {
          // TODO: uncomment, update parameter values for metricsTeamsStatsNoisyHostsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";

          instance.metricsTeamsStatsNoisyHostsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.TeamNoisyHosts);
              expect(data.host).to.be.a('string');
              expect(data.host).to.be("");
              expect(data.numOpenAlerts).to.be.a('number');
              expect(data.numOpenAlerts).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsTeamsStatsSummary', function() {
        it('should call metricsTeamsStatsSummary successfully', function(done) {
          // TODO: uncomment, update parameter values for metricsTeamsStatsSummary call
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";

          instance.metricsTeamsStatsSummary(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsTeamsStatsSuppressionsByDay', function() {
        it('should call metricsTeamsStatsSuppressionsByDay successfully', function(done) {
          // TODO: uncomment, update parameter values for metricsTeamsStatsSuppressionsByDay call
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";

          instance.metricsTeamsStatsSuppressionsByDay(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsTeamsSuppressionsByCommunityList', function() {
        it('should call metricsTeamsSuppressionsByCommunityList successfully', function(done) {
          // TODO: uncomment, update parameter values for metricsTeamsSuppressionsByCommunityList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.reason = "reason_example";
          opts.closedAt = "closedAt_example";
          opts.closedAtIexact = "closedAtIexact_example";
          opts.closedAtGt = "closedAtGt_example";
          opts.closedAtGte = "closedAtGte_example";
          opts.closedAtLt = "closedAtLt_example";
          opts.closedAtLte = "closedAtLte_example";
          opts.closedAtIn = "closedAtIn_example";
          opts.closedAtContains = "closedAtContains_example";
          opts.closedAtIcontains = "closedAtIcontains_example";
          opts.closedAtStartswith = "closedAtStartswith_example";
          opts.closedAtIstartswith = "closedAtIstartswith_example";
          opts.closedAtEndswith = "closedAtEndswith_example";
          opts.closedAtIendswith = "closedAtIendswith_example";
          opts.closedAtRange = "closedAtRange_example";
          opts.closedAtIsnull = "closedAtIsnull_example";
          opts.closedAtRegex = "closedAtRegex_example";
          opts.closedAtIregex = "closedAtIregex_example";
          opts.closedAtYear = 8.14;
          opts.closedAtYearIexact = 8.14;
          opts.closedAtYearGt = 8.14;
          opts.closedAtYearGte = 8.14;
          opts.closedAtYearLt = 8.14;
          opts.closedAtYearLte = 8.14;
          opts.closedAtYearIn = 8.14;
          opts.closedAtYearContains = 8.14;
          opts.closedAtYearIcontains = 8.14;
          opts.closedAtYearStartswith = 8.14;
          opts.closedAtYearIstartswith = 8.14;
          opts.closedAtYearEndswith = 8.14;
          opts.closedAtYearIendswith = 8.14;
          opts.closedAtYearRange = 8.14;
          opts.closedAtYearIsnull = "closedAtYearIsnull_example";
          opts.closedAtYearRegex = 8.14;
          opts.closedAtYearIregex = 8.14;
          opts.closedAtYearContainedBy = 8.14;
          opts.closedAtMonth = 8.14;
          opts.closedAtMonthIexact = 8.14;
          opts.closedAtMonthGt = 8.14;
          opts.closedAtMonthGte = 8.14;
          opts.closedAtMonthLt = 8.14;
          opts.closedAtMonthLte = 8.14;
          opts.closedAtMonthIn = 8.14;
          opts.closedAtMonthContains = 8.14;
          opts.closedAtMonthIcontains = 8.14;
          opts.closedAtMonthStartswith = 8.14;
          opts.closedAtMonthIstartswith = 8.14;
          opts.closedAtMonthEndswith = 8.14;
          opts.closedAtMonthIendswith = 8.14;
          opts.closedAtMonthRange = 8.14;
          opts.closedAtMonthIsnull = "closedAtMonthIsnull_example";
          opts.closedAtMonthRegex = 8.14;
          opts.closedAtMonthIregex = 8.14;
          opts.closedAtMonthContainedBy = 8.14;
          opts.closedAtDay = 8.14;
          opts.closedAtDayIexact = 8.14;
          opts.closedAtDayGt = 8.14;
          opts.closedAtDayGte = 8.14;
          opts.closedAtDayLt = 8.14;
          opts.closedAtDayLte = 8.14;
          opts.closedAtDayIn = 8.14;
          opts.closedAtDayContains = 8.14;
          opts.closedAtDayIcontains = 8.14;
          opts.closedAtDayStartswith = 8.14;
          opts.closedAtDayIstartswith = 8.14;
          opts.closedAtDayEndswith = 8.14;
          opts.closedAtDayIendswith = 8.14;
          opts.closedAtDayRange = 8.14;
          opts.closedAtDayIsnull = "closedAtDayIsnull_example";
          opts.closedAtDayRegex = 8.14;
          opts.closedAtDayIregex = 8.14;
          opts.closedAtDayContainedBy = 8.14;
          opts.closedAtWeekDay = 8.14;
          opts.closedAtWeekDayIexact = 8.14;
          opts.closedAtWeekDayGt = 8.14;
          opts.closedAtWeekDayGte = 8.14;
          opts.closedAtWeekDayLt = 8.14;
          opts.closedAtWeekDayLte = 8.14;
          opts.closedAtWeekDayIn = 8.14;
          opts.closedAtWeekDayContains = 8.14;
          opts.closedAtWeekDayIcontains = 8.14;
          opts.closedAtWeekDayStartswith = 8.14;
          opts.closedAtWeekDayIstartswith = 8.14;
          opts.closedAtWeekDayEndswith = 8.14;
          opts.closedAtWeekDayIendswith = 8.14;
          opts.closedAtWeekDayRange = 8.14;
          opts.closedAtWeekDayIsnull = "closedAtWeekDayIsnull_example";
          opts.closedAtWeekDayRegex = 8.14;
          opts.closedAtWeekDayIregex = 8.14;
          opts.closedAtWeekDayContainedBy = 8.14;
          opts.closedAtWeek = 8.14;
          opts.closedAtWeekIexact = 8.14;
          opts.closedAtWeekGt = 8.14;
          opts.closedAtWeekGte = 8.14;
          opts.closedAtWeekLt = 8.14;
          opts.closedAtWeekLte = 8.14;
          opts.closedAtWeekIn = 8.14;
          opts.closedAtWeekContains = 8.14;
          opts.closedAtWeekIcontains = 8.14;
          opts.closedAtWeekStartswith = 8.14;
          opts.closedAtWeekIstartswith = 8.14;
          opts.closedAtWeekEndswith = 8.14;
          opts.closedAtWeekIendswith = 8.14;
          opts.closedAtWeekRange = 8.14;
          opts.closedAtWeekIsnull = "closedAtWeekIsnull_example";
          opts.closedAtWeekRegex = 8.14;
          opts.closedAtWeekIregex = 8.14;
          opts.closedAtWeekContainedBy = 8.14;
          opts.closedAtIsoYear = 8.14;
          opts.closedAtIsoYearIexact = 8.14;
          opts.closedAtIsoYearGt = 8.14;
          opts.closedAtIsoYearGte = 8.14;
          opts.closedAtIsoYearLt = 8.14;
          opts.closedAtIsoYearLte = 8.14;
          opts.closedAtIsoYearIn = 8.14;
          opts.closedAtIsoYearContains = 8.14;
          opts.closedAtIsoYearIcontains = 8.14;
          opts.closedAtIsoYearStartswith = 8.14;
          opts.closedAtIsoYearIstartswith = 8.14;
          opts.closedAtIsoYearEndswith = 8.14;
          opts.closedAtIsoYearIendswith = 8.14;
          opts.closedAtIsoYearRange = 8.14;
          opts.closedAtIsoYearIsnull = "closedAtIsoYearIsnull_example";
          opts.closedAtIsoYearRegex = 8.14;
          opts.closedAtIsoYearIregex = 8.14;
          opts.closedAtIsoYearContainedBy = 8.14;
          opts.closedAtQuarter = 8.14;
          opts.closedAtQuarterIexact = 8.14;
          opts.closedAtQuarterGt = 8.14;
          opts.closedAtQuarterGte = 8.14;
          opts.closedAtQuarterLt = 8.14;
          opts.closedAtQuarterLte = 8.14;
          opts.closedAtQuarterIn = 8.14;
          opts.closedAtQuarterContains = 8.14;
          opts.closedAtQuarterIcontains = 8.14;
          opts.closedAtQuarterStartswith = 8.14;
          opts.closedAtQuarterIstartswith = 8.14;
          opts.closedAtQuarterEndswith = 8.14;
          opts.closedAtQuarterIendswith = 8.14;
          opts.closedAtQuarterRange = 8.14;
          opts.closedAtQuarterIsnull = "closedAtQuarterIsnull_example";
          opts.closedAtQuarterRegex = 8.14;
          opts.closedAtQuarterIregex = 8.14;
          opts.closedAtQuarterContainedBy = 8.14;
          opts.closedAtContainedBy = "closedAtContainedBy_example";
          opts.closedAtHour = 8.14;
          opts.closedAtHourIexact = 8.14;
          opts.closedAtHourGt = 8.14;
          opts.closedAtHourGte = 8.14;
          opts.closedAtHourLt = 8.14;
          opts.closedAtHourLte = 8.14;
          opts.closedAtHourIn = 8.14;
          opts.closedAtHourContains = 8.14;
          opts.closedAtHourIcontains = 8.14;
          opts.closedAtHourStartswith = 8.14;
          opts.closedAtHourIstartswith = 8.14;
          opts.closedAtHourEndswith = 8.14;
          opts.closedAtHourIendswith = 8.14;
          opts.closedAtHourRange = 8.14;
          opts.closedAtHourIsnull = "closedAtHourIsnull_example";
          opts.closedAtHourRegex = 8.14;
          opts.closedAtHourIregex = 8.14;
          opts.closedAtHourContainedBy = 8.14;
          opts.closedAtMinute = 8.14;
          opts.closedAtMinuteIexact = 8.14;
          opts.closedAtMinuteGt = 8.14;
          opts.closedAtMinuteGte = 8.14;
          opts.closedAtMinuteLt = 8.14;
          opts.closedAtMinuteLte = 8.14;
          opts.closedAtMinuteIn = 8.14;
          opts.closedAtMinuteContains = 8.14;
          opts.closedAtMinuteIcontains = 8.14;
          opts.closedAtMinuteStartswith = 8.14;
          opts.closedAtMinuteIstartswith = 8.14;
          opts.closedAtMinuteEndswith = 8.14;
          opts.closedAtMinuteIendswith = 8.14;
          opts.closedAtMinuteRange = 8.14;
          opts.closedAtMinuteIsnull = "closedAtMinuteIsnull_example";
          opts.closedAtMinuteRegex = 8.14;
          opts.closedAtMinuteIregex = 8.14;
          opts.closedAtMinuteContainedBy = 8.14;
          opts.closedAtSecond = 8.14;
          opts.closedAtSecondIexact = 8.14;
          opts.closedAtSecondGt = 8.14;
          opts.closedAtSecondGte = 8.14;
          opts.closedAtSecondLt = 8.14;
          opts.closedAtSecondLte = 8.14;
          opts.closedAtSecondIn = 8.14;
          opts.closedAtSecondContains = 8.14;
          opts.closedAtSecondIcontains = 8.14;
          opts.closedAtSecondStartswith = 8.14;
          opts.closedAtSecondIstartswith = 8.14;
          opts.closedAtSecondEndswith = 8.14;
          opts.closedAtSecondIendswith = 8.14;
          opts.closedAtSecondRange = 8.14;
          opts.closedAtSecondIsnull = "closedAtSecondIsnull_example";
          opts.closedAtSecondRegex = 8.14;
          opts.closedAtSecondIregex = 8.14;
          opts.closedAtSecondContainedBy = 8.14;
          opts.closedAtDate = "closedAtDate_example";
          opts.closedAtDateIexact = "closedAtDateIexact_example";
          opts.closedAtDateGt = "closedAtDateGt_example";
          opts.closedAtDateGte = "closedAtDateGte_example";
          opts.closedAtDateLt = "closedAtDateLt_example";
          opts.closedAtDateLte = "closedAtDateLte_example";
          opts.closedAtDateIn = "closedAtDateIn_example";
          opts.closedAtDateContains = "closedAtDateContains_example";
          opts.closedAtDateIcontains = "closedAtDateIcontains_example";
          opts.closedAtDateStartswith = "closedAtDateStartswith_example";
          opts.closedAtDateIstartswith = "closedAtDateIstartswith_example";
          opts.closedAtDateEndswith = "closedAtDateEndswith_example";
          opts.closedAtDateIendswith = "closedAtDateIendswith_example";
          opts.closedAtDateRange = "closedAtDateRange_example";
          opts.closedAtDateIsnull = "closedAtDateIsnull_example";
          opts.closedAtDateRegex = "closedAtDateRegex_example";
          opts.closedAtDateIregex = "closedAtDateIregex_example";
          opts.closedAtDateYear = 8.14;
          opts.closedAtDateYearIexact = 8.14;
          opts.closedAtDateYearGt = 8.14;
          opts.closedAtDateYearGte = 8.14;
          opts.closedAtDateYearLt = 8.14;
          opts.closedAtDateYearLte = 8.14;
          opts.closedAtDateYearIn = 8.14;
          opts.closedAtDateYearContains = 8.14;
          opts.closedAtDateYearIcontains = 8.14;
          opts.closedAtDateYearStartswith = 8.14;
          opts.closedAtDateYearIstartswith = 8.14;
          opts.closedAtDateYearEndswith = 8.14;
          opts.closedAtDateYearIendswith = 8.14;
          opts.closedAtDateYearRange = 8.14;
          opts.closedAtDateYearIsnull = "closedAtDateYearIsnull_example";
          opts.closedAtDateYearRegex = 8.14;
          opts.closedAtDateYearIregex = 8.14;
          opts.closedAtDateYearContainedBy = 8.14;
          opts.closedAtDateMonth = 8.14;
          opts.closedAtDateMonthIexact = 8.14;
          opts.closedAtDateMonthGt = 8.14;
          opts.closedAtDateMonthGte = 8.14;
          opts.closedAtDateMonthLt = 8.14;
          opts.closedAtDateMonthLte = 8.14;
          opts.closedAtDateMonthIn = 8.14;
          opts.closedAtDateMonthContains = 8.14;
          opts.closedAtDateMonthIcontains = 8.14;
          opts.closedAtDateMonthStartswith = 8.14;
          opts.closedAtDateMonthIstartswith = 8.14;
          opts.closedAtDateMonthEndswith = 8.14;
          opts.closedAtDateMonthIendswith = 8.14;
          opts.closedAtDateMonthRange = 8.14;
          opts.closedAtDateMonthIsnull = "closedAtDateMonthIsnull_example";
          opts.closedAtDateMonthRegex = 8.14;
          opts.closedAtDateMonthIregex = 8.14;
          opts.closedAtDateMonthContainedBy = 8.14;
          opts.closedAtDateDay = 8.14;
          opts.closedAtDateDayIexact = 8.14;
          opts.closedAtDateDayGt = 8.14;
          opts.closedAtDateDayGte = 8.14;
          opts.closedAtDateDayLt = 8.14;
          opts.closedAtDateDayLte = 8.14;
          opts.closedAtDateDayIn = 8.14;
          opts.closedAtDateDayContains = 8.14;
          opts.closedAtDateDayIcontains = 8.14;
          opts.closedAtDateDayStartswith = 8.14;
          opts.closedAtDateDayIstartswith = 8.14;
          opts.closedAtDateDayEndswith = 8.14;
          opts.closedAtDateDayIendswith = 8.14;
          opts.closedAtDateDayRange = 8.14;
          opts.closedAtDateDayIsnull = "closedAtDateDayIsnull_example";
          opts.closedAtDateDayRegex = 8.14;
          opts.closedAtDateDayIregex = 8.14;
          opts.closedAtDateDayContainedBy = 8.14;
          opts.closedAtDateWeekDay = 8.14;
          opts.closedAtDateWeekDayIexact = 8.14;
          opts.closedAtDateWeekDayGt = 8.14;
          opts.closedAtDateWeekDayGte = 8.14;
          opts.closedAtDateWeekDayLt = 8.14;
          opts.closedAtDateWeekDayLte = 8.14;
          opts.closedAtDateWeekDayIn = 8.14;
          opts.closedAtDateWeekDayContains = 8.14;
          opts.closedAtDateWeekDayIcontains = 8.14;
          opts.closedAtDateWeekDayStartswith = 8.14;
          opts.closedAtDateWeekDayIstartswith = 8.14;
          opts.closedAtDateWeekDayEndswith = 8.14;
          opts.closedAtDateWeekDayIendswith = 8.14;
          opts.closedAtDateWeekDayRange = 8.14;
          opts.closedAtDateWeekDayIsnull = "closedAtDateWeekDayIsnull_example";
          opts.closedAtDateWeekDayRegex = 8.14;
          opts.closedAtDateWeekDayIregex = 8.14;
          opts.closedAtDateWeekDayContainedBy = 8.14;
          opts.closedAtDateWeek = 8.14;
          opts.closedAtDateWeekIexact = 8.14;
          opts.closedAtDateWeekGt = 8.14;
          opts.closedAtDateWeekGte = 8.14;
          opts.closedAtDateWeekLt = 8.14;
          opts.closedAtDateWeekLte = 8.14;
          opts.closedAtDateWeekIn = 8.14;
          opts.closedAtDateWeekContains = 8.14;
          opts.closedAtDateWeekIcontains = 8.14;
          opts.closedAtDateWeekStartswith = 8.14;
          opts.closedAtDateWeekIstartswith = 8.14;
          opts.closedAtDateWeekEndswith = 8.14;
          opts.closedAtDateWeekIendswith = 8.14;
          opts.closedAtDateWeekRange = 8.14;
          opts.closedAtDateWeekIsnull = "closedAtDateWeekIsnull_example";
          opts.closedAtDateWeekRegex = 8.14;
          opts.closedAtDateWeekIregex = 8.14;
          opts.closedAtDateWeekContainedBy = 8.14;
          opts.closedAtDateIsoYear = 8.14;
          opts.closedAtDateIsoYearIexact = 8.14;
          opts.closedAtDateIsoYearGt = 8.14;
          opts.closedAtDateIsoYearGte = 8.14;
          opts.closedAtDateIsoYearLt = 8.14;
          opts.closedAtDateIsoYearLte = 8.14;
          opts.closedAtDateIsoYearIn = 8.14;
          opts.closedAtDateIsoYearContains = 8.14;
          opts.closedAtDateIsoYearIcontains = 8.14;
          opts.closedAtDateIsoYearStartswith = 8.14;
          opts.closedAtDateIsoYearIstartswith = 8.14;
          opts.closedAtDateIsoYearEndswith = 8.14;
          opts.closedAtDateIsoYearIendswith = 8.14;
          opts.closedAtDateIsoYearRange = 8.14;
          opts.closedAtDateIsoYearIsnull = "closedAtDateIsoYearIsnull_example";
          opts.closedAtDateIsoYearRegex = 8.14;
          opts.closedAtDateIsoYearIregex = 8.14;
          opts.closedAtDateIsoYearContainedBy = 8.14;
          opts.closedAtDateQuarter = 8.14;
          opts.closedAtDateQuarterIexact = 8.14;
          opts.closedAtDateQuarterGt = 8.14;
          opts.closedAtDateQuarterGte = 8.14;
          opts.closedAtDateQuarterLt = 8.14;
          opts.closedAtDateQuarterLte = 8.14;
          opts.closedAtDateQuarterIn = 8.14;
          opts.closedAtDateQuarterContains = 8.14;
          opts.closedAtDateQuarterIcontains = 8.14;
          opts.closedAtDateQuarterStartswith = 8.14;
          opts.closedAtDateQuarterIstartswith = 8.14;
          opts.closedAtDateQuarterEndswith = 8.14;
          opts.closedAtDateQuarterIendswith = 8.14;
          opts.closedAtDateQuarterRange = 8.14;
          opts.closedAtDateQuarterIsnull = "closedAtDateQuarterIsnull_example";
          opts.closedAtDateQuarterRegex = 8.14;
          opts.closedAtDateQuarterIregex = 8.14;
          opts.closedAtDateQuarterContainedBy = 8.14;
          opts.closedAtDateContainedBy = "closedAtDateContainedBy_example";
          opts.closedAtTime = "closedAtTime_example";
          opts.closedAtTimeIexact = "closedAtTimeIexact_example";
          opts.closedAtTimeGt = "closedAtTimeGt_example";
          opts.closedAtTimeGte = "closedAtTimeGte_example";
          opts.closedAtTimeLt = "closedAtTimeLt_example";
          opts.closedAtTimeLte = "closedAtTimeLte_example";
          opts.closedAtTimeIn = "closedAtTimeIn_example";
          opts.closedAtTimeContains = "closedAtTimeContains_example";
          opts.closedAtTimeIcontains = "closedAtTimeIcontains_example";
          opts.closedAtTimeStartswith = "closedAtTimeStartswith_example";
          opts.closedAtTimeIstartswith = "closedAtTimeIstartswith_example";
          opts.closedAtTimeEndswith = "closedAtTimeEndswith_example";
          opts.closedAtTimeIendswith = "closedAtTimeIendswith_example";
          opts.closedAtTimeRange = "closedAtTimeRange_example";
          opts.closedAtTimeIsnull = "closedAtTimeIsnull_example";
          opts.closedAtTimeRegex = "closedAtTimeRegex_example";
          opts.closedAtTimeIregex = "closedAtTimeIregex_example";
          opts.closedAtTimeHour = 8.14;
          opts.closedAtTimeHourIexact = 8.14;
          opts.closedAtTimeHourGt = 8.14;
          opts.closedAtTimeHourGte = 8.14;
          opts.closedAtTimeHourLt = 8.14;
          opts.closedAtTimeHourLte = 8.14;
          opts.closedAtTimeHourIn = 8.14;
          opts.closedAtTimeHourContains = 8.14;
          opts.closedAtTimeHourIcontains = 8.14;
          opts.closedAtTimeHourStartswith = 8.14;
          opts.closedAtTimeHourIstartswith = 8.14;
          opts.closedAtTimeHourEndswith = 8.14;
          opts.closedAtTimeHourIendswith = 8.14;
          opts.closedAtTimeHourRange = 8.14;
          opts.closedAtTimeHourIsnull = "closedAtTimeHourIsnull_example";
          opts.closedAtTimeHourRegex = 8.14;
          opts.closedAtTimeHourIregex = 8.14;
          opts.closedAtTimeHourContainedBy = 8.14;
          opts.closedAtTimeMinute = 8.14;
          opts.closedAtTimeMinuteIexact = 8.14;
          opts.closedAtTimeMinuteGt = 8.14;
          opts.closedAtTimeMinuteGte = 8.14;
          opts.closedAtTimeMinuteLt = 8.14;
          opts.closedAtTimeMinuteLte = 8.14;
          opts.closedAtTimeMinuteIn = 8.14;
          opts.closedAtTimeMinuteContains = 8.14;
          opts.closedAtTimeMinuteIcontains = 8.14;
          opts.closedAtTimeMinuteStartswith = 8.14;
          opts.closedAtTimeMinuteIstartswith = 8.14;
          opts.closedAtTimeMinuteEndswith = 8.14;
          opts.closedAtTimeMinuteIendswith = 8.14;
          opts.closedAtTimeMinuteRange = 8.14;
          opts.closedAtTimeMinuteIsnull = "closedAtTimeMinuteIsnull_example";
          opts.closedAtTimeMinuteRegex = 8.14;
          opts.closedAtTimeMinuteIregex = 8.14;
          opts.closedAtTimeMinuteContainedBy = 8.14;
          opts.closedAtTimeSecond = 8.14;
          opts.closedAtTimeSecondIexact = 8.14;
          opts.closedAtTimeSecondGt = 8.14;
          opts.closedAtTimeSecondGte = 8.14;
          opts.closedAtTimeSecondLt = 8.14;
          opts.closedAtTimeSecondLte = 8.14;
          opts.closedAtTimeSecondIn = 8.14;
          opts.closedAtTimeSecondContains = 8.14;
          opts.closedAtTimeSecondIcontains = 8.14;
          opts.closedAtTimeSecondStartswith = 8.14;
          opts.closedAtTimeSecondIstartswith = 8.14;
          opts.closedAtTimeSecondEndswith = 8.14;
          opts.closedAtTimeSecondIendswith = 8.14;
          opts.closedAtTimeSecondRange = 8.14;
          opts.closedAtTimeSecondIsnull = "closedAtTimeSecondIsnull_example";
          opts.closedAtTimeSecondRegex = 8.14;
          opts.closedAtTimeSecondIregex = 8.14;
          opts.closedAtTimeSecondContainedBy = 8.14;
          opts.ordering = "ordering_example";

          instance.metricsTeamsSuppressionsByCommunityList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.CommunityNameChartSerializer);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.value).to.be.a('number');
              expect(data.value).to.be();
              expect(data.id).to.be.a('number');
              expect(data.id).to.be();
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('metricsTeamsSuppressionsList', function() {
        it('should call metricsTeamsSuppressionsList successfully', function(done) {
          // TODO: uncomment, update parameter values for metricsTeamsSuppressionsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.closedAt = "closedAt_example";
          opts.closedAtIexact = "closedAtIexact_example";
          opts.closedAtGt = "closedAtGt_example";
          opts.closedAtGte = "closedAtGte_example";
          opts.closedAtLt = "closedAtLt_example";
          opts.closedAtLte = "closedAtLte_example";
          opts.closedAtIn = "closedAtIn_example";
          opts.closedAtContains = "closedAtContains_example";
          opts.closedAtIcontains = "closedAtIcontains_example";
          opts.closedAtStartswith = "closedAtStartswith_example";
          opts.closedAtIstartswith = "closedAtIstartswith_example";
          opts.closedAtEndswith = "closedAtEndswith_example";
          opts.closedAtIendswith = "closedAtIendswith_example";
          opts.closedAtRange = "closedAtRange_example";
          opts.closedAtIsnull = "closedAtIsnull_example";
          opts.closedAtRegex = "closedAtRegex_example";
          opts.closedAtIregex = "closedAtIregex_example";
          opts.closedAtYear = 8.14;
          opts.closedAtYearIexact = 8.14;
          opts.closedAtYearGt = 8.14;
          opts.closedAtYearGte = 8.14;
          opts.closedAtYearLt = 8.14;
          opts.closedAtYearLte = 8.14;
          opts.closedAtYearIn = 8.14;
          opts.closedAtYearContains = 8.14;
          opts.closedAtYearIcontains = 8.14;
          opts.closedAtYearStartswith = 8.14;
          opts.closedAtYearIstartswith = 8.14;
          opts.closedAtYearEndswith = 8.14;
          opts.closedAtYearIendswith = 8.14;
          opts.closedAtYearRange = 8.14;
          opts.closedAtYearIsnull = "closedAtYearIsnull_example";
          opts.closedAtYearRegex = 8.14;
          opts.closedAtYearIregex = 8.14;
          opts.closedAtYearContainedBy = 8.14;
          opts.closedAtMonth = 8.14;
          opts.closedAtMonthIexact = 8.14;
          opts.closedAtMonthGt = 8.14;
          opts.closedAtMonthGte = 8.14;
          opts.closedAtMonthLt = 8.14;
          opts.closedAtMonthLte = 8.14;
          opts.closedAtMonthIn = 8.14;
          opts.closedAtMonthContains = 8.14;
          opts.closedAtMonthIcontains = 8.14;
          opts.closedAtMonthStartswith = 8.14;
          opts.closedAtMonthIstartswith = 8.14;
          opts.closedAtMonthEndswith = 8.14;
          opts.closedAtMonthIendswith = 8.14;
          opts.closedAtMonthRange = 8.14;
          opts.closedAtMonthIsnull = "closedAtMonthIsnull_example";
          opts.closedAtMonthRegex = 8.14;
          opts.closedAtMonthIregex = 8.14;
          opts.closedAtMonthContainedBy = 8.14;
          opts.closedAtDay = 8.14;
          opts.closedAtDayIexact = 8.14;
          opts.closedAtDayGt = 8.14;
          opts.closedAtDayGte = 8.14;
          opts.closedAtDayLt = 8.14;
          opts.closedAtDayLte = 8.14;
          opts.closedAtDayIn = 8.14;
          opts.closedAtDayContains = 8.14;
          opts.closedAtDayIcontains = 8.14;
          opts.closedAtDayStartswith = 8.14;
          opts.closedAtDayIstartswith = 8.14;
          opts.closedAtDayEndswith = 8.14;
          opts.closedAtDayIendswith = 8.14;
          opts.closedAtDayRange = 8.14;
          opts.closedAtDayIsnull = "closedAtDayIsnull_example";
          opts.closedAtDayRegex = 8.14;
          opts.closedAtDayIregex = 8.14;
          opts.closedAtDayContainedBy = 8.14;
          opts.closedAtWeekDay = 8.14;
          opts.closedAtWeekDayIexact = 8.14;
          opts.closedAtWeekDayGt = 8.14;
          opts.closedAtWeekDayGte = 8.14;
          opts.closedAtWeekDayLt = 8.14;
          opts.closedAtWeekDayLte = 8.14;
          opts.closedAtWeekDayIn = 8.14;
          opts.closedAtWeekDayContains = 8.14;
          opts.closedAtWeekDayIcontains = 8.14;
          opts.closedAtWeekDayStartswith = 8.14;
          opts.closedAtWeekDayIstartswith = 8.14;
          opts.closedAtWeekDayEndswith = 8.14;
          opts.closedAtWeekDayIendswith = 8.14;
          opts.closedAtWeekDayRange = 8.14;
          opts.closedAtWeekDayIsnull = "closedAtWeekDayIsnull_example";
          opts.closedAtWeekDayRegex = 8.14;
          opts.closedAtWeekDayIregex = 8.14;
          opts.closedAtWeekDayContainedBy = 8.14;
          opts.closedAtWeek = 8.14;
          opts.closedAtWeekIexact = 8.14;
          opts.closedAtWeekGt = 8.14;
          opts.closedAtWeekGte = 8.14;
          opts.closedAtWeekLt = 8.14;
          opts.closedAtWeekLte = 8.14;
          opts.closedAtWeekIn = 8.14;
          opts.closedAtWeekContains = 8.14;
          opts.closedAtWeekIcontains = 8.14;
          opts.closedAtWeekStartswith = 8.14;
          opts.closedAtWeekIstartswith = 8.14;
          opts.closedAtWeekEndswith = 8.14;
          opts.closedAtWeekIendswith = 8.14;
          opts.closedAtWeekRange = 8.14;
          opts.closedAtWeekIsnull = "closedAtWeekIsnull_example";
          opts.closedAtWeekRegex = 8.14;
          opts.closedAtWeekIregex = 8.14;
          opts.closedAtWeekContainedBy = 8.14;
          opts.closedAtIsoYear = 8.14;
          opts.closedAtIsoYearIexact = 8.14;
          opts.closedAtIsoYearGt = 8.14;
          opts.closedAtIsoYearGte = 8.14;
          opts.closedAtIsoYearLt = 8.14;
          opts.closedAtIsoYearLte = 8.14;
          opts.closedAtIsoYearIn = 8.14;
          opts.closedAtIsoYearContains = 8.14;
          opts.closedAtIsoYearIcontains = 8.14;
          opts.closedAtIsoYearStartswith = 8.14;
          opts.closedAtIsoYearIstartswith = 8.14;
          opts.closedAtIsoYearEndswith = 8.14;
          opts.closedAtIsoYearIendswith = 8.14;
          opts.closedAtIsoYearRange = 8.14;
          opts.closedAtIsoYearIsnull = "closedAtIsoYearIsnull_example";
          opts.closedAtIsoYearRegex = 8.14;
          opts.closedAtIsoYearIregex = 8.14;
          opts.closedAtIsoYearContainedBy = 8.14;
          opts.closedAtQuarter = 8.14;
          opts.closedAtQuarterIexact = 8.14;
          opts.closedAtQuarterGt = 8.14;
          opts.closedAtQuarterGte = 8.14;
          opts.closedAtQuarterLt = 8.14;
          opts.closedAtQuarterLte = 8.14;
          opts.closedAtQuarterIn = 8.14;
          opts.closedAtQuarterContains = 8.14;
          opts.closedAtQuarterIcontains = 8.14;
          opts.closedAtQuarterStartswith = 8.14;
          opts.closedAtQuarterIstartswith = 8.14;
          opts.closedAtQuarterEndswith = 8.14;
          opts.closedAtQuarterIendswith = 8.14;
          opts.closedAtQuarterRange = 8.14;
          opts.closedAtQuarterIsnull = "closedAtQuarterIsnull_example";
          opts.closedAtQuarterRegex = 8.14;
          opts.closedAtQuarterIregex = 8.14;
          opts.closedAtQuarterContainedBy = 8.14;
          opts.closedAtContainedBy = "closedAtContainedBy_example";
          opts.closedAtHour = 8.14;
          opts.closedAtHourIexact = 8.14;
          opts.closedAtHourGt = 8.14;
          opts.closedAtHourGte = 8.14;
          opts.closedAtHourLt = 8.14;
          opts.closedAtHourLte = 8.14;
          opts.closedAtHourIn = 8.14;
          opts.closedAtHourContains = 8.14;
          opts.closedAtHourIcontains = 8.14;
          opts.closedAtHourStartswith = 8.14;
          opts.closedAtHourIstartswith = 8.14;
          opts.closedAtHourEndswith = 8.14;
          opts.closedAtHourIendswith = 8.14;
          opts.closedAtHourRange = 8.14;
          opts.closedAtHourIsnull = "closedAtHourIsnull_example";
          opts.closedAtHourRegex = 8.14;
          opts.closedAtHourIregex = 8.14;
          opts.closedAtHourContainedBy = 8.14;
          opts.closedAtMinute = 8.14;
          opts.closedAtMinuteIexact = 8.14;
          opts.closedAtMinuteGt = 8.14;
          opts.closedAtMinuteGte = 8.14;
          opts.closedAtMinuteLt = 8.14;
          opts.closedAtMinuteLte = 8.14;
          opts.closedAtMinuteIn = 8.14;
          opts.closedAtMinuteContains = 8.14;
          opts.closedAtMinuteIcontains = 8.14;
          opts.closedAtMinuteStartswith = 8.14;
          opts.closedAtMinuteIstartswith = 8.14;
          opts.closedAtMinuteEndswith = 8.14;
          opts.closedAtMinuteIendswith = 8.14;
          opts.closedAtMinuteRange = 8.14;
          opts.closedAtMinuteIsnull = "closedAtMinuteIsnull_example";
          opts.closedAtMinuteRegex = 8.14;
          opts.closedAtMinuteIregex = 8.14;
          opts.closedAtMinuteContainedBy = 8.14;
          opts.closedAtSecond = 8.14;
          opts.closedAtSecondIexact = 8.14;
          opts.closedAtSecondGt = 8.14;
          opts.closedAtSecondGte = 8.14;
          opts.closedAtSecondLt = 8.14;
          opts.closedAtSecondLte = 8.14;
          opts.closedAtSecondIn = 8.14;
          opts.closedAtSecondContains = 8.14;
          opts.closedAtSecondIcontains = 8.14;
          opts.closedAtSecondStartswith = 8.14;
          opts.closedAtSecondIstartswith = 8.14;
          opts.closedAtSecondEndswith = 8.14;
          opts.closedAtSecondIendswith = 8.14;
          opts.closedAtSecondRange = 8.14;
          opts.closedAtSecondIsnull = "closedAtSecondIsnull_example";
          opts.closedAtSecondRegex = 8.14;
          opts.closedAtSecondIregex = 8.14;
          opts.closedAtSecondContainedBy = 8.14;
          opts.closedAtDate = "closedAtDate_example";
          opts.closedAtDateIexact = "closedAtDateIexact_example";
          opts.closedAtDateGt = "closedAtDateGt_example";
          opts.closedAtDateGte = "closedAtDateGte_example";
          opts.closedAtDateLt = "closedAtDateLt_example";
          opts.closedAtDateLte = "closedAtDateLte_example";
          opts.closedAtDateIn = "closedAtDateIn_example";
          opts.closedAtDateContains = "closedAtDateContains_example";
          opts.closedAtDateIcontains = "closedAtDateIcontains_example";
          opts.closedAtDateStartswith = "closedAtDateStartswith_example";
          opts.closedAtDateIstartswith = "closedAtDateIstartswith_example";
          opts.closedAtDateEndswith = "closedAtDateEndswith_example";
          opts.closedAtDateIendswith = "closedAtDateIendswith_example";
          opts.closedAtDateRange = "closedAtDateRange_example";
          opts.closedAtDateIsnull = "closedAtDateIsnull_example";
          opts.closedAtDateRegex = "closedAtDateRegex_example";
          opts.closedAtDateIregex = "closedAtDateIregex_example";
          opts.closedAtDateYear = 8.14;
          opts.closedAtDateYearIexact = 8.14;
          opts.closedAtDateYearGt = 8.14;
          opts.closedAtDateYearGte = 8.14;
          opts.closedAtDateYearLt = 8.14;
          opts.closedAtDateYearLte = 8.14;
          opts.closedAtDateYearIn = 8.14;
          opts.closedAtDateYearContains = 8.14;
          opts.closedAtDateYearIcontains = 8.14;
          opts.closedAtDateYearStartswith = 8.14;
          opts.closedAtDateYearIstartswith = 8.14;
          opts.closedAtDateYearEndswith = 8.14;
          opts.closedAtDateYearIendswith = 8.14;
          opts.closedAtDateYearRange = 8.14;
          opts.closedAtDateYearIsnull = "closedAtDateYearIsnull_example";
          opts.closedAtDateYearRegex = 8.14;
          opts.closedAtDateYearIregex = 8.14;
          opts.closedAtDateYearContainedBy = 8.14;
          opts.closedAtDateMonth = 8.14;
          opts.closedAtDateMonthIexact = 8.14;
          opts.closedAtDateMonthGt = 8.14;
          opts.closedAtDateMonthGte = 8.14;
          opts.closedAtDateMonthLt = 8.14;
          opts.closedAtDateMonthLte = 8.14;
          opts.closedAtDateMonthIn = 8.14;
          opts.closedAtDateMonthContains = 8.14;
          opts.closedAtDateMonthIcontains = 8.14;
          opts.closedAtDateMonthStartswith = 8.14;
          opts.closedAtDateMonthIstartswith = 8.14;
          opts.closedAtDateMonthEndswith = 8.14;
          opts.closedAtDateMonthIendswith = 8.14;
          opts.closedAtDateMonthRange = 8.14;
          opts.closedAtDateMonthIsnull = "closedAtDateMonthIsnull_example";
          opts.closedAtDateMonthRegex = 8.14;
          opts.closedAtDateMonthIregex = 8.14;
          opts.closedAtDateMonthContainedBy = 8.14;
          opts.closedAtDateDay = 8.14;
          opts.closedAtDateDayIexact = 8.14;
          opts.closedAtDateDayGt = 8.14;
          opts.closedAtDateDayGte = 8.14;
          opts.closedAtDateDayLt = 8.14;
          opts.closedAtDateDayLte = 8.14;
          opts.closedAtDateDayIn = 8.14;
          opts.closedAtDateDayContains = 8.14;
          opts.closedAtDateDayIcontains = 8.14;
          opts.closedAtDateDayStartswith = 8.14;
          opts.closedAtDateDayIstartswith = 8.14;
          opts.closedAtDateDayEndswith = 8.14;
          opts.closedAtDateDayIendswith = 8.14;
          opts.closedAtDateDayRange = 8.14;
          opts.closedAtDateDayIsnull = "closedAtDateDayIsnull_example";
          opts.closedAtDateDayRegex = 8.14;
          opts.closedAtDateDayIregex = 8.14;
          opts.closedAtDateDayContainedBy = 8.14;
          opts.closedAtDateWeekDay = 8.14;
          opts.closedAtDateWeekDayIexact = 8.14;
          opts.closedAtDateWeekDayGt = 8.14;
          opts.closedAtDateWeekDayGte = 8.14;
          opts.closedAtDateWeekDayLt = 8.14;
          opts.closedAtDateWeekDayLte = 8.14;
          opts.closedAtDateWeekDayIn = 8.14;
          opts.closedAtDateWeekDayContains = 8.14;
          opts.closedAtDateWeekDayIcontains = 8.14;
          opts.closedAtDateWeekDayStartswith = 8.14;
          opts.closedAtDateWeekDayIstartswith = 8.14;
          opts.closedAtDateWeekDayEndswith = 8.14;
          opts.closedAtDateWeekDayIendswith = 8.14;
          opts.closedAtDateWeekDayRange = 8.14;
          opts.closedAtDateWeekDayIsnull = "closedAtDateWeekDayIsnull_example";
          opts.closedAtDateWeekDayRegex = 8.14;
          opts.closedAtDateWeekDayIregex = 8.14;
          opts.closedAtDateWeekDayContainedBy = 8.14;
          opts.closedAtDateWeek = 8.14;
          opts.closedAtDateWeekIexact = 8.14;
          opts.closedAtDateWeekGt = 8.14;
          opts.closedAtDateWeekGte = 8.14;
          opts.closedAtDateWeekLt = 8.14;
          opts.closedAtDateWeekLte = 8.14;
          opts.closedAtDateWeekIn = 8.14;
          opts.closedAtDateWeekContains = 8.14;
          opts.closedAtDateWeekIcontains = 8.14;
          opts.closedAtDateWeekStartswith = 8.14;
          opts.closedAtDateWeekIstartswith = 8.14;
          opts.closedAtDateWeekEndswith = 8.14;
          opts.closedAtDateWeekIendswith = 8.14;
          opts.closedAtDateWeekRange = 8.14;
          opts.closedAtDateWeekIsnull = "closedAtDateWeekIsnull_example";
          opts.closedAtDateWeekRegex = 8.14;
          opts.closedAtDateWeekIregex = 8.14;
          opts.closedAtDateWeekContainedBy = 8.14;
          opts.closedAtDateIsoYear = 8.14;
          opts.closedAtDateIsoYearIexact = 8.14;
          opts.closedAtDateIsoYearGt = 8.14;
          opts.closedAtDateIsoYearGte = 8.14;
          opts.closedAtDateIsoYearLt = 8.14;
          opts.closedAtDateIsoYearLte = 8.14;
          opts.closedAtDateIsoYearIn = 8.14;
          opts.closedAtDateIsoYearContains = 8.14;
          opts.closedAtDateIsoYearIcontains = 8.14;
          opts.closedAtDateIsoYearStartswith = 8.14;
          opts.closedAtDateIsoYearIstartswith = 8.14;
          opts.closedAtDateIsoYearEndswith = 8.14;
          opts.closedAtDateIsoYearIendswith = 8.14;
          opts.closedAtDateIsoYearRange = 8.14;
          opts.closedAtDateIsoYearIsnull = "closedAtDateIsoYearIsnull_example";
          opts.closedAtDateIsoYearRegex = 8.14;
          opts.closedAtDateIsoYearIregex = 8.14;
          opts.closedAtDateIsoYearContainedBy = 8.14;
          opts.closedAtDateQuarter = 8.14;
          opts.closedAtDateQuarterIexact = 8.14;
          opts.closedAtDateQuarterGt = 8.14;
          opts.closedAtDateQuarterGte = 8.14;
          opts.closedAtDateQuarterLt = 8.14;
          opts.closedAtDateQuarterLte = 8.14;
          opts.closedAtDateQuarterIn = 8.14;
          opts.closedAtDateQuarterContains = 8.14;
          opts.closedAtDateQuarterIcontains = 8.14;
          opts.closedAtDateQuarterStartswith = 8.14;
          opts.closedAtDateQuarterIstartswith = 8.14;
          opts.closedAtDateQuarterEndswith = 8.14;
          opts.closedAtDateQuarterIendswith = 8.14;
          opts.closedAtDateQuarterRange = 8.14;
          opts.closedAtDateQuarterIsnull = "closedAtDateQuarterIsnull_example";
          opts.closedAtDateQuarterRegex = 8.14;
          opts.closedAtDateQuarterIregex = 8.14;
          opts.closedAtDateQuarterContainedBy = 8.14;
          opts.closedAtDateContainedBy = "closedAtDateContainedBy_example";
          opts.closedAtTime = "closedAtTime_example";
          opts.closedAtTimeIexact = "closedAtTimeIexact_example";
          opts.closedAtTimeGt = "closedAtTimeGt_example";
          opts.closedAtTimeGte = "closedAtTimeGte_example";
          opts.closedAtTimeLt = "closedAtTimeLt_example";
          opts.closedAtTimeLte = "closedAtTimeLte_example";
          opts.closedAtTimeIn = "closedAtTimeIn_example";
          opts.closedAtTimeContains = "closedAtTimeContains_example";
          opts.closedAtTimeIcontains = "closedAtTimeIcontains_example";
          opts.closedAtTimeStartswith = "closedAtTimeStartswith_example";
          opts.closedAtTimeIstartswith = "closedAtTimeIstartswith_example";
          opts.closedAtTimeEndswith = "closedAtTimeEndswith_example";
          opts.closedAtTimeIendswith = "closedAtTimeIendswith_example";
          opts.closedAtTimeRange = "closedAtTimeRange_example";
          opts.closedAtTimeIsnull = "closedAtTimeIsnull_example";
          opts.closedAtTimeRegex = "closedAtTimeRegex_example";
          opts.closedAtTimeIregex = "closedAtTimeIregex_example";
          opts.closedAtTimeHour = 8.14;
          opts.closedAtTimeHourIexact = 8.14;
          opts.closedAtTimeHourGt = 8.14;
          opts.closedAtTimeHourGte = 8.14;
          opts.closedAtTimeHourLt = 8.14;
          opts.closedAtTimeHourLte = 8.14;
          opts.closedAtTimeHourIn = 8.14;
          opts.closedAtTimeHourContains = 8.14;
          opts.closedAtTimeHourIcontains = 8.14;
          opts.closedAtTimeHourStartswith = 8.14;
          opts.closedAtTimeHourIstartswith = 8.14;
          opts.closedAtTimeHourEndswith = 8.14;
          opts.closedAtTimeHourIendswith = 8.14;
          opts.closedAtTimeHourRange = 8.14;
          opts.closedAtTimeHourIsnull = "closedAtTimeHourIsnull_example";
          opts.closedAtTimeHourRegex = 8.14;
          opts.closedAtTimeHourIregex = 8.14;
          opts.closedAtTimeHourContainedBy = 8.14;
          opts.closedAtTimeMinute = 8.14;
          opts.closedAtTimeMinuteIexact = 8.14;
          opts.closedAtTimeMinuteGt = 8.14;
          opts.closedAtTimeMinuteGte = 8.14;
          opts.closedAtTimeMinuteLt = 8.14;
          opts.closedAtTimeMinuteLte = 8.14;
          opts.closedAtTimeMinuteIn = 8.14;
          opts.closedAtTimeMinuteContains = 8.14;
          opts.closedAtTimeMinuteIcontains = 8.14;
          opts.closedAtTimeMinuteStartswith = 8.14;
          opts.closedAtTimeMinuteIstartswith = 8.14;
          opts.closedAtTimeMinuteEndswith = 8.14;
          opts.closedAtTimeMinuteIendswith = 8.14;
          opts.closedAtTimeMinuteRange = 8.14;
          opts.closedAtTimeMinuteIsnull = "closedAtTimeMinuteIsnull_example";
          opts.closedAtTimeMinuteRegex = 8.14;
          opts.closedAtTimeMinuteIregex = 8.14;
          opts.closedAtTimeMinuteContainedBy = 8.14;
          opts.closedAtTimeSecond = 8.14;
          opts.closedAtTimeSecondIexact = 8.14;
          opts.closedAtTimeSecondGt = 8.14;
          opts.closedAtTimeSecondGte = 8.14;
          opts.closedAtTimeSecondLt = 8.14;
          opts.closedAtTimeSecondLte = 8.14;
          opts.closedAtTimeSecondIn = 8.14;
          opts.closedAtTimeSecondContains = 8.14;
          opts.closedAtTimeSecondIcontains = 8.14;
          opts.closedAtTimeSecondStartswith = 8.14;
          opts.closedAtTimeSecondIstartswith = 8.14;
          opts.closedAtTimeSecondEndswith = 8.14;
          opts.closedAtTimeSecondIendswith = 8.14;
          opts.closedAtTimeSecondRange = 8.14;
          opts.closedAtTimeSecondIsnull = "closedAtTimeSecondIsnull_example";
          opts.closedAtTimeSecondRegex = 8.14;
          opts.closedAtTimeSecondIregex = 8.14;
          opts.closedAtTimeSecondContainedBy = 8.14;
          opts.ordering = "ordering_example";

          instance.metricsTeamsSuppressionsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.TeamSuppressionReasons);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.value).to.be.a('number');
              expect(data.value).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
