/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PerchApi);
  }
}(this, function(expect, PerchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PerchApi.CommentsApi();
  });

  describe('(package)', function() {
    describe('CommentsApi', function() {
      describe('commentsIndicatorCreate', function() {
        it('should call commentsIndicatorCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for commentsIndicatorCreate call and complete the assertions
          /*
          var data = new PerchApi.CommentSerializer();
          data.comment = new PerchApi.Comment();
          data.comment.text = "";
          data.comment.privateFor = 0;
          data.comment.anonymous = false;
          data.comment.visibility = 0;
          data.indicatorId = "";

          instance.commentsIndicatorCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.CommentSerializer);
            expect(data.comment).to.be.a(PerchApi.Comment);
                  expect(data.comment.id).to.be.a('number');
              expect(data.comment.id).to.be(0);
              expect(data.comment.groupId).to.be.a('number');
              expect(data.comment.groupId).to.be(0);
              expect(data.comment.text).to.be.a('string');
              expect(data.comment.text).to.be("");
              expect(data.comment.privateFor).to.be.a('number');
              expect(data.comment.privateFor).to.be(0);
              expect(data.comment.anonymous).to.be.a('boolean');
              expect(data.comment.anonymous).to.be(false);
              expect(data.comment.visibility).to.be.a('number');
              expect(data.comment.visibility).to.be(0);
              expect(data.comment.createdBy).to.be.a('string');
              expect(data.comment.createdBy).to.be("");
              expect(data.comment.createdAt).to.be.a(Date);
              expect(data.comment.createdAt).to.be(new Date());
              expect(data.comment.canDelete).to.be.a('string');
              expect(data.comment.canDelete).to.be("");
            expect(data.indicatorId).to.be.a('string');
            expect(data.indicatorId).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('commentsIndicatorDelete', function() {
        it('should call commentsIndicatorDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for commentsIndicatorDelete call
          /*
          var id = 56;

          instance.commentsIndicatorDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('commentsIndicatorPartialUpdate', function() {
        it('should call commentsIndicatorPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for commentsIndicatorPartialUpdate call and complete the assertions
          /*
          var id = 56;
          var data = new PerchApi.CommentSerializer();
          data.comment = new PerchApi.Comment();
          data.comment.text = "";
          data.comment.privateFor = 0;
          data.comment.anonymous = false;
          data.comment.visibility = 0;
          data.indicatorId = "";

          instance.commentsIndicatorPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.CommentSerializer);
            expect(data.comment).to.be.a(PerchApi.Comment);
                  expect(data.comment.id).to.be.a('number');
              expect(data.comment.id).to.be(0);
              expect(data.comment.groupId).to.be.a('number');
              expect(data.comment.groupId).to.be(0);
              expect(data.comment.text).to.be.a('string');
              expect(data.comment.text).to.be("");
              expect(data.comment.privateFor).to.be.a('number');
              expect(data.comment.privateFor).to.be(0);
              expect(data.comment.anonymous).to.be.a('boolean');
              expect(data.comment.anonymous).to.be(false);
              expect(data.comment.visibility).to.be.a('number');
              expect(data.comment.visibility).to.be(0);
              expect(data.comment.createdBy).to.be.a('string');
              expect(data.comment.createdBy).to.be("");
              expect(data.comment.createdAt).to.be.a(Date);
              expect(data.comment.createdAt).to.be(new Date());
              expect(data.comment.canDelete).to.be.a('string');
              expect(data.comment.canDelete).to.be("");
            expect(data.indicatorId).to.be.a('string');
            expect(data.indicatorId).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('commentsIndicatorUpdate', function() {
        it('should call commentsIndicatorUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for commentsIndicatorUpdate call and complete the assertions
          /*
          var id = 56;
          var data = new PerchApi.CommentSerializer();
          data.comment = new PerchApi.Comment();
          data.comment.text = "";
          data.comment.privateFor = 0;
          data.comment.anonymous = false;
          data.comment.visibility = 0;
          data.indicatorId = "";

          instance.commentsIndicatorUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.CommentSerializer);
            expect(data.comment).to.be.a(PerchApi.Comment);
                  expect(data.comment.id).to.be.a('number');
              expect(data.comment.id).to.be(0);
              expect(data.comment.groupId).to.be.a('number');
              expect(data.comment.groupId).to.be(0);
              expect(data.comment.text).to.be.a('string');
              expect(data.comment.text).to.be("");
              expect(data.comment.privateFor).to.be.a('number');
              expect(data.comment.privateFor).to.be(0);
              expect(data.comment.anonymous).to.be.a('boolean');
              expect(data.comment.anonymous).to.be(false);
              expect(data.comment.visibility).to.be.a('number');
              expect(data.comment.visibility).to.be(0);
              expect(data.comment.createdBy).to.be.a('string');
              expect(data.comment.createdBy).to.be("");
              expect(data.comment.createdAt).to.be.a(Date);
              expect(data.comment.createdAt).to.be(new Date());
              expect(data.comment.canDelete).to.be.a('string');
              expect(data.comment.canDelete).to.be("");
            expect(data.indicatorId).to.be.a('string');
            expect(data.indicatorId).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
