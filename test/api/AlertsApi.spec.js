/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PerchApi);
  }
}(this, function(expect, PerchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PerchApi.AlertsApi();
  });

  describe('(package)', function() {
    describe('AlertsApi', function() {
      describe('alertsCreate', function() {
        it('should call alertsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for alertsCreate call
          /*
          var version = "version_example";

          instance.alertsCreate(version, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('alertsDelete', function() {
        it('should call alertsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for alertsDelete call
          /*
          var id = "id_example";
          var version = "version_example";

          instance.alertsDelete(id, version, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('alertsList', function() {
        it('should call alertsList successfully', function(done) {
          // TODO: uncomment, update parameter values for alertsList call
          /*
          var version = "version_example";
          var opts = {};
          opts.closed = "closed_example";
          opts.closedAt = "closedAt_example";
          opts.communityId = "communityId_example";
          opts.createdAt = "createdAt_example";
          opts.destIp = "destIp_example";
          opts.destPort = "destPort_example";
          opts.fullUrl = "fullUrl_example";
          opts.id = "id_example";
          opts.indicatorId = "indicatorId_example";
          opts.indicatorLoaded = "indicatorLoaded_example";
          opts.observableId = "observableId_example";
          opts.protocol = "protocol_example";
          opts.sensorId = "sensorId_example";
          opts.sensorName = "sensorName_example";
          opts.socStatus = "socStatus_example";
          opts.srcIp = "srcIp_example";
          opts.srcPort = "srcPort_example";
          opts.status = "status_example";
          opts.statusUpdatedAt = "statusUpdatedAt_example";
          opts.teamId = "teamId_example";
          opts.title = "title_example";
          opts.ts = "ts_example";
          opts.closedAtGte = "closedAtGte_example";
          opts.closedAtLte = "closedAtLte_example";
          opts.createdAtGte = "createdAtGte_example";
          opts.createdAtLte = "createdAtLte_example";
          opts.statusUpdatedAtGte = "statusUpdatedAtGte_example";
          opts.statusUpdatedAtLte = "statusUpdatedAtLte_example";
          opts.statusUpdatedAtGt = "statusUpdatedAtGt_example";
          opts.statusUpdatedAtLt = "statusUpdatedAtLt_example";
          opts.ordering = "ordering_example";
          opts.page = 56;
          opts.pageSize = 56;

          instance.alertsList(version, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('alertsPartialUpdate', function() {
        it('should call alertsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for alertsPartialUpdate call
          /*
          var id = "id_example";
          var version = "version_example";

          instance.alertsPartialUpdate(id, version, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('alertsRead', function() {
        it('should call alertsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for alertsRead call
          /*
          var id = "id_example";
          var version = "version_example";

          instance.alertsRead(id, version, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('alertsSuppressionsBulkCidrs', function() {
        it('should call alertsSuppressionsBulkCidrs successfully', function(done) {
          // TODO: uncomment, update parameter values for alertsSuppressionsBulkCidrs call and complete the assertions
          /*
          var data = new PerchApi.AlertSuppression();
          data.teamId = 0;
          data.reasonDetail = 0;
          data.indicatorId = "";
          data.observableId = "";
          data.duration = 0;
          data.reason = 0;
          data.notes = "";
          data.sendEmail = false;
          data.scope = 0;
          data.community = 0;
          data.cidr = "";
          data.cwAutomateScripts = [0];

          instance.alertsSuppressionsBulkCidrs(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.AlertSuppression);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.userId).to.be.a('number');
            expect(data.userId).to.be(0);
            expect(data.teamId).to.be.a('number');
            expect(data.teamId).to.be(0);
            expect(data.userFullName).to.be.a('string');
            expect(data.userFullName).to.be("");
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.reasonDetail).to.be.a('number');
            expect(data.reasonDetail).to.be(0);
            expect(data.observableTitle).to.be.a('string');
            expect(data.observableTitle).to.be("");
            expect(data.indicatorId).to.be.a('string');
            expect(data.indicatorId).to.be("");
            expect(data.indicatorTitle).to.be.a('string');
            expect(data.indicatorTitle).to.be("");
            expect(data.observableId).to.be.a('string');
            expect(data.observableId).to.be("");
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.suppressUntil).to.be.a(Date);
            expect(data.suppressUntil).to.be(new Date());
            expect(data.duration).to.be.a('number');
            expect(data.duration).to.be(0);
            expect(data.reason).to.be.a('number');
            expect(data.reason).to.be(0);
            expect(data.notes).to.be.a('string');
            expect(data.notes).to.be("");
            expect(data.sendEmail).to.be.a('boolean');
            expect(data.sendEmail).to.be(false);
            expect(data.hits).to.be.a('number');
            expect(data.hits).to.be(0);
            expect(data.latestHit).to.be.a(Date);
            expect(data.latestHit).to.be(new Date());
            expect(data.scope).to.be.a('number');
            expect(data.scope).to.be(0);
            expect(data.community).to.be.a('number');
            expect(data.community).to.be(0);
            expect(data.cidr).to.be.a('string');
            expect(data.cidr).to.be("");
            expect(data.suppressedAlertIds).to.be.a('string');
            expect(data.suppressedAlertIds).to.be("");
            expect(data.latestAlert).to.be.a('string');
            expect(data.latestAlert).to.be("");
            {
              let dataCtr = data.cwAutomateScripts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('alertsSuppressionsCreate', function() {
        it('should call alertsSuppressionsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for alertsSuppressionsCreate call and complete the assertions
          /*
          var data = new PerchApi.AlertSuppression();
          data.teamId = 0;
          data.reasonDetail = 0;
          data.indicatorId = "";
          data.observableId = "";
          data.duration = 0;
          data.reason = 0;
          data.notes = "";
          data.sendEmail = false;
          data.scope = 0;
          data.community = 0;
          data.cidr = "";
          data.cwAutomateScripts = [0];

          instance.alertsSuppressionsCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.AlertSuppression);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.userId).to.be.a('number');
            expect(data.userId).to.be(0);
            expect(data.teamId).to.be.a('number');
            expect(data.teamId).to.be(0);
            expect(data.userFullName).to.be.a('string');
            expect(data.userFullName).to.be("");
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.reasonDetail).to.be.a('number');
            expect(data.reasonDetail).to.be(0);
            expect(data.observableTitle).to.be.a('string');
            expect(data.observableTitle).to.be("");
            expect(data.indicatorId).to.be.a('string');
            expect(data.indicatorId).to.be("");
            expect(data.indicatorTitle).to.be.a('string');
            expect(data.indicatorTitle).to.be("");
            expect(data.observableId).to.be.a('string');
            expect(data.observableId).to.be("");
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.suppressUntil).to.be.a(Date);
            expect(data.suppressUntil).to.be(new Date());
            expect(data.duration).to.be.a('number');
            expect(data.duration).to.be(0);
            expect(data.reason).to.be.a('number');
            expect(data.reason).to.be(0);
            expect(data.notes).to.be.a('string');
            expect(data.notes).to.be("");
            expect(data.sendEmail).to.be.a('boolean');
            expect(data.sendEmail).to.be(false);
            expect(data.hits).to.be.a('number');
            expect(data.hits).to.be(0);
            expect(data.latestHit).to.be.a(Date);
            expect(data.latestHit).to.be(new Date());
            expect(data.scope).to.be.a('number');
            expect(data.scope).to.be(0);
            expect(data.community).to.be.a('number');
            expect(data.community).to.be(0);
            expect(data.cidr).to.be.a('string');
            expect(data.cidr).to.be("");
            expect(data.suppressedAlertIds).to.be.a('string');
            expect(data.suppressedAlertIds).to.be("");
            expect(data.latestAlert).to.be.a('string');
            expect(data.latestAlert).to.be("");
            {
              let dataCtr = data.cwAutomateScripts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('alertsSuppressionsDelete', function() {
        it('should call alertsSuppressionsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for alertsSuppressionsDelete call
          /*
          var id = "id_example";

          instance.alertsSuppressionsDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('alertsSuppressionsList', function() {
        it('should call alertsSuppressionsList successfully', function(done) {
          // TODO: uncomment, update parameter values for alertsSuppressionsList call and complete the assertions
          /*
          var opts = {};
          opts.ordering = "ordering_example";
          opts.p = 56;
          opts.ps = 56;

          instance.alertsSuppressionsList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse200);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.AlertSuppression);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.userId).to.be.a('number');
                expect(data.userId).to.be(0);
                expect(data.teamId).to.be.a('number');
                expect(data.teamId).to.be(0);
                expect(data.userFullName).to.be.a('string');
                expect(data.userFullName).to.be("");
                expect(data.team).to.be.a('number');
                expect(data.team).to.be(0);
                expect(data.reasonDetail).to.be.a('number');
                expect(data.reasonDetail).to.be(0);
                expect(data.observableTitle).to.be.a('string');
                expect(data.observableTitle).to.be("");
                expect(data.indicatorId).to.be.a('string');
                expect(data.indicatorId).to.be("");
                expect(data.indicatorTitle).to.be.a('string');
                expect(data.indicatorTitle).to.be("");
                expect(data.observableId).to.be.a('string');
                expect(data.observableId).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(new Date());
                expect(data.suppressUntil).to.be.a(Date);
                expect(data.suppressUntil).to.be(new Date());
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.reason).to.be.a('number');
                expect(data.reason).to.be(0);
                expect(data.notes).to.be.a('string');
                expect(data.notes).to.be("");
                expect(data.sendEmail).to.be.a('boolean');
                expect(data.sendEmail).to.be(false);
                expect(data.hits).to.be.a('number');
                expect(data.hits).to.be(0);
                expect(data.latestHit).to.be.a(Date);
                expect(data.latestHit).to.be(new Date());
                expect(data.scope).to.be.a('number');
                expect(data.scope).to.be(0);
                expect(data.community).to.be.a('number');
                expect(data.community).to.be(0);
                expect(data.cidr).to.be.a('string');
                expect(data.cidr).to.be("");
                expect(data.suppressedAlertIds).to.be.a('string');
                expect(data.suppressedAlertIds).to.be("");
                expect(data.latestAlert).to.be.a('string');
                expect(data.latestAlert).to.be("");
                {
                  let dataCtr = data.cwAutomateScripts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('alertsUpdate', function() {
        it('should call alertsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for alertsUpdate call
          /*
          var id = "id_example";
          var version = "version_example";

          instance.alertsUpdate(id, version, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
