/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PerchApi);
  }
}(this, function(expect, PerchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PerchApi.V1Api();
  });

  describe('(package)', function() {
    describe('V1Api', function() {
      describe('v1AlertGroupingsByIpsCreate', function() {
        it('should call v1AlertGroupingsByIpsCreate successfully', function(done) {
          // TODO: uncomment v1AlertGroupingsByIpsCreate call
          /*

          instance.v1AlertGroupingsByIpsCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1AlertGroupingsByIpsDelete', function() {
        it('should call v1AlertGroupingsByIpsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1AlertGroupingsByIpsDelete call
          /*
          var groupingId = "groupingId_example";

          instance.v1AlertGroupingsByIpsDelete(groupingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1AlertGroupingsByIpsList', function() {
        it('should call v1AlertGroupingsByIpsList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1AlertGroupingsByIpsList call
          /*
          var opts = {};
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1AlertGroupingsByIpsList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1AlertGroupingsByIpsPartialUpdate', function() {
        it('should call v1AlertGroupingsByIpsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1AlertGroupingsByIpsPartialUpdate call
          /*
          var groupingId = "groupingId_example";

          instance.v1AlertGroupingsByIpsPartialUpdate(groupingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1AlertGroupingsByIpsRead', function() {
        it('should call v1AlertGroupingsByIpsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1AlertGroupingsByIpsRead call
          /*
          var groupingId = "groupingId_example";

          instance.v1AlertGroupingsByIpsRead(groupingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1AlertGroupingsByIpsUpdate', function() {
        it('should call v1AlertGroupingsByIpsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1AlertGroupingsByIpsUpdate call
          /*
          var groupingId = "groupingId_example";

          instance.v1AlertGroupingsByIpsUpdate(groupingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1AlertsSuppressionsCreate', function() {
        it('should call v1AlertsSuppressionsCreate successfully', function(done) {
          // TODO: uncomment v1AlertsSuppressionsCreate call
          /*

          instance.v1AlertsSuppressionsCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1AlertsSuppressionsDelete', function() {
        it('should call v1AlertsSuppressionsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1AlertsSuppressionsDelete call
          /*
          var id = "id_example";

          instance.v1AlertsSuppressionsDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1AlertsSuppressionsList', function() {
        it('should call v1AlertsSuppressionsList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1AlertsSuppressionsList call
          /*
          var opts = {};
          opts.indicatorId = "indicatorId_example";
          opts.scope = "scope_example";
          opts.reason = "reason_example";
          opts.reasonDetail = "reasonDetail_example";
          opts.teamId = "teamId_example";
          opts.suppressedAtGte = "suppressedAtGte_example";
          opts.suppressedAtLte = "suppressedAtLte_example";
          opts.ordering = "ordering_example";
          opts.search = "search_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1AlertsSuppressionsList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1AlertsSuppressionsPartialUpdate', function() {
        it('should call v1AlertsSuppressionsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1AlertsSuppressionsPartialUpdate call
          /*
          var id = "id_example";

          instance.v1AlertsSuppressionsPartialUpdate(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1AlertsSuppressionsRead', function() {
        it('should call v1AlertsSuppressionsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1AlertsSuppressionsRead call
          /*
          var id = "id_example";

          instance.v1AlertsSuppressionsRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1AlertsSuppressionsUpdate', function() {
        it('should call v1AlertsSuppressionsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1AlertsSuppressionsUpdate call
          /*
          var id = "id_example";

          instance.v1AlertsSuppressionsUpdate(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyDevicesCreate', function() {
        it('should call v1CompanyDevicesCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyDevicesCreate call
          /*
          var companyId = "companyId_example";

          instance.v1CompanyDevicesCreate(companyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyDevicesDelete', function() {
        it('should call v1CompanyDevicesDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyDevicesDelete call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.v1CompanyDevicesDelete(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyDevicesList', function() {
        it('should call v1CompanyDevicesList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyDevicesList call
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1CompanyDevicesList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyDevicesPartialUpdate', function() {
        it('should call v1CompanyDevicesPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyDevicesPartialUpdate call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.v1CompanyDevicesPartialUpdate(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyDevicesRead', function() {
        it('should call v1CompanyDevicesRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyDevicesRead call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.v1CompanyDevicesRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyDevicesUpdate', function() {
        it('should call v1CompanyDevicesUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyDevicesUpdate call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.v1CompanyDevicesUpdate(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyIndicatorsList', function() {
        it('should call v1CompanyIndicatorsList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyIndicatorsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1CompanyIndicatorsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse20013);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.ApiIndicatorSerializer);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.tlp).to.be.a('number');
                expect(data.tlp).to.be(0);
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(new Date());
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.communities;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PerchApi.Community);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(0);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyIndicatorsRead', function() {
        it('should call v1CompanyIndicatorsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyIndicatorsRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.v1CompanyIndicatorsRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.ApiIndicatorSerializer);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.tlp).to.be.a('number');
            expect(data.tlp).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.communities;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.Community);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyIntegrationServiceCreate', function() {
        it('should call v1CompanyIntegrationServiceCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyIntegrationServiceCreate call
          /*
          var companyId = "companyId_example";
          var route = "route_example";

          instance.v1CompanyIntegrationServiceCreate(companyId, route, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyIntegrationServiceRead', function() {
        it('should call v1CompanyIntegrationServiceRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyIntegrationServiceRead call
          /*
          var companyId = "companyId_example";
          var route = "route_example";

          instance.v1CompanyIntegrationServiceRead(companyId, route, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyLoginsList', function() {
        it('should call v1CompanyLoginsList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyLoginsList call
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1CompanyLoginsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyMemberDelete', function() {
        it('should call v1CompanyMemberDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyMemberDelete call
          /*
          var companyId = "companyId_example";
          var userId = "userId_example";

          instance.v1CompanyMemberDelete(companyId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyMemberList', function() {
        it('should call v1CompanyMemberList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyMemberList call
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.search = "search_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1CompanyMemberList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyMemberPartialUpdate', function() {
        it('should call v1CompanyMemberPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyMemberPartialUpdate call
          /*
          var companyId = "companyId_example";
          var userId = "userId_example";

          instance.v1CompanyMemberPartialUpdate(companyId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyMemberRead', function() {
        it('should call v1CompanyMemberRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyMemberRead call
          /*
          var companyId = "companyId_example";
          var userId = "userId_example";

          instance.v1CompanyMemberRead(companyId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyMemberSensorsDelete', function() {
        it('should call v1CompanyMemberSensorsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyMemberSensorsDelete call
          /*
          var companyId = "companyId_example";
          var userId = "userId_example";

          instance.v1CompanyMemberSensorsDelete(companyId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyMemberSensorsList', function() {
        it('should call v1CompanyMemberSensorsList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyMemberSensorsList call
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.search = "search_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1CompanyMemberSensorsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyMemberSensorsPartialUpdate', function() {
        it('should call v1CompanyMemberSensorsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyMemberSensorsPartialUpdate call
          /*
          var companyId = "companyId_example";
          var userId = "userId_example";

          instance.v1CompanyMemberSensorsPartialUpdate(companyId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyMemberSensorsRead', function() {
        it('should call v1CompanyMemberSensorsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyMemberSensorsRead call
          /*
          var companyId = "companyId_example";
          var userId = "userId_example";

          instance.v1CompanyMemberSensorsRead(companyId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyMemberSensorsUpdate', function() {
        it('should call v1CompanyMemberSensorsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyMemberSensorsUpdate call
          /*
          var companyId = "companyId_example";
          var userId = "userId_example";

          instance.v1CompanyMemberSensorsUpdate(companyId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyMemberUpdate', function() {
        it('should call v1CompanyMemberUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyMemberUpdate call
          /*
          var companyId = "companyId_example";
          var userId = "userId_example";

          instance.v1CompanyMemberUpdate(companyId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyMfaSettingsPartialUpdate', function() {
        it('should call v1CompanyMfaSettingsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyMfaSettingsPartialUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.TeamMfaSettings();
          data.isMfaMandatory = false;
          data.useDuoMfa = false;
          data.duoMfaIkey = "";
          data.duoMfaSkey = "";
          data.duoMfaHostname = "";
          data.duoDisableRememberBrowser = false;

          instance.v1CompanyMfaSettingsPartialUpdate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.TeamMfaSettings);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.team).to.be.a('string');
            expect(data.team).to.be("");
            expect(data.isMfaMandatory).to.be.a('boolean');
            expect(data.isMfaMandatory).to.be(false);
            expect(data.useDuoMfa).to.be.a('boolean');
            expect(data.useDuoMfa).to.be(false);
            expect(data.duoMfaIkey).to.be.a('string');
            expect(data.duoMfaIkey).to.be("");
            expect(data.duoMfaSkey).to.be.a('string');
            expect(data.duoMfaSkey).to.be("");
            expect(data.duoMfaHostname).to.be.a('string');
            expect(data.duoMfaHostname).to.be("");
            expect(data.duoDisableRememberBrowser).to.be.a('boolean');
            expect(data.duoDisableRememberBrowser).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanyMfaSettingsRead', function() {
        it('should call v1CompanyMfaSettingsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanyMfaSettingsRead call and complete the assertions
          /*
          var companyId = "companyId_example";

          instance.v1CompanyMfaSettingsRead(companyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.TeamMfaSettings);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.team).to.be.a('string');
            expect(data.team).to.be("");
            expect(data.isMfaMandatory).to.be.a('boolean');
            expect(data.isMfaMandatory).to.be(false);
            expect(data.useDuoMfa).to.be.a('boolean');
            expect(data.useDuoMfa).to.be(false);
            expect(data.duoMfaIkey).to.be.a('string');
            expect(data.duoMfaIkey).to.be("");
            expect(data.duoMfaSkey).to.be.a('string');
            expect(data.duoMfaSkey).to.be("");
            expect(data.duoMfaHostname).to.be.a('string');
            expect(data.duoMfaHostname).to.be("");
            expect(data.duoDisableRememberBrowser).to.be.a('boolean');
            expect(data.duoDisableRememberBrowser).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanySubnetsCreate', function() {
        it('should call v1CompanySubnetsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanySubnetsCreate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.NetworkSubnet();
          data.cidr = "";
          data.name = "";
          data.description = "";
          data.monitored = false;
          data.createdAt = new Date();
          data.createdBy = 0;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.v1CompanySubnetsCreate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.NetworkSubnet);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.cidr).to.be.a('string');
            expect(data.cidr).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.monitored).to.be.a('boolean');
            expect(data.monitored).to.be(false);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanySubnetsDelete', function() {
        it('should call v1CompanySubnetsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanySubnetsDelete call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.v1CompanySubnetsDelete(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanySubnetsList', function() {
        it('should call v1CompanySubnetsList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanySubnetsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";
          opts.search = "search_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1CompanySubnetsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse20014);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.NetworkSubnet);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.team).to.be.a('number');
                expect(data.team).to.be(0);
                expect(data.cidr).to.be.a('string');
                expect(data.cidr).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.monitored).to.be.a('boolean');
                expect(data.monitored).to.be(false);
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(new Date());
                expect(data.createdBy).to.be.a('number');
                expect(data.createdBy).to.be(0);
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(new Date());
                expect(data.updatedBy).to.be.a('number');
                expect(data.updatedBy).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanySubnetsPartialUpdate', function() {
        it('should call v1CompanySubnetsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanySubnetsPartialUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.NetworkSubnet();
          data.cidr = "";
          data.name = "";
          data.description = "";
          data.monitored = false;
          data.createdAt = new Date();
          data.createdBy = 0;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.v1CompanySubnetsPartialUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.NetworkSubnet);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.cidr).to.be.a('string');
            expect(data.cidr).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.monitored).to.be.a('boolean');
            expect(data.monitored).to.be(false);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanySubnetsRead', function() {
        it('should call v1CompanySubnetsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanySubnetsRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.v1CompanySubnetsRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.NetworkSubnet);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.cidr).to.be.a('string');
            expect(data.cidr).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.monitored).to.be.a('boolean');
            expect(data.monitored).to.be(false);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1CompanySubnetsUpdate', function() {
        it('should call v1CompanySubnetsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1CompanySubnetsUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.NetworkSubnet();
          data.cidr = "";
          data.name = "";
          data.description = "";
          data.monitored = false;
          data.createdAt = new Date();
          data.createdBy = 0;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.v1CompanySubnetsUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.NetworkSubnet);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.cidr).to.be.a('string');
            expect(data.cidr).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.monitored).to.be.a('boolean');
            expect(data.monitored).to.be(false);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1EscalationsCreate', function() {
        it('should call v1EscalationsCreate successfully', function(done) {
          // TODO: uncomment v1EscalationsCreate call
          /*

          instance.v1EscalationsCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1EscalationsDelete', function() {
        it('should call v1EscalationsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1EscalationsDelete call
          /*
          var securityEventId = "securityEventId_example";

          instance.v1EscalationsDelete(securityEventId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1EscalationsList', function() {
        it('should call v1EscalationsList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1EscalationsList call
          /*
          var opts = {};
          opts.id = "id_example";
          opts.teamId = "teamId_example";
          opts.indicatorId = "indicatorId_example";
          opts.indicatorTitle = "indicatorTitle_example";
          opts.communityId = "communityId_example";
          opts.createdAt = "createdAt_example";
          opts.escalatedAt = "escalatedAt_example";
          opts.closedAt = "closedAt_example";
          opts.srcIp = "srcIp_example";
          opts.srcPort = "srcPort_example";
          opts.destIp = "destIp_example";
          opts.destPort = "destPort_example";
          opts.sensorId = "sensorId_example";
          opts.sensorName = "sensorName_example";
          opts.suppressionReason = "suppressionReason_example";
          opts.observableId = "observableId_example";
          opts.closed = "closed_example";
          opts.status = "status_example";
          opts.lastSeenAt = "lastSeenAt_example";
          opts.indicatorLoaded = "indicatorLoaded_example";
          opts.closedAtGte = "closedAtGte_example";
          opts.closedAtLte = "closedAtLte_example";
          opts.createdAtGte = "createdAtGte_example";
          opts.createdAtLte = "createdAtLte_example";
          opts.protocol = "protocol_example";
          opts.fullUrl = "fullUrl_example";
          opts.flowId = "flowId_example";
          opts.hostIp = "hostIp_example";
          opts.srcOrDestIp = "srcOrDestIp_example";
          opts.srcFqdn = "srcFqdn_example";
          opts.destFqdn = "destFqdn_example";
          opts.wasSuppressed = "wasSuppressed_example";
          opts.hasSla = "hasSla_example";
          opts.isCompliant = "isCompliant_example";
          opts.totalSecondsRemaining = "totalSecondsRemaining_example";
          opts.totalSecondsRemainingLt = "totalSecondsRemainingLt_example";
          opts.totalSecondsRemainingLte = "totalSecondsRemainingLte_example";
          opts.totalSecondsRemainingGt = "totalSecondsRemainingGt_example";
          opts.totalSecondsRemainingGte = "totalSecondsRemainingGte_example";
          opts.search = "search_example";
          opts.escalatedAtGte = "escalatedAtGte_example";
          opts.escalatedAtLte = "escalatedAtLte_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1EscalationsList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1EscalationsPartialUpdate', function() {
        it('should call v1EscalationsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1EscalationsPartialUpdate call
          /*
          var securityEventId = "securityEventId_example";

          instance.v1EscalationsPartialUpdate(securityEventId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1EscalationsRead', function() {
        it('should call v1EscalationsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1EscalationsRead call
          /*
          var securityEventId = "securityEventId_example";

          instance.v1EscalationsRead(securityEventId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1EscalationsUpdate', function() {
        it('should call v1EscalationsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1EscalationsUpdate call
          /*
          var securityEventId = "securityEventId_example";

          instance.v1EscalationsUpdate(securityEventId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1EventsCommonHostsCreate', function() {
        it('should call v1EventsCommonHostsCreate successfully', function(done) {
          // TODO: uncomment v1EventsCommonHostsCreate call
          /*

          instance.v1EventsCommonHostsCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1EventsCommonValuesCreate', function() {
        it('should call v1EventsCommonValuesCreate successfully', function(done) {
          // TODO: uncomment v1EventsCommonValuesCreate call
          /*

          instance.v1EventsCommonValuesCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceCollectionsAdd', function() {
        it('should call v1MarketplaceCollectionsAdd successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceCollectionsAdd call and complete the assertions
          /*
          var id = "id_example";
          var data = new PerchApi.Collection();
          data.addToManagedTeams = false;
          data.installCount = 0;
          data.itemType = "";
          data.store = new PerchApi.MarketplaceStore();
          data.store.visibleFor = "public";
          data.store.name = "";
          data.store.team = new PerchApi.MarketplaceItemStoreTeam();
          data.storeId = 0;

          instance.v1MarketplaceCollectionsAdd(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Collection);
            expect(data.autoAddManagedTeams).to.be.a('string');
            expect(data.autoAddManagedTeams).to.be("");
            expect(data.addToManagedTeams).to.be.a('boolean');
            expect(data.addToManagedTeams).to.be(false);
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.installCount).to.be.a('number');
            expect(data.installCount).to.be(0);
            expect(data.isInstalled).to.be.a('boolean');
            expect(data.isInstalled).to.be(false);
            expect(data.isOwner).to.be.a('boolean');
            expect(data.isOwner).to.be(false);
            expect(data.itemType).to.be.a('string');
            expect(data.itemType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.patronTeams).to.be.a('string');
            expect(data.patronTeams).to.be("");
            expect(data.store).to.be.a(PerchApi.MarketplaceStore);
                  expect(data.store.id).to.be.a('number');
              expect(data.store.id).to.be(0);
              expect(data.store.visibleFor).to.be.a('string');
              expect(data.store.visibleFor).to.be("public");
              expect(data.store.name).to.be.a('string');
              expect(data.store.name).to.be("");
              expect(data.store.team).to.be.a(PerchApi.MarketplaceItemStoreTeam);
                    expect(data.store.team.id).to.be.a('number');
                expect(data.store.team.id).to.be(0);
                expect(data.store.team.displayName).to.be.a('string');
                expect(data.store.team.displayName).to.be("");
            expect(data.storeId).to.be.a('number');
            expect(data.storeId).to.be(0);
            expect(data.itemCount).to.be.a('string');
            expect(data.itemCount).to.be("");
            expect(data.totalInstallCount).to.be.a('string');
            expect(data.totalInstallCount).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceCollectionsCreate', function() {
        it('should call v1MarketplaceCollectionsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceCollectionsCreate call and complete the assertions
          /*
          var data = new PerchApi.Collection();
          data.addToManagedTeams = false;
          data.installCount = 0;
          data.itemType = "";
          data.store = new PerchApi.MarketplaceStore();
          data.store.visibleFor = "public";
          data.store.name = "";
          data.store.team = new PerchApi.MarketplaceItemStoreTeam();
          data.storeId = 0;

          instance.v1MarketplaceCollectionsCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Collection);
            expect(data.autoAddManagedTeams).to.be.a('string');
            expect(data.autoAddManagedTeams).to.be("");
            expect(data.addToManagedTeams).to.be.a('boolean');
            expect(data.addToManagedTeams).to.be(false);
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.installCount).to.be.a('number');
            expect(data.installCount).to.be(0);
            expect(data.isInstalled).to.be.a('boolean');
            expect(data.isInstalled).to.be(false);
            expect(data.isOwner).to.be.a('boolean');
            expect(data.isOwner).to.be(false);
            expect(data.itemType).to.be.a('string');
            expect(data.itemType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.patronTeams).to.be.a('string');
            expect(data.patronTeams).to.be("");
            expect(data.store).to.be.a(PerchApi.MarketplaceStore);
                  expect(data.store.id).to.be.a('number');
              expect(data.store.id).to.be(0);
              expect(data.store.visibleFor).to.be.a('string');
              expect(data.store.visibleFor).to.be("public");
              expect(data.store.name).to.be.a('string');
              expect(data.store.name).to.be("");
              expect(data.store.team).to.be.a(PerchApi.MarketplaceItemStoreTeam);
                    expect(data.store.team.id).to.be.a('number');
                expect(data.store.team.id).to.be(0);
                expect(data.store.team.displayName).to.be.a('string');
                expect(data.store.team.displayName).to.be("");
            expect(data.storeId).to.be.a('number');
            expect(data.storeId).to.be(0);
            expect(data.itemCount).to.be.a('string');
            expect(data.itemCount).to.be("");
            expect(data.totalInstallCount).to.be.a('string');
            expect(data.totalInstallCount).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceCollectionsDelete', function() {
        it('should call v1MarketplaceCollectionsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceCollectionsDelete call
          /*
          var id = "id_example";

          instance.v1MarketplaceCollectionsDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceCollectionsList', function() {
        it('should call v1MarketplaceCollectionsList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceCollectionsList call and complete the assertions
          /*
          var opts = {};
          opts.isInstalled = "isInstalled_example";
          opts.itemType = "itemType_example";
          opts.visibleFor = "visibleFor_example";
          opts.store = "store_example";
          opts.collection = 8.14;
          opts.search = "search_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1MarketplaceCollectionsList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse20015);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.Collection);
                expect(data.autoAddManagedTeams).to.be.a('string');
                expect(data.autoAddManagedTeams).to.be("");
                expect(data.addToManagedTeams).to.be.a('boolean');
                expect(data.addToManagedTeams).to.be(false);
                expect(data.createdBy).to.be.a('number');
                expect(data.createdBy).to.be(0);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.installCount).to.be.a('number');
                expect(data.installCount).to.be(0);
                expect(data.isInstalled).to.be.a('boolean');
                expect(data.isInstalled).to.be(false);
                expect(data.isOwner).to.be.a('boolean');
                expect(data.isOwner).to.be(false);
                expect(data.itemType).to.be.a('string');
                expect(data.itemType).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.patronTeams).to.be.a('string');
                expect(data.patronTeams).to.be("");
                expect(data.store).to.be.a(PerchApi.MarketplaceStore);
                      expect(data.store.id).to.be.a('number');
                  expect(data.store.id).to.be(0);
                  expect(data.store.visibleFor).to.be.a('string');
                  expect(data.store.visibleFor).to.be("public");
                  expect(data.store.name).to.be.a('string');
                  expect(data.store.name).to.be("");
                  expect(data.store.team).to.be.a(PerchApi.MarketplaceItemStoreTeam);
                        expect(data.store.team.id).to.be.a('number');
                    expect(data.store.team.id).to.be(0);
                    expect(data.store.team.displayName).to.be.a('string');
                    expect(data.store.team.displayName).to.be("");
                expect(data.storeId).to.be.a('number');
                expect(data.storeId).to.be(0);
                expect(data.itemCount).to.be.a('string');
                expect(data.itemCount).to.be("");
                expect(data.totalInstallCount).to.be.a('string');
                expect(data.totalInstallCount).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceCollectionsPartialUpdate', function() {
        it('should call v1MarketplaceCollectionsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceCollectionsPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new PerchApi.Collection();
          data.addToManagedTeams = false;
          data.installCount = 0;
          data.itemType = "";
          data.store = new PerchApi.MarketplaceStore();
          data.store.visibleFor = "public";
          data.store.name = "";
          data.store.team = new PerchApi.MarketplaceItemStoreTeam();
          data.storeId = 0;

          instance.v1MarketplaceCollectionsPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Collection);
            expect(data.autoAddManagedTeams).to.be.a('string');
            expect(data.autoAddManagedTeams).to.be("");
            expect(data.addToManagedTeams).to.be.a('boolean');
            expect(data.addToManagedTeams).to.be(false);
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.installCount).to.be.a('number');
            expect(data.installCount).to.be(0);
            expect(data.isInstalled).to.be.a('boolean');
            expect(data.isInstalled).to.be(false);
            expect(data.isOwner).to.be.a('boolean');
            expect(data.isOwner).to.be(false);
            expect(data.itemType).to.be.a('string');
            expect(data.itemType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.patronTeams).to.be.a('string');
            expect(data.patronTeams).to.be("");
            expect(data.store).to.be.a(PerchApi.MarketplaceStore);
                  expect(data.store.id).to.be.a('number');
              expect(data.store.id).to.be(0);
              expect(data.store.visibleFor).to.be.a('string');
              expect(data.store.visibleFor).to.be("public");
              expect(data.store.name).to.be.a('string');
              expect(data.store.name).to.be("");
              expect(data.store.team).to.be.a(PerchApi.MarketplaceItemStoreTeam);
                    expect(data.store.team.id).to.be.a('number');
                expect(data.store.team.id).to.be(0);
                expect(data.store.team.displayName).to.be.a('string');
                expect(data.store.team.displayName).to.be("");
            expect(data.storeId).to.be.a('number');
            expect(data.storeId).to.be(0);
            expect(data.itemCount).to.be.a('string');
            expect(data.itemCount).to.be("");
            expect(data.totalInstallCount).to.be.a('string');
            expect(data.totalInstallCount).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceCollectionsRead', function() {
        it('should call v1MarketplaceCollectionsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceCollectionsRead call and complete the assertions
          /*
          var id = "id_example";

          instance.v1MarketplaceCollectionsRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Collection);
            expect(data.autoAddManagedTeams).to.be.a('string');
            expect(data.autoAddManagedTeams).to.be("");
            expect(data.addToManagedTeams).to.be.a('boolean');
            expect(data.addToManagedTeams).to.be(false);
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.installCount).to.be.a('number');
            expect(data.installCount).to.be(0);
            expect(data.isInstalled).to.be.a('boolean');
            expect(data.isInstalled).to.be(false);
            expect(data.isOwner).to.be.a('boolean');
            expect(data.isOwner).to.be(false);
            expect(data.itemType).to.be.a('string');
            expect(data.itemType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.patronTeams).to.be.a('string');
            expect(data.patronTeams).to.be("");
            expect(data.store).to.be.a(PerchApi.MarketplaceStore);
                  expect(data.store.id).to.be.a('number');
              expect(data.store.id).to.be(0);
              expect(data.store.visibleFor).to.be.a('string');
              expect(data.store.visibleFor).to.be("public");
              expect(data.store.name).to.be.a('string');
              expect(data.store.name).to.be("");
              expect(data.store.team).to.be.a(PerchApi.MarketplaceItemStoreTeam);
                    expect(data.store.team.id).to.be.a('number');
                expect(data.store.team.id).to.be(0);
                expect(data.store.team.displayName).to.be.a('string');
                expect(data.store.team.displayName).to.be("");
            expect(data.storeId).to.be.a('number');
            expect(data.storeId).to.be(0);
            expect(data.itemCount).to.be.a('string');
            expect(data.itemCount).to.be("");
            expect(data.totalInstallCount).to.be.a('string');
            expect(data.totalInstallCount).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceCollectionsRemoveCreate', function() {
        it('should call v1MarketplaceCollectionsRemoveCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceCollectionsRemoveCreate call and complete the assertions
          /*
          var id = "id_example";
          var data = new PerchApi.Collection();
          data.addToManagedTeams = false;
          data.installCount = 0;
          data.itemType = "";
          data.store = new PerchApi.MarketplaceStore();
          data.store.visibleFor = "public";
          data.store.name = "";
          data.store.team = new PerchApi.MarketplaceItemStoreTeam();
          data.storeId = 0;

          instance.v1MarketplaceCollectionsRemoveCreate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Collection);
            expect(data.autoAddManagedTeams).to.be.a('string');
            expect(data.autoAddManagedTeams).to.be("");
            expect(data.addToManagedTeams).to.be.a('boolean');
            expect(data.addToManagedTeams).to.be(false);
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.installCount).to.be.a('number');
            expect(data.installCount).to.be(0);
            expect(data.isInstalled).to.be.a('boolean');
            expect(data.isInstalled).to.be(false);
            expect(data.isOwner).to.be.a('boolean');
            expect(data.isOwner).to.be(false);
            expect(data.itemType).to.be.a('string');
            expect(data.itemType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.patronTeams).to.be.a('string');
            expect(data.patronTeams).to.be("");
            expect(data.store).to.be.a(PerchApi.MarketplaceStore);
                  expect(data.store.id).to.be.a('number');
              expect(data.store.id).to.be(0);
              expect(data.store.visibleFor).to.be.a('string');
              expect(data.store.visibleFor).to.be("public");
              expect(data.store.name).to.be.a('string');
              expect(data.store.name).to.be("");
              expect(data.store.team).to.be.a(PerchApi.MarketplaceItemStoreTeam);
                    expect(data.store.team.id).to.be.a('number');
                expect(data.store.team.id).to.be(0);
                expect(data.store.team.displayName).to.be.a('string');
                expect(data.store.team.displayName).to.be("");
            expect(data.storeId).to.be.a('number');
            expect(data.storeId).to.be(0);
            expect(data.itemCount).to.be.a('string');
            expect(data.itemCount).to.be("");
            expect(data.totalInstallCount).to.be.a('string');
            expect(data.totalInstallCount).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceCollectionsRemoveDelete', function() {
        it('should call v1MarketplaceCollectionsRemoveDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceCollectionsRemoveDelete call
          /*
          var id = "id_example";

          instance.v1MarketplaceCollectionsRemoveDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceCollectionsUpdate', function() {
        it('should call v1MarketplaceCollectionsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceCollectionsUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new PerchApi.Collection();
          data.addToManagedTeams = false;
          data.installCount = 0;
          data.itemType = "";
          data.store = new PerchApi.MarketplaceStore();
          data.store.visibleFor = "public";
          data.store.name = "";
          data.store.team = new PerchApi.MarketplaceItemStoreTeam();
          data.storeId = 0;

          instance.v1MarketplaceCollectionsUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Collection);
            expect(data.autoAddManagedTeams).to.be.a('string');
            expect(data.autoAddManagedTeams).to.be("");
            expect(data.addToManagedTeams).to.be.a('boolean');
            expect(data.addToManagedTeams).to.be(false);
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.installCount).to.be.a('number');
            expect(data.installCount).to.be(0);
            expect(data.isInstalled).to.be.a('boolean');
            expect(data.isInstalled).to.be(false);
            expect(data.isOwner).to.be.a('boolean');
            expect(data.isOwner).to.be(false);
            expect(data.itemType).to.be.a('string');
            expect(data.itemType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.patronTeams).to.be.a('string');
            expect(data.patronTeams).to.be("");
            expect(data.store).to.be.a(PerchApi.MarketplaceStore);
                  expect(data.store.id).to.be.a('number');
              expect(data.store.id).to.be(0);
              expect(data.store.visibleFor).to.be.a('string');
              expect(data.store.visibleFor).to.be("public");
              expect(data.store.name).to.be.a('string');
              expect(data.store.name).to.be("");
              expect(data.store.team).to.be.a(PerchApi.MarketplaceItemStoreTeam);
                    expect(data.store.team.id).to.be.a('number');
                expect(data.store.team.id).to.be(0);
                expect(data.store.team.displayName).to.be.a('string');
                expect(data.store.team.displayName).to.be("");
            expect(data.storeId).to.be.a('number');
            expect(data.storeId).to.be(0);
            expect(data.itemCount).to.be.a('string');
            expect(data.itemCount).to.be("");
            expect(data.totalInstallCount).to.be.a('string');
            expect(data.totalInstallCount).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceItemsAdd', function() {
        it('should call v1MarketplaceItemsAdd successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceItemsAdd call and complete the assertions
          /*
          var id = "id_example";
          var data = new PerchApi.MarketplacePolymorphic();

          instance.v1MarketplaceItemsAdd(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.MarketplacePolymorphic);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceItemsCreate', function() {
        it('should call v1MarketplaceItemsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceItemsCreate call and complete the assertions
          /*
          var data = new PerchApi.MarketplacePolymorphic();

          instance.v1MarketplaceItemsCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.MarketplacePolymorphic);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceItemsDelete', function() {
        it('should call v1MarketplaceItemsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceItemsDelete call
          /*
          var id = "id_example";

          instance.v1MarketplaceItemsDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceItemsList', function() {
        it('should call v1MarketplaceItemsList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceItemsList call and complete the assertions
          /*
          var opts = {};
          opts.isInstalled = "isInstalled_example";
          opts.itemType = "itemType_example";
          opts.visibleFor = "visibleFor_example";
          opts.store = "store_example";
          opts.collection = 8.14;
          opts.search = "search_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1MarketplaceItemsList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse20016);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.MarketplacePolymorphic);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceItemsPartialUpdate', function() {
        it('should call v1MarketplaceItemsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceItemsPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new PerchApi.MarketplacePolymorphic();

          instance.v1MarketplaceItemsPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.MarketplacePolymorphic);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceItemsRead', function() {
        it('should call v1MarketplaceItemsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceItemsRead call and complete the assertions
          /*
          var id = "id_example";

          instance.v1MarketplaceItemsRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.MarketplacePolymorphic);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceItemsRemoveCreate', function() {
        it('should call v1MarketplaceItemsRemoveCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceItemsRemoveCreate call and complete the assertions
          /*
          var id = "id_example";
          var data = new PerchApi.MarketplacePolymorphic();

          instance.v1MarketplaceItemsRemoveCreate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.MarketplacePolymorphic);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceItemsRemoveDelete', function() {
        it('should call v1MarketplaceItemsRemoveDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceItemsRemoveDelete call
          /*
          var id = "id_example";

          instance.v1MarketplaceItemsRemoveDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceItemsUpdate', function() {
        it('should call v1MarketplaceItemsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceItemsUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new PerchApi.MarketplacePolymorphic();

          instance.v1MarketplaceItemsUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.MarketplacePolymorphic);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceStoresCreate', function() {
        it('should call v1MarketplaceStoresCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceStoresCreate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.Store();
          data.name = "";
          data.description = "";
          data.team = new PerchApi.StoreTeam();
          data.teamId = 0;
          data.visibleFor = "public";

          instance.v1MarketplaceStoresCreate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Store);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.team).to.be.a(PerchApi.StoreTeam);
                  expect(data.team.id).to.be.a('number');
              expect(data.team.id).to.be(0);
            expect(data.teamId).to.be.a('number');
            expect(data.teamId).to.be(0);
            expect(data.visibleFor).to.be.a('string');
            expect(data.visibleFor).to.be("public");
            expect(data.itemCount).to.be.a('string');
            expect(data.itemCount).to.be("");
            expect(data.totalInstallCount).to.be.a('number');
            expect(data.totalInstallCount).to.be(0);
            expect(data.collectionId).to.be.a('number');
            expect(data.collectionId).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceStoresCreate_0', function() {
        it('should call v1MarketplaceStoresCreate_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceStoresCreate_0 call
          /*
          var companyId = "companyId_example";
          var itemType = "itemType_example";
          var storeId = "storeId_example";

          instance.v1MarketplaceStoresCreate_0(companyId, itemType, storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceStoresDelete', function() {
        it('should call v1MarketplaceStoresDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceStoresDelete call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.v1MarketplaceStoresDelete(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceStoresDelete_0', function() {
        it('should call v1MarketplaceStoresDelete_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceStoresDelete_0 call
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var itemType = "itemType_example";
          var storeId = "storeId_example";

          instance.v1MarketplaceStoresDelete_0(companyId, id, itemType, storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceStoresList', function() {
        it('should call v1MarketplaceStoresList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceStoresList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1MarketplaceStoresList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse20017);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.Store);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.team).to.be.a(PerchApi.StoreTeam);
                      expect(data.team.id).to.be.a('number');
                  expect(data.team.id).to.be(0);
                expect(data.teamId).to.be.a('number');
                expect(data.teamId).to.be(0);
                expect(data.visibleFor).to.be.a('string');
                expect(data.visibleFor).to.be("public");
                expect(data.itemCount).to.be.a('string');
                expect(data.itemCount).to.be("");
                expect(data.totalInstallCount).to.be.a('number');
                expect(data.totalInstallCount).to.be(0);
                expect(data.collectionId).to.be.a('number');
                expect(data.collectionId).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceStoresList_0', function() {
        it('should call v1MarketplaceStoresList_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceStoresList_0 call
          /*
          var companyId = "companyId_example";
          var itemType = "itemType_example";
          var storeId = "storeId_example";
          var opts = {};
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1MarketplaceStoresList_0(companyId, itemType, storeId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceStoresPartialUpdate', function() {
        it('should call v1MarketplaceStoresPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceStoresPartialUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.Store();
          data.name = "";
          data.description = "";
          data.team = new PerchApi.StoreTeam();
          data.teamId = 0;
          data.visibleFor = "public";

          instance.v1MarketplaceStoresPartialUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Store);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.team).to.be.a(PerchApi.StoreTeam);
                  expect(data.team.id).to.be.a('number');
              expect(data.team.id).to.be(0);
            expect(data.teamId).to.be.a('number');
            expect(data.teamId).to.be(0);
            expect(data.visibleFor).to.be.a('string');
            expect(data.visibleFor).to.be("public");
            expect(data.itemCount).to.be.a('string');
            expect(data.itemCount).to.be("");
            expect(data.totalInstallCount).to.be.a('number');
            expect(data.totalInstallCount).to.be(0);
            expect(data.collectionId).to.be.a('number');
            expect(data.collectionId).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceStoresPartialUpdate_0', function() {
        it('should call v1MarketplaceStoresPartialUpdate_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceStoresPartialUpdate_0 call
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var itemType = "itemType_example";
          var storeId = "storeId_example";

          instance.v1MarketplaceStoresPartialUpdate_0(companyId, id, itemType, storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceStoresRead', function() {
        it('should call v1MarketplaceStoresRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceStoresRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.v1MarketplaceStoresRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Store);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.team).to.be.a(PerchApi.StoreTeam);
                  expect(data.team.id).to.be.a('number');
              expect(data.team.id).to.be(0);
            expect(data.teamId).to.be.a('number');
            expect(data.teamId).to.be(0);
            expect(data.visibleFor).to.be.a('string');
            expect(data.visibleFor).to.be("public");
            expect(data.itemCount).to.be.a('string');
            expect(data.itemCount).to.be("");
            expect(data.totalInstallCount).to.be.a('number');
            expect(data.totalInstallCount).to.be(0);
            expect(data.collectionId).to.be.a('number');
            expect(data.collectionId).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceStoresRead_0', function() {
        it('should call v1MarketplaceStoresRead_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceStoresRead_0 call
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var itemType = "itemType_example";
          var storeId = "storeId_example";

          instance.v1MarketplaceStoresRead_0(companyId, id, itemType, storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceStoresUpdate', function() {
        it('should call v1MarketplaceStoresUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceStoresUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.Store();
          data.name = "";
          data.description = "";
          data.team = new PerchApi.StoreTeam();
          data.teamId = 0;
          data.visibleFor = "public";

          instance.v1MarketplaceStoresUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Store);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.team).to.be.a(PerchApi.StoreTeam);
                  expect(data.team.id).to.be.a('number');
              expect(data.team.id).to.be(0);
            expect(data.teamId).to.be.a('number');
            expect(data.teamId).to.be(0);
            expect(data.visibleFor).to.be.a('string');
            expect(data.visibleFor).to.be("public");
            expect(data.itemCount).to.be.a('string');
            expect(data.itemCount).to.be("");
            expect(data.totalInstallCount).to.be.a('number');
            expect(data.totalInstallCount).to.be(0);
            expect(data.collectionId).to.be.a('number');
            expect(data.collectionId).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MarketplaceStoresUpdate_0', function() {
        it('should call v1MarketplaceStoresUpdate_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MarketplaceStoresUpdate_0 call
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var itemType = "itemType_example";
          var storeId = "storeId_example";

          instance.v1MarketplaceStoresUpdate_0(companyId, id, itemType, storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MetricsOrganizationsList', function() {
        it('should call v1MetricsOrganizationsList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MetricsOrganizationsList call and complete the assertions
          /*
          var opts = {};
          opts._date = "_date_example";
          opts.dateLt = "dateLt_example";
          opts.dateLte = "dateLte_example";
          opts.dateGt = "dateGt_example";
          opts.dateGte = "dateGte_example";
          opts.ordering = "ordering_example";

          instance.v1MetricsOrganizationsList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.Organizations);
              expect(data.label).to.be.a('string');
              expect(data.label).to.be("");
              expect(data.value).to.be.a('number');
              expect(data.value).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MetricsOrganizationsRead', function() {
        it('should call v1MetricsOrganizationsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MetricsOrganizationsRead call and complete the assertions
          /*
          var id = "id_example";

          instance.v1MetricsOrganizationsRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Organizations);
            expect(data.label).to.be.a('string');
            expect(data.label).to.be("");
            expect(data.value).to.be.a('number');
            expect(data.value).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MetricsSuppressionsAndEscalationsList', function() {
        it('should call v1MetricsSuppressionsAndEscalationsList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MetricsSuppressionsAndEscalationsList call and complete the assertions
          /*
          var opts = {};
          opts.company = 8.14;
          opts.companyIexact = 8.14;
          opts.companyGt = 8.14;
          opts.companyGte = 8.14;
          opts.companyLt = 8.14;
          opts.companyLte = 8.14;
          opts.companyIn = 8.14;
          opts.companyContains = 8.14;
          opts.companyIcontains = 8.14;
          opts.companyStartswith = 8.14;
          opts.companyIstartswith = 8.14;
          opts.companyEndswith = 8.14;
          opts.companyIendswith = 8.14;
          opts.companyRange = 8.14;
          opts.companyIsnull = "companyIsnull_example";
          opts.companyRegex = 8.14;
          opts.companyIregex = 8.14;
          opts.companyContainedBy = 8.14;
          opts.ordering = "ordering_example";

          instance.v1MetricsSuppressionsAndEscalationsList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.SuppressionsAndEscalations);
              expect(data.label).to.be.a('string');
              expect(data.label).to.be("");
              expect(data.truePositives).to.be.a('number');
              expect(data.truePositives).to.be(0);
              expect(data.falsePositives).to.be.a('number');
              expect(data.falsePositives).to.be(0);
              expect(data.escalations).to.be.a('number');
              expect(data.escalations).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MetricsSuppressionsAndEscalationsRead', function() {
        it('should call v1MetricsSuppressionsAndEscalationsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MetricsSuppressionsAndEscalationsRead call and complete the assertions
          /*
          var id = "id_example";

          instance.v1MetricsSuppressionsAndEscalationsRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.SuppressionsAndEscalations);
            expect(data.label).to.be.a('string');
            expect(data.label).to.be("");
            expect(data.truePositives).to.be.a('number');
            expect(data.truePositives).to.be(0);
            expect(data.falsePositives).to.be.a('number');
            expect(data.falsePositives).to.be(0);
            expect(data.escalations).to.be.a('number');
            expect(data.escalations).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MetricsTeamsAllStatsList', function() {
        it('should call v1MetricsTeamsAllStatsList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MetricsTeamsAllStatsList call
          /*
          var opts = {};
          opts.ordering = "ordering_example";

          instance.v1MetricsTeamsAllStatsList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MsspsSlasCreate', function() {
        it('should call v1MsspsSlasCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MsspsSlasCreate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.SLACreation();
          data.owner = 0;
          data.name = "";
          data.minutesToRespond = 0;
          data.timezone = "Africa/Abidjan";
          data.windows = [[new PerchApi.SLAWindowCreation()]];

          instance.v1MsspsSlasCreate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.SLACreation);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.owner).to.be.a('number');
            expect(data.owner).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.minutesToRespond).to.be.a('number');
            expect(data.minutesToRespond).to.be(0);
            expect(data.timezone).to.be.a('string');
            expect(data.timezone).to.be("Africa/Abidjan");
            {
              let dataCtr = data.windows;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.Array);
                expect(data.startAt).to.be.a('string');
                expect(data.startAt).to.be("");
                expect(data.endAt).to.be.a('string');
                expect(data.endAt).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MsspsSlasDelete', function() {
        it('should call v1MsspsSlasDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MsspsSlasDelete call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.v1MsspsSlasDelete(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MsspsSlasList', function() {
        it('should call v1MsspsSlasList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MsspsSlasList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.owner = "owner_example";
          opts.timezone = "timezone_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1MsspsSlasList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse20018);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.SLA);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.owner).to.be.a(PerchApi.SLATeam);
                      expect(data.owner.id).to.be.a('number');
                  expect(data.owner.id).to.be(0);
                  expect(data.owner.name).to.be.a('string');
                  expect(data.owner.name).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.minutesToRespond).to.be.a('string');
                expect(data.minutesToRespond).to.be("");
                expect(data.timezone).to.be.a('string');
                expect(data.timezone).to.be("");
                expect(data.windows).to.be.a('string');
                expect(data.windows).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1MsspsTeamsDelete', function() {
        it('should call v1MsspsTeamsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1MsspsTeamsDelete call
          /*
          var companyId = "companyId_example";
          var msspId = "msspId_example";

          instance.v1MsspsTeamsDelete(companyId, msspId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1NewTeamRegistrationCreate', function() {
        it('should call v1NewTeamRegistrationCreate successfully', function(done) {
          // TODO: uncomment v1NewTeamRegistrationCreate call
          /*

          instance.v1NewTeamRegistrationCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SecurityEventsCommentsCreate', function() {
        it('should call v1SecurityEventsCommentsCreate successfully', function(done) {
          // TODO: uncomment v1SecurityEventsCommentsCreate call
          /*

          instance.v1SecurityEventsCommentsCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SecurityEventsCommentsDelete', function() {
        it('should call v1SecurityEventsCommentsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SecurityEventsCommentsDelete call
          /*
          var id = 56;

          instance.v1SecurityEventsCommentsDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SecurityEventsCommentsList', function() {
        it('should call v1SecurityEventsCommentsList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SecurityEventsCommentsList call and complete the assertions
          /*
          var opts = {};
          opts.ordering = "ordering_example";

          instance.v1SecurityEventsCommentsList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.Comment);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.groupId).to.be.a('number');
              expect(data.groupId).to.be(0);
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.privateFor).to.be.a('number');
              expect(data.privateFor).to.be(0);
              expect(data.anonymous).to.be.a('boolean');
              expect(data.anonymous).to.be(false);
              expect(data.visibility).to.be.a('number');
              expect(data.visibility).to.be(0);
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.createdAt).to.be.a(Date);
              expect(data.createdAt).to.be(new Date());
              expect(data.canDelete).to.be.a('string');
              expect(data.canDelete).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SecurityEventsCommentsPartialUpdate', function() {
        it('should call v1SecurityEventsCommentsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SecurityEventsCommentsPartialUpdate call and complete the assertions
          /*
          var id = 56;
          var data = new PerchApi.CommentSerializer();
          data.comment = new PerchApi.Comment();
          data.comment.text = "";
          data.comment.privateFor = 0;
          data.comment.anonymous = false;
          data.comment.visibility = 0;
          data.indicatorId = "";

          instance.v1SecurityEventsCommentsPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.CommentSerializer);
            expect(data.comment).to.be.a(PerchApi.Comment);
                  expect(data.comment.id).to.be.a('number');
              expect(data.comment.id).to.be(0);
              expect(data.comment.groupId).to.be.a('number');
              expect(data.comment.groupId).to.be(0);
              expect(data.comment.text).to.be.a('string');
              expect(data.comment.text).to.be("");
              expect(data.comment.privateFor).to.be.a('number');
              expect(data.comment.privateFor).to.be(0);
              expect(data.comment.anonymous).to.be.a('boolean');
              expect(data.comment.anonymous).to.be(false);
              expect(data.comment.visibility).to.be.a('number');
              expect(data.comment.visibility).to.be(0);
              expect(data.comment.createdBy).to.be.a('string');
              expect(data.comment.createdBy).to.be("");
              expect(data.comment.createdAt).to.be.a(Date);
              expect(data.comment.createdAt).to.be(new Date());
              expect(data.comment.canDelete).to.be.a('string');
              expect(data.comment.canDelete).to.be("");
            expect(data.indicatorId).to.be.a('string');
            expect(data.indicatorId).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SecurityEventsCommentsUpdate', function() {
        it('should call v1SecurityEventsCommentsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SecurityEventsCommentsUpdate call
          /*
          var id = 56;

          instance.v1SecurityEventsCommentsUpdate(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SecurityEventsCreate', function() {
        it('should call v1SecurityEventsCreate successfully', function(done) {
          // TODO: uncomment v1SecurityEventsCreate call
          /*

          instance.v1SecurityEventsCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SecurityEventsDelete', function() {
        it('should call v1SecurityEventsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SecurityEventsDelete call
          /*
          var securityEventId = "securityEventId_example";

          instance.v1SecurityEventsDelete(securityEventId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SecurityEventsList', function() {
        it('should call v1SecurityEventsList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SecurityEventsList call
          /*
          var opts = {};
          opts.lastSeenAt = "lastSeenAt_example";
          opts.id = "id_example";
          opts.indicatorId = "indicatorId_example";
          opts.indicatorTitle = "indicatorTitle_example";
          opts.sensorId = "sensorId_example";
          opts.sensorName = "sensorName_example";
          opts.teamId = "teamId_example";
          opts.communityId = "communityId_example";
          opts.createdAt = "createdAt_example";
          opts.srcIp = "srcIp_example";
          opts.srcPort = "srcPort_example";
          opts.destIp = "destIp_example";
          opts.destPort = "destPort_example";
          opts.protocol = "protocol_example";
          opts.observableId = "observableId_example";
          opts.status = "status_example";
          opts.fullUrl = "fullUrl_example";
          opts.indicatorLoaded = "indicatorLoaded_example";
          opts.closedAt = "closedAt_example";
          opts.isCompliant = "isCompliant_example";
          opts.hasSla = "hasSla_example";
          opts.closed = "closed_example";
          opts.closedAtGte = "closedAtGte_example";
          opts.closedAtLte = "closedAtLte_example";
          opts.createdAtGte = "createdAtGte_example";
          opts.createdAtLte = "createdAtLte_example";
          opts.flowId = "flowId_example";
          opts.hostIp = "hostIp_example";
          opts.srcOrDestIp = "srcOrDestIp_example";
          opts.srcFqdn = "srcFqdn_example";
          opts.destFqdn = "destFqdn_example";
          opts.wasSuppressed = "wasSuppressed_example";
          opts.totalSecondsRemaining = "totalSecondsRemaining_example";
          opts.totalSecondsRemainingLt = "totalSecondsRemainingLt_example";
          opts.totalSecondsRemainingLte = "totalSecondsRemainingLte_example";
          opts.totalSecondsRemainingGt = "totalSecondsRemainingGt_example";
          opts.totalSecondsRemainingGte = "totalSecondsRemainingGte_example";
          opts.search = "search_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1SecurityEventsList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SecurityEventsPartialUpdate', function() {
        it('should call v1SecurityEventsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SecurityEventsPartialUpdate call
          /*
          var securityEventId = "securityEventId_example";

          instance.v1SecurityEventsPartialUpdate(securityEventId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SecurityEventsRead', function() {
        it('should call v1SecurityEventsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SecurityEventsRead call
          /*
          var securityEventId = "securityEventId_example";

          instance.v1SecurityEventsRead(securityEventId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SecurityEventsStatusStatusCounts', function() {
        it('should call v1SecurityEventsStatusStatusCounts successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SecurityEventsStatusStatusCounts call
          /*
          var opts = {};
          opts.lastSeenAt = "lastSeenAt_example";
          opts.id = "id_example";
          opts.indicatorId = "indicatorId_example";
          opts.indicatorTitle = "indicatorTitle_example";
          opts.sensorId = "sensorId_example";
          opts.sensorName = "sensorName_example";
          opts.teamId = "teamId_example";
          opts.communityId = "communityId_example";
          opts.createdAt = "createdAt_example";
          opts.srcIp = "srcIp_example";
          opts.srcPort = "srcPort_example";
          opts.destIp = "destIp_example";
          opts.destPort = "destPort_example";
          opts.protocol = "protocol_example";
          opts.observableId = "observableId_example";
          opts.status = "status_example";
          opts.fullUrl = "fullUrl_example";
          opts.indicatorLoaded = "indicatorLoaded_example";
          opts.closedAt = "closedAt_example";
          opts.isCompliant = "isCompliant_example";
          opts.hasSla = "hasSla_example";
          opts.closed = "closed_example";
          opts.closedAtGte = "closedAtGte_example";
          opts.closedAtLte = "closedAtLte_example";
          opts.createdAtGte = "createdAtGte_example";
          opts.createdAtLte = "createdAtLte_example";
          opts.flowId = "flowId_example";
          opts.hostIp = "hostIp_example";
          opts.srcOrDestIp = "srcOrDestIp_example";
          opts.srcFqdn = "srcFqdn_example";
          opts.destFqdn = "destFqdn_example";
          opts.wasSuppressed = "wasSuppressed_example";
          opts.totalSecondsRemaining = "totalSecondsRemaining_example";
          opts.totalSecondsRemainingLt = "totalSecondsRemainingLt_example";
          opts.totalSecondsRemainingLte = "totalSecondsRemainingLte_example";
          opts.totalSecondsRemainingGt = "totalSecondsRemainingGt_example";
          opts.totalSecondsRemainingGte = "totalSecondsRemainingGte_example";
          opts.search = "search_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1SecurityEventsStatusStatusCounts(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SecurityEventsUpdate', function() {
        it('should call v1SecurityEventsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SecurityEventsUpdate call
          /*
          var securityEventId = "securityEventId_example";

          instance.v1SecurityEventsUpdate(securityEventId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SensorFilesDownloadList', function() {
        it('should call v1SensorFilesDownloadList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SensorFilesDownloadList call
          /*
          var fileName = "fileName_example";

          instance.v1SensorFilesDownloadList(fileName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SensorFilesDownloadList_0', function() {
        it('should call v1SensorFilesDownloadList_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SensorFilesDownloadList_0 call
          /*
          var fileName = "fileName_example";
          var sensorId = "sensorId_example";

          instance.v1SensorFilesDownloadList_0(fileName, sensorId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SensorFilesHashList', function() {
        it('should call v1SensorFilesHashList successfully', function(done) {
          // TODO: uncomment v1SensorFilesHashList call
          /*

          instance.v1SensorFilesHashList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SensorHealthRead', function() {
        it('should call v1SensorHealthRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SensorHealthRead call
          /*
          var id = "id_example";

          instance.v1SensorHealthRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SingleTeam', function() {
        it('should call v1SingleTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SingleTeam call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.dateLt = "dateLt_example";
          opts.dateLte = "dateLte_example";
          opts.dateGt = "dateGt_example";
          opts.dateGte = "dateGte_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1SingleTeam(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse20021);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.TeamUsage);
                expect(data._date).to.be.a(Date);
                expect(data._date).to.be(new Date());
                expect(data.eventCount).to.be.a('number');
                expect(data.eventCount).to.be(0);
                expect(data.eventsPerSecond).to.be.a('number');
                expect(data.eventsPerSecond).to.be();
                expect(data.office365LicensedUserCount).to.be.a('number');
                expect(data.office365LicensedUserCount).to.be(0);
                expect(data.privateIpCount).to.be.a('number');
                expect(data.privateIpCount).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SupportedDevicesList', function() {
        it('should call v1SupportedDevicesList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SupportedDevicesList call and complete the assertions
          /*
          var opts = {};
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1SupportedDevicesList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse20019);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.SupportedDevice);
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.manufacturer).to.be.a('string');
                expect(data.manufacturer).to.be("");
                expect(data.manufacturerSlug).to.be.a('string');
                expect(data.manufacturerSlug).to.be("");
                expect(data.model).to.be.a('string');
                expect(data.model).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1SupportedDevicesRead', function() {
        it('should call v1SupportedDevicesRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1SupportedDevicesRead call and complete the assertions
          /*
          var id = "id_example";

          instance.v1SupportedDevicesRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.SupportedDevice);
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.manufacturer).to.be.a('string');
            expect(data.manufacturer).to.be("");
            expect(data.manufacturerSlug).to.be.a('string');
            expect(data.manufacturerSlug).to.be("");
            expect(data.model).to.be.a('string');
            expect(data.model).to.be("");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1TeamsHealthList', function() {
        it('should call v1TeamsHealthList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1TeamsHealthList call and complete the assertions
          /*
          var opts = {};
          opts.teamId = "teamId_example";
          opts.alerts = "alerts_example";
          opts.alertsGte = "alertsGte_example";
          opts.alertsLte = "alertsLte_example";
          opts.escalations = "escalations_example";
          opts.lastLogin = "lastLogin_example";
          opts.lastEscalation = "lastEscalation_example";
          opts.onboardingIncomplete = "onboardingIncomplete_example";
          opts.escalationsGte = "escalationsGte_example";
          opts.escalationsLte = "escalationsLte_example";
          opts.lastLoginGte = "lastLoginGte_example";
          opts.lastLoginLte = "lastLoginLte_example";
          opts.lastEscalationGte = "lastEscalationGte_example";
          opts.lastEscalationLte = "lastEscalationLte_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1TeamsHealthList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse20020);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.TeamHealth);
                expect(data.teamId).to.be.a('number');
                expect(data.teamId).to.be(0);
                expect(data.teamName).to.be.a('string');
                expect(data.teamName).to.be("");
                expect(data.alerts).to.be.a('number');
                expect(data.alerts).to.be(0);
                expect(data.alertsDelta).to.be.a('string');
                expect(data.alertsDelta).to.be("");
                expect(data.escalations).to.be.a('number');
                expect(data.escalations).to.be(0);
                expect(data.escalationsDelta).to.be.a('string');
                expect(data.escalationsDelta).to.be("");
                expect(data.lastLogin).to.be.a(Date);
                expect(data.lastLogin).to.be(new Date());
                expect(data.lastEscalation).to.be.a(Date);
                expect(data.lastEscalation).to.be(new Date());
                expect(data.warnings).to.be.a(PerchApi.Warnings);
                      expect(data.warnings.onboardingIncomplete).to.be.a('string');
                  expect(data.warnings.onboardingIncomplete).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1TeamsHealthRead', function() {
        it('should call v1TeamsHealthRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1TeamsHealthRead call and complete the assertions
          /*
          var id = "id_example";

          instance.v1TeamsHealthRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.TeamHealth);
            expect(data.teamId).to.be.a('number');
            expect(data.teamId).to.be(0);
            expect(data.teamName).to.be.a('string');
            expect(data.teamName).to.be("");
            expect(data.alerts).to.be.a('number');
            expect(data.alerts).to.be(0);
            expect(data.alertsDelta).to.be.a('string');
            expect(data.alertsDelta).to.be("");
            expect(data.escalations).to.be.a('number');
            expect(data.escalations).to.be(0);
            expect(data.escalationsDelta).to.be.a('string');
            expect(data.escalationsDelta).to.be("");
            expect(data.lastLogin).to.be.a(Date);
            expect(data.lastLogin).to.be(new Date());
            expect(data.lastEscalation).to.be.a(Date);
            expect(data.lastEscalation).to.be(new Date());
            expect(data.warnings).to.be.a(PerchApi.Warnings);
                  expect(data.warnings.onboardingIncomplete).to.be.a('string');
              expect(data.warnings.onboardingIncomplete).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1TeamsSensorsSummaryCreate', function() {
        it('should call v1TeamsSensorsSummaryCreate successfully', function(done) {
          // TODO: uncomment v1TeamsSensorsSummaryCreate call
          /*

          instance.v1TeamsSensorsSummaryCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1TeamsSensorsSummaryDelete', function() {
        it('should call v1TeamsSensorsSummaryDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for v1TeamsSensorsSummaryDelete call
          /*
          var id = "id_example";

          instance.v1TeamsSensorsSummaryDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1TeamsSensorsSummaryList', function() {
        it('should call v1TeamsSensorsSummaryList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1TeamsSensorsSummaryList call
          /*
          var opts = {};
          opts.ordering = "ordering_example";
          opts.search = "search_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1TeamsSensorsSummaryList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1TeamsSensorsSummaryPartialUpdate', function() {
        it('should call v1TeamsSensorsSummaryPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1TeamsSensorsSummaryPartialUpdate call
          /*
          var id = "id_example";

          instance.v1TeamsSensorsSummaryPartialUpdate(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1TeamsSensorsSummaryRead', function() {
        it('should call v1TeamsSensorsSummaryRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1TeamsSensorsSummaryRead call
          /*
          var id = "id_example";

          instance.v1TeamsSensorsSummaryRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1TeamsSensorsSummaryUpdate', function() {
        it('should call v1TeamsSensorsSummaryUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1TeamsSensorsSummaryUpdate call
          /*
          var id = "id_example";

          instance.v1TeamsSensorsSummaryUpdate(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1UsageAllTeamsForUser', function() {
        it('should call v1UsageAllTeamsForUser successfully', function(done) {
          // TODO: uncomment, update parameter values for v1UsageAllTeamsForUser call and complete the assertions
          /*
          var opts = {};
          opts.dateLt = "dateLt_example";
          opts.dateLte = "dateLte_example";
          opts.dateGt = "dateGt_example";
          opts.dateGte = "dateGte_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1UsageAllTeamsForUser(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse20021);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.TeamUsage);
                expect(data._date).to.be.a(Date);
                expect(data._date).to.be(new Date());
                expect(data.eventCount).to.be.a('number');
                expect(data.eventCount).to.be(0);
                expect(data.eventsPerSecond).to.be.a('number');
                expect(data.eventsPerSecond).to.be();
                expect(data.office365LicensedUserCount).to.be.a('number');
                expect(data.office365LicensedUserCount).to.be(0);
                expect(data.privateIpCount).to.be.a('number');
                expect(data.privateIpCount).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1UsageManagedTeams', function() {
        it('should call v1UsageManagedTeams successfully', function(done) {
          // TODO: uncomment, update parameter values for v1UsageManagedTeams call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.dateLt = "dateLt_example";
          opts.dateLte = "dateLte_example";
          opts.dateGt = "dateGt_example";
          opts.dateGte = "dateGte_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1UsageManagedTeams(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse20021);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.TeamUsage);
                expect(data._date).to.be.a(Date);
                expect(data._date).to.be(new Date());
                expect(data.eventCount).to.be.a('number');
                expect(data.eventCount).to.be(0);
                expect(data.eventsPerSecond).to.be.a('number');
                expect(data.eventsPerSecond).to.be();
                expect(data.office365LicensedUserCount).to.be.a('number');
                expect(data.office365LicensedUserCount).to.be(0);
                expect(data.privateIpCount).to.be.a('number');
                expect(data.privateIpCount).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1UserLoginsList', function() {
        it('should call v1UserLoginsList successfully', function(done) {
          // TODO: uncomment, update parameter values for v1UserLoginsList call
          /*
          var userId = "userId_example";
          var opts = {};
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.v1UserLoginsList(userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1UserMePartialUpdate', function() {
        it('should call v1UserMePartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1UserMePartialUpdate call and complete the assertions
          /*
          var data = new PerchApi.AboutMeSerializerV1();
          data.prefs = new PerchApi.Preference();
          data.prefs.emailIndicatorUpdates = false;
          data.prefs.inactivityTimeout = 0;
          data.prefs.openLinksInNewTab = false;
          data.prefs.showTimesAsUtc = false;
          data.prefs.showTimesAsMilitary = false;
          data.prefs.showSinceYouveBeenGone = false;
          data.prefs.showAlertPayloadOnHover = false;
          data.prefs.allowPerchybanaLinkMetaKeys = false;
          data.prefs.perchybanaLinkMetaKeys = ;
          data.username = "";
          data.firstName = "";
          data.lastName = "";
          data.address1 = "";
          data.address2 = "";
          data.city = "";
          data.state = "";
          data.postalCode = "";
          data.phone = "";

          instance.v1UserMePartialUpdate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.AboutMeSerializerV1);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.prefs).to.be.a(PerchApi.Preference);
                  expect(data.prefs.emailIndicatorUpdates).to.be.a('boolean');
              expect(data.prefs.emailIndicatorUpdates).to.be(false);
              expect(data.prefs.inactivityTimeout).to.be.a('number');
              expect(data.prefs.inactivityTimeout).to.be(0);
              expect(data.prefs.openLinksInNewTab).to.be.a('boolean');
              expect(data.prefs.openLinksInNewTab).to.be(false);
              expect(data.prefs.showTimesAsUtc).to.be.a('boolean');
              expect(data.prefs.showTimesAsUtc).to.be(false);
              expect(data.prefs.showTimesAsMilitary).to.be.a('boolean');
              expect(data.prefs.showTimesAsMilitary).to.be(false);
              expect(data.prefs.showSinceYouveBeenGone).to.be.a('boolean');
              expect(data.prefs.showSinceYouveBeenGone).to.be(false);
              expect(data.prefs.showAlertPayloadOnHover).to.be.a('boolean');
              expect(data.prefs.showAlertPayloadOnHover).to.be(false);
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be.a('boolean');
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be(false);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be.a(Object);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be();
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.address1).to.be.a('string');
            expect(data.address1).to.be("");
            expect(data.address2).to.be.a('string');
            expect(data.address2).to.be("");
            expect(data.city).to.be.a('string');
            expect(data.city).to.be("");
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("");
            expect(data.postalCode).to.be.a('string');
            expect(data.postalCode).to.be("");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.staff).to.be.a('boolean');
            expect(data.staff).to.be(false);
            expect(data.isMsspMember).to.be.a('boolean');
            expect(data.isMsspMember).to.be(false);
            expect(data.organizations).to.be.a('string');
            expect(data.organizations).to.be("");
            expect(data.community).to.be.a('string');
            expect(data.community).to.be("");
            expect(data.tours).to.be.a('string');
            expect(data.tours).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1UserMeRead', function() {
        it('should call v1UserMeRead successfully', function(done) {
          // TODO: uncomment v1UserMeRead call and complete the assertions
          /*

          instance.v1UserMeRead(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.AboutMeSerializerV1);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.prefs).to.be.a(PerchApi.Preference);
                  expect(data.prefs.emailIndicatorUpdates).to.be.a('boolean');
              expect(data.prefs.emailIndicatorUpdates).to.be(false);
              expect(data.prefs.inactivityTimeout).to.be.a('number');
              expect(data.prefs.inactivityTimeout).to.be(0);
              expect(data.prefs.openLinksInNewTab).to.be.a('boolean');
              expect(data.prefs.openLinksInNewTab).to.be(false);
              expect(data.prefs.showTimesAsUtc).to.be.a('boolean');
              expect(data.prefs.showTimesAsUtc).to.be(false);
              expect(data.prefs.showTimesAsMilitary).to.be.a('boolean');
              expect(data.prefs.showTimesAsMilitary).to.be(false);
              expect(data.prefs.showSinceYouveBeenGone).to.be.a('boolean');
              expect(data.prefs.showSinceYouveBeenGone).to.be(false);
              expect(data.prefs.showAlertPayloadOnHover).to.be.a('boolean');
              expect(data.prefs.showAlertPayloadOnHover).to.be(false);
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be.a('boolean');
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be(false);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be.a(Object);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be();
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.address1).to.be.a('string');
            expect(data.address1).to.be("");
            expect(data.address2).to.be.a('string');
            expect(data.address2).to.be("");
            expect(data.city).to.be.a('string');
            expect(data.city).to.be("");
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("");
            expect(data.postalCode).to.be.a('string');
            expect(data.postalCode).to.be("");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.staff).to.be.a('boolean');
            expect(data.staff).to.be(false);
            expect(data.isMsspMember).to.be.a('boolean');
            expect(data.isMsspMember).to.be(false);
            expect(data.organizations).to.be.a('string');
            expect(data.organizations).to.be("");
            expect(data.community).to.be.a('string');
            expect(data.community).to.be("");
            expect(data.tours).to.be.a('string');
            expect(data.tours).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1UserPartialUpdate', function() {
        it('should call v1UserPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for v1UserPartialUpdate call and complete the assertions
          /*
          var userId = "userId_example";
          var data = new PerchApi.AboutMeSerializerV1();
          data.prefs = new PerchApi.Preference();
          data.prefs.emailIndicatorUpdates = false;
          data.prefs.inactivityTimeout = 0;
          data.prefs.openLinksInNewTab = false;
          data.prefs.showTimesAsUtc = false;
          data.prefs.showTimesAsMilitary = false;
          data.prefs.showSinceYouveBeenGone = false;
          data.prefs.showAlertPayloadOnHover = false;
          data.prefs.allowPerchybanaLinkMetaKeys = false;
          data.prefs.perchybanaLinkMetaKeys = ;
          data.username = "";
          data.firstName = "";
          data.lastName = "";
          data.address1 = "";
          data.address2 = "";
          data.city = "";
          data.state = "";
          data.postalCode = "";
          data.phone = "";

          instance.v1UserPartialUpdate(userId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.AboutMeSerializerV1);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.prefs).to.be.a(PerchApi.Preference);
                  expect(data.prefs.emailIndicatorUpdates).to.be.a('boolean');
              expect(data.prefs.emailIndicatorUpdates).to.be(false);
              expect(data.prefs.inactivityTimeout).to.be.a('number');
              expect(data.prefs.inactivityTimeout).to.be(0);
              expect(data.prefs.openLinksInNewTab).to.be.a('boolean');
              expect(data.prefs.openLinksInNewTab).to.be(false);
              expect(data.prefs.showTimesAsUtc).to.be.a('boolean');
              expect(data.prefs.showTimesAsUtc).to.be(false);
              expect(data.prefs.showTimesAsMilitary).to.be.a('boolean');
              expect(data.prefs.showTimesAsMilitary).to.be(false);
              expect(data.prefs.showSinceYouveBeenGone).to.be.a('boolean');
              expect(data.prefs.showSinceYouveBeenGone).to.be(false);
              expect(data.prefs.showAlertPayloadOnHover).to.be.a('boolean');
              expect(data.prefs.showAlertPayloadOnHover).to.be(false);
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be.a('boolean');
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be(false);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be.a(Object);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be();
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.address1).to.be.a('string');
            expect(data.address1).to.be("");
            expect(data.address2).to.be.a('string');
            expect(data.address2).to.be("");
            expect(data.city).to.be.a('string');
            expect(data.city).to.be("");
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("");
            expect(data.postalCode).to.be.a('string');
            expect(data.postalCode).to.be("");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.staff).to.be.a('boolean');
            expect(data.staff).to.be(false);
            expect(data.isMsspMember).to.be.a('boolean');
            expect(data.isMsspMember).to.be(false);
            expect(data.organizations).to.be.a('string');
            expect(data.organizations).to.be("");
            expect(data.community).to.be.a('string');
            expect(data.community).to.be("");
            expect(data.tours).to.be.a('string');
            expect(data.tours).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1UserRead', function() {
        it('should call v1UserRead successfully', function(done) {
          // TODO: uncomment, update parameter values for v1UserRead call and complete the assertions
          /*
          var userId = "userId_example";

          instance.v1UserRead(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.AboutMeSerializerV1);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.prefs).to.be.a(PerchApi.Preference);
                  expect(data.prefs.emailIndicatorUpdates).to.be.a('boolean');
              expect(data.prefs.emailIndicatorUpdates).to.be(false);
              expect(data.prefs.inactivityTimeout).to.be.a('number');
              expect(data.prefs.inactivityTimeout).to.be(0);
              expect(data.prefs.openLinksInNewTab).to.be.a('boolean');
              expect(data.prefs.openLinksInNewTab).to.be(false);
              expect(data.prefs.showTimesAsUtc).to.be.a('boolean');
              expect(data.prefs.showTimesAsUtc).to.be(false);
              expect(data.prefs.showTimesAsMilitary).to.be.a('boolean');
              expect(data.prefs.showTimesAsMilitary).to.be(false);
              expect(data.prefs.showSinceYouveBeenGone).to.be.a('boolean');
              expect(data.prefs.showSinceYouveBeenGone).to.be(false);
              expect(data.prefs.showAlertPayloadOnHover).to.be.a('boolean');
              expect(data.prefs.showAlertPayloadOnHover).to.be(false);
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be.a('boolean');
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be(false);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be.a(Object);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be();
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.address1).to.be.a('string');
            expect(data.address1).to.be("");
            expect(data.address2).to.be.a('string');
            expect(data.address2).to.be("");
            expect(data.city).to.be.a('string');
            expect(data.city).to.be("");
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("");
            expect(data.postalCode).to.be.a('string');
            expect(data.postalCode).to.be("");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.staff).to.be.a('boolean');
            expect(data.staff).to.be(false);
            expect(data.isMsspMember).to.be.a('boolean');
            expect(data.isMsspMember).to.be(false);
            expect(data.organizations).to.be.a('string');
            expect(data.organizations).to.be("");
            expect(data.community).to.be.a('string');
            expect(data.community).to.be("");
            expect(data.tours).to.be.a('string');
            expect(data.tours).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
