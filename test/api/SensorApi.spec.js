/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PerchApi);
  }
}(this, function(expect, PerchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PerchApi.SensorApi();
  });

  describe('(package)', function() {
    describe('SensorApi', function() {
      describe('sensorCommandCreate', function() {
        it('should call sensorCommandCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for sensorCommandCreate call and complete the assertions
          /*
          var sensorId = "sensorId_example";
          var data = new PerchApi.SensorCommand();
          data.command = "";
          data.result = "";
          data.createdBy = new PerchApi.User();
          data.createdBy.username = "";

          instance.sensorCommandCreate(sensorId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.SensorCommand);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.result).to.be.a('string');
            expect(data.result).to.be("");
            expect(data.sent).to.be.a(Date);
            expect(data.sent).to.be(new Date());
            expect(data.createdBy).to.be.a(PerchApi.User);
                  expect(data.createdBy.id).to.be.a('number');
              expect(data.createdBy.id).to.be(0);
              expect(data.createdBy.username).to.be.a('string');
              expect(data.createdBy.username).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorCommandResultsPartialUpdate', function() {
        it('should call sensorCommandResultsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for sensorCommandResultsPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new PerchApi.SensorCommandResult();
          data.result = "";

          instance.sensorCommandResultsPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.SensorCommandResult);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.result).to.be.a('string');
            expect(data.result).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorCommandResultsUpdate', function() {
        it('should call sensorCommandResultsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for sensorCommandResultsUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new PerchApi.SensorCommandResult();
          data.result = "";

          instance.sensorCommandResultsUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.SensorCommandResult);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.result).to.be.a('string');
            expect(data.result).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorFilesDownloadList', function() {
        it('should call sensorFilesDownloadList successfully', function(done) {
          // TODO: uncomment, update parameter values for sensorFilesDownloadList call
          /*
          var fileAlias = "fileAlias_example";

          instance.sensorFilesDownloadList(fileAlias, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorFilesDownloadList_0', function() {
        it('should call sensorFilesDownloadList_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for sensorFilesDownloadList_0 call
          /*
          var fileAlias = "fileAlias_example";
          var sensorId = "sensorId_example";

          instance.sensorFilesDownloadList_0(fileAlias, sensorId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorFilesHashList', function() {
        it('should call sensorFilesHashList successfully', function(done) {
          // TODO: uncomment sensorFilesHashList call
          /*

          instance.sensorFilesHashList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorFirewallBlacklistCreate', function() {
        it('should call sensorFirewallBlacklistCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for sensorFirewallBlacklistCreate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.Blacklist();
          data.createdBy = 0;
          data.brand = 0;
          data.team = 0;
          data.type = 0;
          data.updatedBy = 0;
          data.value = "";

          instance.sensorFirewallBlacklistCreate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Blacklist);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.brand).to.be.a('number');
            expect(data.brand).to.be(0);
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(0);
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);
            expect(data.value).to.be.a('string');
            expect(data.value).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorFirewallBlacklistDelete', function() {
        it('should call sensorFirewallBlacklistDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for sensorFirewallBlacklistDelete call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.sensorFirewallBlacklistDelete(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorFirewallBlacklistList', function() {
        it('should call sensorFirewallBlacklistList successfully', function(done) {
          // TODO: uncomment, update parameter values for sensorFirewallBlacklistList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.search = "search_example";
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.sensorFirewallBlacklistList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse20011);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.Blacklist);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.created).to.be.a(Date);
                expect(data.created).to.be(new Date());
                expect(data.createdBy).to.be.a('number');
                expect(data.createdBy).to.be(0);
                expect(data.brand).to.be.a('number');
                expect(data.brand).to.be(0);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                expect(data.team).to.be.a('number');
                expect(data.team).to.be(0);
                expect(data.type).to.be.a('number');
                expect(data.type).to.be(0);
                expect(data.updatedBy).to.be.a('number');
                expect(data.updatedBy).to.be(0);
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorFirewallBlacklistPartialUpdate', function() {
        it('should call sensorFirewallBlacklistPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for sensorFirewallBlacklistPartialUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.Blacklist();
          data.createdBy = 0;
          data.brand = 0;
          data.team = 0;
          data.type = 0;
          data.updatedBy = 0;
          data.value = "";

          instance.sensorFirewallBlacklistPartialUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Blacklist);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.brand).to.be.a('number');
            expect(data.brand).to.be(0);
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(0);
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);
            expect(data.value).to.be.a('string');
            expect(data.value).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorFirewallBlacklistRead', function() {
        it('should call sensorFirewallBlacklistRead successfully', function(done) {
          // TODO: uncomment, update parameter values for sensorFirewallBlacklistRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.sensorFirewallBlacklistRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Blacklist);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.brand).to.be.a('number');
            expect(data.brand).to.be(0);
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(0);
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);
            expect(data.value).to.be.a('string');
            expect(data.value).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorFirewallBlacklistUpdate', function() {
        it('should call sensorFirewallBlacklistUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for sensorFirewallBlacklistUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.Blacklist();
          data.createdBy = 0;
          data.brand = 0;
          data.team = 0;
          data.type = 0;
          data.updatedBy = 0;
          data.value = "";

          instance.sensorFirewallBlacklistUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Blacklist);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.brand).to.be.a('number');
            expect(data.brand).to.be(0);
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(0);
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);
            expect(data.value).to.be.a('string');
            expect(data.value).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorHealthMeCreate', function() {
        it('should call sensorHealthMeCreate successfully', function(done) {
          // TODO: uncomment sensorHealthMeCreate call
          /*

          instance.sensorHealthMeCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorImagesDirectList', function() {
        it('should call sensorImagesDirectList successfully', function(done) {
          // TODO: uncomment sensorImagesDirectList call
          /*

          instance.sensorImagesDirectList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorImagesHashList', function() {
        it('should call sensorImagesHashList successfully', function(done) {
          // TODO: uncomment sensorImagesHashList call
          /*

          instance.sensorImagesHashList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorMogaList', function() {
        it('should call sensorMogaList successfully', function(done) {
          // TODO: uncomment sensorMogaList call
          /*

          instance.sensorMogaList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorMogaRead', function() {
        it('should call sensorMogaRead successfully', function(done) {
          // TODO: uncomment, update parameter values for sensorMogaRead call
          /*
          var widgetName = "widgetName_example";

          instance.sensorMogaRead(widgetName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensorObservableBacktestCreate', function() {
        it('should call sensorObservableBacktestCreate successfully', function(done) {
          // TODO: uncomment sensorObservableBacktestCreate call
          /*

          instance.sensorObservableBacktestCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
