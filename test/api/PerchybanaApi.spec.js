/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PerchApi);
  }
}(this, function(expect, PerchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PerchApi.PerchybanaApi();
  });

  describe('(package)', function() {
    describe('PerchybanaApi', function() {
      describe('perchybanaCheckUserList', function() {
        it('should call perchybanaCheckUserList successfully', function(done) {
          // TODO: uncomment perchybanaCheckUserList call
          /*

          instance.perchybanaCheckUserList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsActivate', function() {
        it('should call perchybanaEventNotificationsActivate successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaEventNotificationsActivate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.EventNotification();
          data.aggregationField = 0;
          data.aggregationType = "Average";
          data.comparisonField = 0;
          data.createdAt = new Date();
          data.createdByTeam = 0;
          data.description = "";
          data.emailActionCustomRecipients = [""];
          data.enableCwManageActionDefault = false;
          data.enableEmailActionDefaultRecipients = false;
          data.enableEmailActionCustomRecipients = false;
          data.enableFreshdeskActionDefaultTicketType = false;
          data.enableFreshdeskActionCustomTicketType = false;
          data.enableMsftTeamsActionDefaultWebhookUrl = false;
          data.enableMsftTeamsActionCustomWebhookUrl = false;
          data.enableSlackActionDefaultChannel = false;
          data.enableSlackActionCustomChannel = false;
          data.enableSmsActionDefaultRecipients = false;
          data.enableSmsActionCustomRecipients = false;
          data.freshdeskActionCustomTicketType = "";
          data.indexMapping = 0;
          data.isEnabled = false;
          data.fieldsForDisplay = [0];
          data.keywordFilter = "";
          data.lastTriggeredAt = new Date();
          data.marketplaceSourceCollection = new PerchApi.MarketplaceSourceCollection();
          data.mitreAttackTactic = "";
          data.msftTeamsActionCustomWebhookUrl = "";
          data.name = "";
          data.perchAlertEnabled = false;
          data.prevTimeWindow = ;
          data.queryFilter = ;
          data.representationField = 0;
          data.schedule = ;
          data.severity = 0;
          data.slackActionCustomChannel = "";
          data.smsActionCustomRecipients = [""];
          data.spikePercentage = 0;
          data.thresholdCount = 0;
          data.throttlePeriod = 0;
          data.timeField = 0;
          data.timeWindow = ;
          data.triggerCondition = 0;

          instance.perchybanaEventNotificationsActivate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.EventNotification);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.aggregationField).to.be.a('number');
            expect(data.aggregationField).to.be(0);
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("Average");
            expect(data.comparisonField).to.be.a('number');
            expect(data.comparisonField).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdByTeam).to.be.a('number');
            expect(data.createdByTeam).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.emailActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.enableCwManageActionDefault).to.be.a('boolean');
            expect(data.enableCwManageActionDefault).to.be(false);
            expect(data.enableEmailActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableEmailActionDefaultRecipients).to.be(false);
            expect(data.enableEmailActionCustomRecipients).to.be.a('boolean');
            expect(data.enableEmailActionCustomRecipients).to.be(false);
            expect(data.enableFreshdeskActionDefaultTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionDefaultTicketType).to.be(false);
            expect(data.enableFreshdeskActionCustomTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionCustomTicketType).to.be(false);
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be(false);
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be(false);
            expect(data.enableSlackActionDefaultChannel).to.be.a('boolean');
            expect(data.enableSlackActionDefaultChannel).to.be(false);
            expect(data.enableSlackActionCustomChannel).to.be.a('boolean');
            expect(data.enableSlackActionCustomChannel).to.be(false);
            expect(data.enableSmsActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableSmsActionDefaultRecipients).to.be(false);
            expect(data.enableSmsActionCustomRecipients).to.be.a('boolean');
            expect(data.enableSmsActionCustomRecipients).to.be(false);
            expect(data.freshdeskActionCustomTicketType).to.be.a('string');
            expect(data.freshdeskActionCustomTicketType).to.be("");
            expect(data.indexMapping).to.be.a('number');
            expect(data.indexMapping).to.be(0);
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.isLocked).to.be.a('string');
            expect(data.isLocked).to.be("");
            {
              let dataCtr = data.fieldsForDisplay;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            expect(data.keywordFilter).to.be.a('string');
            expect(data.keywordFilter).to.be("");
            expect(data.kibanaQuery).to.be.a('string');
            expect(data.kibanaQuery).to.be("");
            expect(data.lastTriggeredAt).to.be.a(Date);
            expect(data.lastTriggeredAt).to.be(new Date());
            expect(data.marketplaceSourceCollection).to.be.a(PerchApi.MarketplaceSourceCollection);
                  expect(data.marketplaceSourceCollection.id).to.be.a('number');
              expect(data.marketplaceSourceCollection.id).to.be(0);
              expect(data.marketplaceSourceCollection.name).to.be.a('string');
              expect(data.marketplaceSourceCollection.name).to.be("");
              expect(data.marketplaceSourceCollection.visibleFor).to.be.a('string');
              expect(data.marketplaceSourceCollection.visibleFor).to.be("");
            expect(data.mitreAttackTactic).to.be.a('string');
            expect(data.mitreAttackTactic).to.be("");
            expect(data.msearchQuery).to.be.a('string');
            expect(data.msearchQuery).to.be("");
            expect(data.msftTeamsActionCustomWebhookUrl).to.be.a('string');
            expect(data.msftTeamsActionCustomWebhookUrl).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.perchAlertEnabled).to.be.a('boolean');
            expect(data.perchAlertEnabled).to.be(false);
            expect(data.prevTimeWindow).to.be.a(Object);
            expect(data.prevTimeWindow).to.be();
            expect(data.queryFilter).to.be.a(Object);
            expect(data.queryFilter).to.be();
            expect(data.representationField).to.be.a('number');
            expect(data.representationField).to.be(0);
            expect(data.schedule).to.be.a(Object);
            expect(data.schedule).to.be();
            expect(data.severity).to.be.a('number');
            expect(data.severity).to.be(0);
            expect(data.slackActionCustomChannel).to.be.a('string');
            expect(data.slackActionCustomChannel).to.be("");
            {
              let dataCtr = data.smsActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.spikePercentage).to.be.a('number');
            expect(data.spikePercentage).to.be(0);
            expect(data.thresholdCount).to.be.a('number');
            expect(data.thresholdCount).to.be(0);
            expect(data.throttlePeriod).to.be.a('number');
            expect(data.throttlePeriod).to.be(0);
            expect(data.timeField).to.be.a('number');
            expect(data.timeField).to.be(0);
            expect(data.timeWindow).to.be.a(Object);
            expect(data.timeWindow).to.be();
            expect(data.triggerCondition).to.be.a('number');
            expect(data.triggerCondition).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("");
            expect(data.watchError).to.be.a('string');
            expect(data.watchError).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsAlertableFieldsList', function() {
        it('should call perchybanaEventNotificationsAlertableFieldsList successfully', function(done) {
          // TODO: uncomment perchybanaEventNotificationsAlertableFieldsList call
          /*

          instance.perchybanaEventNotificationsAlertableFieldsList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsAlertableMappingsList', function() {
        it('should call perchybanaEventNotificationsAlertableMappingsList successfully', function(done) {
          // TODO: uncomment perchybanaEventNotificationsAlertableMappingsList call
          /*

          instance.perchybanaEventNotificationsAlertableMappingsList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsClone', function() {
        it('should call perchybanaEventNotificationsClone successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaEventNotificationsClone call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.EventNotification();
          data.aggregationField = 0;
          data.aggregationType = "Average";
          data.comparisonField = 0;
          data.createdAt = new Date();
          data.createdByTeam = 0;
          data.description = "";
          data.emailActionCustomRecipients = [""];
          data.enableCwManageActionDefault = false;
          data.enableEmailActionDefaultRecipients = false;
          data.enableEmailActionCustomRecipients = false;
          data.enableFreshdeskActionDefaultTicketType = false;
          data.enableFreshdeskActionCustomTicketType = false;
          data.enableMsftTeamsActionDefaultWebhookUrl = false;
          data.enableMsftTeamsActionCustomWebhookUrl = false;
          data.enableSlackActionDefaultChannel = false;
          data.enableSlackActionCustomChannel = false;
          data.enableSmsActionDefaultRecipients = false;
          data.enableSmsActionCustomRecipients = false;
          data.freshdeskActionCustomTicketType = "";
          data.indexMapping = 0;
          data.isEnabled = false;
          data.fieldsForDisplay = [0];
          data.keywordFilter = "";
          data.lastTriggeredAt = new Date();
          data.marketplaceSourceCollection = new PerchApi.MarketplaceSourceCollection();
          data.mitreAttackTactic = "";
          data.msftTeamsActionCustomWebhookUrl = "";
          data.name = "";
          data.perchAlertEnabled = false;
          data.prevTimeWindow = ;
          data.queryFilter = ;
          data.representationField = 0;
          data.schedule = ;
          data.severity = 0;
          data.slackActionCustomChannel = "";
          data.smsActionCustomRecipients = [""];
          data.spikePercentage = 0;
          data.thresholdCount = 0;
          data.throttlePeriod = 0;
          data.timeField = 0;
          data.timeWindow = ;
          data.triggerCondition = 0;

          instance.perchybanaEventNotificationsClone(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.EventNotification);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.aggregationField).to.be.a('number');
            expect(data.aggregationField).to.be(0);
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("Average");
            expect(data.comparisonField).to.be.a('number');
            expect(data.comparisonField).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdByTeam).to.be.a('number');
            expect(data.createdByTeam).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.emailActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.enableCwManageActionDefault).to.be.a('boolean');
            expect(data.enableCwManageActionDefault).to.be(false);
            expect(data.enableEmailActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableEmailActionDefaultRecipients).to.be(false);
            expect(data.enableEmailActionCustomRecipients).to.be.a('boolean');
            expect(data.enableEmailActionCustomRecipients).to.be(false);
            expect(data.enableFreshdeskActionDefaultTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionDefaultTicketType).to.be(false);
            expect(data.enableFreshdeskActionCustomTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionCustomTicketType).to.be(false);
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be(false);
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be(false);
            expect(data.enableSlackActionDefaultChannel).to.be.a('boolean');
            expect(data.enableSlackActionDefaultChannel).to.be(false);
            expect(data.enableSlackActionCustomChannel).to.be.a('boolean');
            expect(data.enableSlackActionCustomChannel).to.be(false);
            expect(data.enableSmsActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableSmsActionDefaultRecipients).to.be(false);
            expect(data.enableSmsActionCustomRecipients).to.be.a('boolean');
            expect(data.enableSmsActionCustomRecipients).to.be(false);
            expect(data.freshdeskActionCustomTicketType).to.be.a('string');
            expect(data.freshdeskActionCustomTicketType).to.be("");
            expect(data.indexMapping).to.be.a('number');
            expect(data.indexMapping).to.be(0);
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.isLocked).to.be.a('string');
            expect(data.isLocked).to.be("");
            {
              let dataCtr = data.fieldsForDisplay;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            expect(data.keywordFilter).to.be.a('string');
            expect(data.keywordFilter).to.be("");
            expect(data.kibanaQuery).to.be.a('string');
            expect(data.kibanaQuery).to.be("");
            expect(data.lastTriggeredAt).to.be.a(Date);
            expect(data.lastTriggeredAt).to.be(new Date());
            expect(data.marketplaceSourceCollection).to.be.a(PerchApi.MarketplaceSourceCollection);
                  expect(data.marketplaceSourceCollection.id).to.be.a('number');
              expect(data.marketplaceSourceCollection.id).to.be(0);
              expect(data.marketplaceSourceCollection.name).to.be.a('string');
              expect(data.marketplaceSourceCollection.name).to.be("");
              expect(data.marketplaceSourceCollection.visibleFor).to.be.a('string');
              expect(data.marketplaceSourceCollection.visibleFor).to.be("");
            expect(data.mitreAttackTactic).to.be.a('string');
            expect(data.mitreAttackTactic).to.be("");
            expect(data.msearchQuery).to.be.a('string');
            expect(data.msearchQuery).to.be("");
            expect(data.msftTeamsActionCustomWebhookUrl).to.be.a('string');
            expect(data.msftTeamsActionCustomWebhookUrl).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.perchAlertEnabled).to.be.a('boolean');
            expect(data.perchAlertEnabled).to.be(false);
            expect(data.prevTimeWindow).to.be.a(Object);
            expect(data.prevTimeWindow).to.be();
            expect(data.queryFilter).to.be.a(Object);
            expect(data.queryFilter).to.be();
            expect(data.representationField).to.be.a('number');
            expect(data.representationField).to.be(0);
            expect(data.schedule).to.be.a(Object);
            expect(data.schedule).to.be();
            expect(data.severity).to.be.a('number');
            expect(data.severity).to.be(0);
            expect(data.slackActionCustomChannel).to.be.a('string');
            expect(data.slackActionCustomChannel).to.be("");
            {
              let dataCtr = data.smsActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.spikePercentage).to.be.a('number');
            expect(data.spikePercentage).to.be(0);
            expect(data.thresholdCount).to.be.a('number');
            expect(data.thresholdCount).to.be(0);
            expect(data.throttlePeriod).to.be.a('number');
            expect(data.throttlePeriod).to.be(0);
            expect(data.timeField).to.be.a('number');
            expect(data.timeField).to.be(0);
            expect(data.timeWindow).to.be.a(Object);
            expect(data.timeWindow).to.be();
            expect(data.triggerCondition).to.be.a('number');
            expect(data.triggerCondition).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("");
            expect(data.watchError).to.be.a('string');
            expect(data.watchError).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsCreate', function() {
        it('should call perchybanaEventNotificationsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaEventNotificationsCreate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.EventNotification();
          data.aggregationField = 0;
          data.aggregationType = "Average";
          data.comparisonField = 0;
          data.createdAt = new Date();
          data.createdByTeam = 0;
          data.description = "";
          data.emailActionCustomRecipients = [""];
          data.enableCwManageActionDefault = false;
          data.enableEmailActionDefaultRecipients = false;
          data.enableEmailActionCustomRecipients = false;
          data.enableFreshdeskActionDefaultTicketType = false;
          data.enableFreshdeskActionCustomTicketType = false;
          data.enableMsftTeamsActionDefaultWebhookUrl = false;
          data.enableMsftTeamsActionCustomWebhookUrl = false;
          data.enableSlackActionDefaultChannel = false;
          data.enableSlackActionCustomChannel = false;
          data.enableSmsActionDefaultRecipients = false;
          data.enableSmsActionCustomRecipients = false;
          data.freshdeskActionCustomTicketType = "";
          data.indexMapping = 0;
          data.isEnabled = false;
          data.fieldsForDisplay = [0];
          data.keywordFilter = "";
          data.lastTriggeredAt = new Date();
          data.marketplaceSourceCollection = new PerchApi.MarketplaceSourceCollection();
          data.mitreAttackTactic = "";
          data.msftTeamsActionCustomWebhookUrl = "";
          data.name = "";
          data.perchAlertEnabled = false;
          data.prevTimeWindow = ;
          data.queryFilter = ;
          data.representationField = 0;
          data.schedule = ;
          data.severity = 0;
          data.slackActionCustomChannel = "";
          data.smsActionCustomRecipients = [""];
          data.spikePercentage = 0;
          data.thresholdCount = 0;
          data.throttlePeriod = 0;
          data.timeField = 0;
          data.timeWindow = ;
          data.triggerCondition = 0;

          instance.perchybanaEventNotificationsCreate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.EventNotification);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.aggregationField).to.be.a('number');
            expect(data.aggregationField).to.be(0);
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("Average");
            expect(data.comparisonField).to.be.a('number');
            expect(data.comparisonField).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdByTeam).to.be.a('number');
            expect(data.createdByTeam).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.emailActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.enableCwManageActionDefault).to.be.a('boolean');
            expect(data.enableCwManageActionDefault).to.be(false);
            expect(data.enableEmailActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableEmailActionDefaultRecipients).to.be(false);
            expect(data.enableEmailActionCustomRecipients).to.be.a('boolean');
            expect(data.enableEmailActionCustomRecipients).to.be(false);
            expect(data.enableFreshdeskActionDefaultTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionDefaultTicketType).to.be(false);
            expect(data.enableFreshdeskActionCustomTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionCustomTicketType).to.be(false);
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be(false);
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be(false);
            expect(data.enableSlackActionDefaultChannel).to.be.a('boolean');
            expect(data.enableSlackActionDefaultChannel).to.be(false);
            expect(data.enableSlackActionCustomChannel).to.be.a('boolean');
            expect(data.enableSlackActionCustomChannel).to.be(false);
            expect(data.enableSmsActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableSmsActionDefaultRecipients).to.be(false);
            expect(data.enableSmsActionCustomRecipients).to.be.a('boolean');
            expect(data.enableSmsActionCustomRecipients).to.be(false);
            expect(data.freshdeskActionCustomTicketType).to.be.a('string');
            expect(data.freshdeskActionCustomTicketType).to.be("");
            expect(data.indexMapping).to.be.a('number');
            expect(data.indexMapping).to.be(0);
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.isLocked).to.be.a('string');
            expect(data.isLocked).to.be("");
            {
              let dataCtr = data.fieldsForDisplay;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            expect(data.keywordFilter).to.be.a('string');
            expect(data.keywordFilter).to.be("");
            expect(data.kibanaQuery).to.be.a('string');
            expect(data.kibanaQuery).to.be("");
            expect(data.lastTriggeredAt).to.be.a(Date);
            expect(data.lastTriggeredAt).to.be(new Date());
            expect(data.marketplaceSourceCollection).to.be.a(PerchApi.MarketplaceSourceCollection);
                  expect(data.marketplaceSourceCollection.id).to.be.a('number');
              expect(data.marketplaceSourceCollection.id).to.be(0);
              expect(data.marketplaceSourceCollection.name).to.be.a('string');
              expect(data.marketplaceSourceCollection.name).to.be("");
              expect(data.marketplaceSourceCollection.visibleFor).to.be.a('string');
              expect(data.marketplaceSourceCollection.visibleFor).to.be("");
            expect(data.mitreAttackTactic).to.be.a('string');
            expect(data.mitreAttackTactic).to.be("");
            expect(data.msearchQuery).to.be.a('string');
            expect(data.msearchQuery).to.be("");
            expect(data.msftTeamsActionCustomWebhookUrl).to.be.a('string');
            expect(data.msftTeamsActionCustomWebhookUrl).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.perchAlertEnabled).to.be.a('boolean');
            expect(data.perchAlertEnabled).to.be(false);
            expect(data.prevTimeWindow).to.be.a(Object);
            expect(data.prevTimeWindow).to.be();
            expect(data.queryFilter).to.be.a(Object);
            expect(data.queryFilter).to.be();
            expect(data.representationField).to.be.a('number');
            expect(data.representationField).to.be(0);
            expect(data.schedule).to.be.a(Object);
            expect(data.schedule).to.be();
            expect(data.severity).to.be.a('number');
            expect(data.severity).to.be(0);
            expect(data.slackActionCustomChannel).to.be.a('string');
            expect(data.slackActionCustomChannel).to.be("");
            {
              let dataCtr = data.smsActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.spikePercentage).to.be.a('number');
            expect(data.spikePercentage).to.be(0);
            expect(data.thresholdCount).to.be.a('number');
            expect(data.thresholdCount).to.be(0);
            expect(data.throttlePeriod).to.be.a('number');
            expect(data.throttlePeriod).to.be(0);
            expect(data.timeField).to.be.a('number');
            expect(data.timeField).to.be(0);
            expect(data.timeWindow).to.be.a(Object);
            expect(data.timeWindow).to.be();
            expect(data.triggerCondition).to.be.a('number');
            expect(data.triggerCondition).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("");
            expect(data.watchError).to.be.a('string');
            expect(data.watchError).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsDeactivate', function() {
        it('should call perchybanaEventNotificationsDeactivate successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaEventNotificationsDeactivate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.EventNotification();
          data.aggregationField = 0;
          data.aggregationType = "Average";
          data.comparisonField = 0;
          data.createdAt = new Date();
          data.createdByTeam = 0;
          data.description = "";
          data.emailActionCustomRecipients = [""];
          data.enableCwManageActionDefault = false;
          data.enableEmailActionDefaultRecipients = false;
          data.enableEmailActionCustomRecipients = false;
          data.enableFreshdeskActionDefaultTicketType = false;
          data.enableFreshdeskActionCustomTicketType = false;
          data.enableMsftTeamsActionDefaultWebhookUrl = false;
          data.enableMsftTeamsActionCustomWebhookUrl = false;
          data.enableSlackActionDefaultChannel = false;
          data.enableSlackActionCustomChannel = false;
          data.enableSmsActionDefaultRecipients = false;
          data.enableSmsActionCustomRecipients = false;
          data.freshdeskActionCustomTicketType = "";
          data.indexMapping = 0;
          data.isEnabled = false;
          data.fieldsForDisplay = [0];
          data.keywordFilter = "";
          data.lastTriggeredAt = new Date();
          data.marketplaceSourceCollection = new PerchApi.MarketplaceSourceCollection();
          data.mitreAttackTactic = "";
          data.msftTeamsActionCustomWebhookUrl = "";
          data.name = "";
          data.perchAlertEnabled = false;
          data.prevTimeWindow = ;
          data.queryFilter = ;
          data.representationField = 0;
          data.schedule = ;
          data.severity = 0;
          data.slackActionCustomChannel = "";
          data.smsActionCustomRecipients = [""];
          data.spikePercentage = 0;
          data.thresholdCount = 0;
          data.throttlePeriod = 0;
          data.timeField = 0;
          data.timeWindow = ;
          data.triggerCondition = 0;

          instance.perchybanaEventNotificationsDeactivate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.EventNotification);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.aggregationField).to.be.a('number');
            expect(data.aggregationField).to.be(0);
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("Average");
            expect(data.comparisonField).to.be.a('number');
            expect(data.comparisonField).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdByTeam).to.be.a('number');
            expect(data.createdByTeam).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.emailActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.enableCwManageActionDefault).to.be.a('boolean');
            expect(data.enableCwManageActionDefault).to.be(false);
            expect(data.enableEmailActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableEmailActionDefaultRecipients).to.be(false);
            expect(data.enableEmailActionCustomRecipients).to.be.a('boolean');
            expect(data.enableEmailActionCustomRecipients).to.be(false);
            expect(data.enableFreshdeskActionDefaultTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionDefaultTicketType).to.be(false);
            expect(data.enableFreshdeskActionCustomTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionCustomTicketType).to.be(false);
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be(false);
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be(false);
            expect(data.enableSlackActionDefaultChannel).to.be.a('boolean');
            expect(data.enableSlackActionDefaultChannel).to.be(false);
            expect(data.enableSlackActionCustomChannel).to.be.a('boolean');
            expect(data.enableSlackActionCustomChannel).to.be(false);
            expect(data.enableSmsActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableSmsActionDefaultRecipients).to.be(false);
            expect(data.enableSmsActionCustomRecipients).to.be.a('boolean');
            expect(data.enableSmsActionCustomRecipients).to.be(false);
            expect(data.freshdeskActionCustomTicketType).to.be.a('string');
            expect(data.freshdeskActionCustomTicketType).to.be("");
            expect(data.indexMapping).to.be.a('number');
            expect(data.indexMapping).to.be(0);
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.isLocked).to.be.a('string');
            expect(data.isLocked).to.be("");
            {
              let dataCtr = data.fieldsForDisplay;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            expect(data.keywordFilter).to.be.a('string');
            expect(data.keywordFilter).to.be("");
            expect(data.kibanaQuery).to.be.a('string');
            expect(data.kibanaQuery).to.be("");
            expect(data.lastTriggeredAt).to.be.a(Date);
            expect(data.lastTriggeredAt).to.be(new Date());
            expect(data.marketplaceSourceCollection).to.be.a(PerchApi.MarketplaceSourceCollection);
                  expect(data.marketplaceSourceCollection.id).to.be.a('number');
              expect(data.marketplaceSourceCollection.id).to.be(0);
              expect(data.marketplaceSourceCollection.name).to.be.a('string');
              expect(data.marketplaceSourceCollection.name).to.be("");
              expect(data.marketplaceSourceCollection.visibleFor).to.be.a('string');
              expect(data.marketplaceSourceCollection.visibleFor).to.be("");
            expect(data.mitreAttackTactic).to.be.a('string');
            expect(data.mitreAttackTactic).to.be("");
            expect(data.msearchQuery).to.be.a('string');
            expect(data.msearchQuery).to.be("");
            expect(data.msftTeamsActionCustomWebhookUrl).to.be.a('string');
            expect(data.msftTeamsActionCustomWebhookUrl).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.perchAlertEnabled).to.be.a('boolean');
            expect(data.perchAlertEnabled).to.be(false);
            expect(data.prevTimeWindow).to.be.a(Object);
            expect(data.prevTimeWindow).to.be();
            expect(data.queryFilter).to.be.a(Object);
            expect(data.queryFilter).to.be();
            expect(data.representationField).to.be.a('number');
            expect(data.representationField).to.be(0);
            expect(data.schedule).to.be.a(Object);
            expect(data.schedule).to.be();
            expect(data.severity).to.be.a('number');
            expect(data.severity).to.be(0);
            expect(data.slackActionCustomChannel).to.be.a('string');
            expect(data.slackActionCustomChannel).to.be("");
            {
              let dataCtr = data.smsActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.spikePercentage).to.be.a('number');
            expect(data.spikePercentage).to.be(0);
            expect(data.thresholdCount).to.be.a('number');
            expect(data.thresholdCount).to.be(0);
            expect(data.throttlePeriod).to.be.a('number');
            expect(data.throttlePeriod).to.be(0);
            expect(data.timeField).to.be.a('number');
            expect(data.timeField).to.be(0);
            expect(data.timeWindow).to.be.a(Object);
            expect(data.timeWindow).to.be();
            expect(data.triggerCondition).to.be.a('number');
            expect(data.triggerCondition).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("");
            expect(data.watchError).to.be.a('string');
            expect(data.watchError).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsDelete', function() {
        it('should call perchybanaEventNotificationsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaEventNotificationsDelete call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.perchybanaEventNotificationsDelete(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsExecuteNow', function() {
        it('should call perchybanaEventNotificationsExecuteNow successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaEventNotificationsExecuteNow call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.EventNotification();
          data.aggregationField = 0;
          data.aggregationType = "Average";
          data.comparisonField = 0;
          data.createdAt = new Date();
          data.createdByTeam = 0;
          data.description = "";
          data.emailActionCustomRecipients = [""];
          data.enableCwManageActionDefault = false;
          data.enableEmailActionDefaultRecipients = false;
          data.enableEmailActionCustomRecipients = false;
          data.enableFreshdeskActionDefaultTicketType = false;
          data.enableFreshdeskActionCustomTicketType = false;
          data.enableMsftTeamsActionDefaultWebhookUrl = false;
          data.enableMsftTeamsActionCustomWebhookUrl = false;
          data.enableSlackActionDefaultChannel = false;
          data.enableSlackActionCustomChannel = false;
          data.enableSmsActionDefaultRecipients = false;
          data.enableSmsActionCustomRecipients = false;
          data.freshdeskActionCustomTicketType = "";
          data.indexMapping = 0;
          data.isEnabled = false;
          data.fieldsForDisplay = [0];
          data.keywordFilter = "";
          data.lastTriggeredAt = new Date();
          data.marketplaceSourceCollection = new PerchApi.MarketplaceSourceCollection();
          data.mitreAttackTactic = "";
          data.msftTeamsActionCustomWebhookUrl = "";
          data.name = "";
          data.perchAlertEnabled = false;
          data.prevTimeWindow = ;
          data.queryFilter = ;
          data.representationField = 0;
          data.schedule = ;
          data.severity = 0;
          data.slackActionCustomChannel = "";
          data.smsActionCustomRecipients = [""];
          data.spikePercentage = 0;
          data.thresholdCount = 0;
          data.throttlePeriod = 0;
          data.timeField = 0;
          data.timeWindow = ;
          data.triggerCondition = 0;

          instance.perchybanaEventNotificationsExecuteNow(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.EventNotification);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.aggregationField).to.be.a('number');
            expect(data.aggregationField).to.be(0);
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("Average");
            expect(data.comparisonField).to.be.a('number');
            expect(data.comparisonField).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdByTeam).to.be.a('number');
            expect(data.createdByTeam).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.emailActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.enableCwManageActionDefault).to.be.a('boolean');
            expect(data.enableCwManageActionDefault).to.be(false);
            expect(data.enableEmailActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableEmailActionDefaultRecipients).to.be(false);
            expect(data.enableEmailActionCustomRecipients).to.be.a('boolean');
            expect(data.enableEmailActionCustomRecipients).to.be(false);
            expect(data.enableFreshdeskActionDefaultTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionDefaultTicketType).to.be(false);
            expect(data.enableFreshdeskActionCustomTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionCustomTicketType).to.be(false);
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be(false);
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be(false);
            expect(data.enableSlackActionDefaultChannel).to.be.a('boolean');
            expect(data.enableSlackActionDefaultChannel).to.be(false);
            expect(data.enableSlackActionCustomChannel).to.be.a('boolean');
            expect(data.enableSlackActionCustomChannel).to.be(false);
            expect(data.enableSmsActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableSmsActionDefaultRecipients).to.be(false);
            expect(data.enableSmsActionCustomRecipients).to.be.a('boolean');
            expect(data.enableSmsActionCustomRecipients).to.be(false);
            expect(data.freshdeskActionCustomTicketType).to.be.a('string');
            expect(data.freshdeskActionCustomTicketType).to.be("");
            expect(data.indexMapping).to.be.a('number');
            expect(data.indexMapping).to.be(0);
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.isLocked).to.be.a('string');
            expect(data.isLocked).to.be("");
            {
              let dataCtr = data.fieldsForDisplay;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            expect(data.keywordFilter).to.be.a('string');
            expect(data.keywordFilter).to.be("");
            expect(data.kibanaQuery).to.be.a('string');
            expect(data.kibanaQuery).to.be("");
            expect(data.lastTriggeredAt).to.be.a(Date);
            expect(data.lastTriggeredAt).to.be(new Date());
            expect(data.marketplaceSourceCollection).to.be.a(PerchApi.MarketplaceSourceCollection);
                  expect(data.marketplaceSourceCollection.id).to.be.a('number');
              expect(data.marketplaceSourceCollection.id).to.be(0);
              expect(data.marketplaceSourceCollection.name).to.be.a('string');
              expect(data.marketplaceSourceCollection.name).to.be("");
              expect(data.marketplaceSourceCollection.visibleFor).to.be.a('string');
              expect(data.marketplaceSourceCollection.visibleFor).to.be("");
            expect(data.mitreAttackTactic).to.be.a('string');
            expect(data.mitreAttackTactic).to.be("");
            expect(data.msearchQuery).to.be.a('string');
            expect(data.msearchQuery).to.be("");
            expect(data.msftTeamsActionCustomWebhookUrl).to.be.a('string');
            expect(data.msftTeamsActionCustomWebhookUrl).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.perchAlertEnabled).to.be.a('boolean');
            expect(data.perchAlertEnabled).to.be(false);
            expect(data.prevTimeWindow).to.be.a(Object);
            expect(data.prevTimeWindow).to.be();
            expect(data.queryFilter).to.be.a(Object);
            expect(data.queryFilter).to.be();
            expect(data.representationField).to.be.a('number');
            expect(data.representationField).to.be(0);
            expect(data.schedule).to.be.a(Object);
            expect(data.schedule).to.be();
            expect(data.severity).to.be.a('number');
            expect(data.severity).to.be(0);
            expect(data.slackActionCustomChannel).to.be.a('string');
            expect(data.slackActionCustomChannel).to.be("");
            {
              let dataCtr = data.smsActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.spikePercentage).to.be.a('number');
            expect(data.spikePercentage).to.be(0);
            expect(data.thresholdCount).to.be.a('number');
            expect(data.thresholdCount).to.be(0);
            expect(data.throttlePeriod).to.be.a('number');
            expect(data.throttlePeriod).to.be(0);
            expect(data.timeField).to.be.a('number');
            expect(data.timeField).to.be(0);
            expect(data.timeWindow).to.be.a(Object);
            expect(data.timeWindow).to.be();
            expect(data.triggerCondition).to.be.a('number');
            expect(data.triggerCondition).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("");
            expect(data.watchError).to.be.a('string');
            expect(data.watchError).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsGetDefaultActions', function() {
        it('should call perchybanaEventNotificationsGetDefaultActions successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaEventNotificationsGetDefaultActions call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.aggregationType = "aggregationType_example";
          opts.createdAt = "createdAt_example";
          opts.createdAtGte = "createdAtGte_example";
          opts.createdAtLte = "createdAtLte_example";
          opts.createdBy = "createdBy_example";
          opts.enableCwManageActionDefault = "enableCwManageActionDefault_example";
          opts.enableEmailActionDefaultRecipients = "enableEmailActionDefaultRecipients_example";
          opts.enableEmailActionCustomRecipients = "enableEmailActionCustomRecipients_example";
          opts.enableFreshdeskActionDefaultTicketType = "enableFreshdeskActionDefaultTicketType_example";
          opts.enableFreshdeskActionCustomTicketType = "enableFreshdeskActionCustomTicketType_example";
          opts.enableMsftTeamsActionDefaultWebhookUrl = "enableMsftTeamsActionDefaultWebhookUrl_example";
          opts.enableMsftTeamsActionCustomWebhookUrl = "enableMsftTeamsActionCustomWebhookUrl_example";
          opts.enableSlackActionDefaultChannel = "enableSlackActionDefaultChannel_example";
          opts.enableSlackActionCustomChannel = "enableSlackActionCustomChannel_example";
          opts.enableSmsActionDefaultRecipients = "enableSmsActionDefaultRecipients_example";
          opts.enableSmsActionCustomRecipients = "enableSmsActionCustomRecipients_example";
          opts.indexMapping = "indexMapping_example";
          opts.isEnabled = "isEnabled_example";
          opts.name = "name_example";
          opts.perchAlertEnabled = "perchAlertEnabled_example";
          opts.severity = "severity_example";
          opts.triggerCondition = "triggerCondition_example";
          opts.updatedAt = "updatedAt_example";
          opts.updatedAtGte = "updatedAtGte_example";
          opts.updatedAtLte = "updatedAtLte_example";
          opts.updatedBy = "updatedBy_example";
          opts.ordering = "ordering_example";
          opts.search = "search_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.perchybanaEventNotificationsGetDefaultActions(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse2007);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.EventNotification);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.aggregationField).to.be.a('number');
                expect(data.aggregationField).to.be(0);
                expect(data.aggregationType).to.be.a('string');
                expect(data.aggregationType).to.be("Average");
                expect(data.comparisonField).to.be.a('number');
                expect(data.comparisonField).to.be(0);
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(new Date());
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdByTeam).to.be.a('number');
                expect(data.createdByTeam).to.be(0);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.emailActionCustomRecipients;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.enableCwManageActionDefault).to.be.a('boolean');
                expect(data.enableCwManageActionDefault).to.be(false);
                expect(data.enableEmailActionDefaultRecipients).to.be.a('boolean');
                expect(data.enableEmailActionDefaultRecipients).to.be(false);
                expect(data.enableEmailActionCustomRecipients).to.be.a('boolean');
                expect(data.enableEmailActionCustomRecipients).to.be(false);
                expect(data.enableFreshdeskActionDefaultTicketType).to.be.a('boolean');
                expect(data.enableFreshdeskActionDefaultTicketType).to.be(false);
                expect(data.enableFreshdeskActionCustomTicketType).to.be.a('boolean');
                expect(data.enableFreshdeskActionCustomTicketType).to.be(false);
                expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be.a('boolean');
                expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be(false);
                expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be.a('boolean');
                expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be(false);
                expect(data.enableSlackActionDefaultChannel).to.be.a('boolean');
                expect(data.enableSlackActionDefaultChannel).to.be(false);
                expect(data.enableSlackActionCustomChannel).to.be.a('boolean');
                expect(data.enableSlackActionCustomChannel).to.be(false);
                expect(data.enableSmsActionDefaultRecipients).to.be.a('boolean');
                expect(data.enableSmsActionDefaultRecipients).to.be(false);
                expect(data.enableSmsActionCustomRecipients).to.be.a('boolean');
                expect(data.enableSmsActionCustomRecipients).to.be(false);
                expect(data.freshdeskActionCustomTicketType).to.be.a('string');
                expect(data.freshdeskActionCustomTicketType).to.be("");
                expect(data.indexMapping).to.be.a('number');
                expect(data.indexMapping).to.be(0);
                expect(data.isEnabled).to.be.a('boolean');
                expect(data.isEnabled).to.be(false);
                expect(data.isLocked).to.be.a('string');
                expect(data.isLocked).to.be("");
                {
                  let dataCtr = data.fieldsForDisplay;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }
                expect(data.keywordFilter).to.be.a('string');
                expect(data.keywordFilter).to.be("");
                expect(data.kibanaQuery).to.be.a('string');
                expect(data.kibanaQuery).to.be("");
                expect(data.lastTriggeredAt).to.be.a(Date);
                expect(data.lastTriggeredAt).to.be(new Date());
                expect(data.marketplaceSourceCollection).to.be.a(PerchApi.MarketplaceSourceCollection);
                      expect(data.marketplaceSourceCollection.id).to.be.a('number');
                  expect(data.marketplaceSourceCollection.id).to.be(0);
                  expect(data.marketplaceSourceCollection.name).to.be.a('string');
                  expect(data.marketplaceSourceCollection.name).to.be("");
                  expect(data.marketplaceSourceCollection.visibleFor).to.be.a('string');
                  expect(data.marketplaceSourceCollection.visibleFor).to.be("");
                expect(data.mitreAttackTactic).to.be.a('string');
                expect(data.mitreAttackTactic).to.be("");
                expect(data.msearchQuery).to.be.a('string');
                expect(data.msearchQuery).to.be("");
                expect(data.msftTeamsActionCustomWebhookUrl).to.be.a('string');
                expect(data.msftTeamsActionCustomWebhookUrl).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.perchAlertEnabled).to.be.a('boolean');
                expect(data.perchAlertEnabled).to.be(false);
                expect(data.prevTimeWindow).to.be.a(Object);
                expect(data.prevTimeWindow).to.be();
                expect(data.queryFilter).to.be.a(Object);
                expect(data.queryFilter).to.be();
                expect(data.representationField).to.be.a('number');
                expect(data.representationField).to.be(0);
                expect(data.schedule).to.be.a(Object);
                expect(data.schedule).to.be();
                expect(data.severity).to.be.a('number');
                expect(data.severity).to.be(0);
                expect(data.slackActionCustomChannel).to.be.a('string');
                expect(data.slackActionCustomChannel).to.be("");
                {
                  let dataCtr = data.smsActionCustomRecipients;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.spikePercentage).to.be.a('number');
                expect(data.spikePercentage).to.be(0);
                expect(data.thresholdCount).to.be.a('number');
                expect(data.thresholdCount).to.be(0);
                expect(data.throttlePeriod).to.be.a('number');
                expect(data.throttlePeriod).to.be(0);
                expect(data.timeField).to.be.a('number');
                expect(data.timeField).to.be(0);
                expect(data.timeWindow).to.be.a(Object);
                expect(data.timeWindow).to.be();
                expect(data.triggerCondition).to.be.a('number');
                expect(data.triggerCondition).to.be(0);
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(new Date());
                expect(data.updatedBy).to.be.a('string');
                expect(data.updatedBy).to.be("");
                expect(data.watchError).to.be.a('string');
                expect(data.watchError).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsList', function() {
        it('should call perchybanaEventNotificationsList successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaEventNotificationsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.aggregationType = "aggregationType_example";
          opts.createdAt = "createdAt_example";
          opts.createdAtGte = "createdAtGte_example";
          opts.createdAtLte = "createdAtLte_example";
          opts.createdBy = "createdBy_example";
          opts.enableCwManageActionDefault = "enableCwManageActionDefault_example";
          opts.enableEmailActionDefaultRecipients = "enableEmailActionDefaultRecipients_example";
          opts.enableEmailActionCustomRecipients = "enableEmailActionCustomRecipients_example";
          opts.enableFreshdeskActionDefaultTicketType = "enableFreshdeskActionDefaultTicketType_example";
          opts.enableFreshdeskActionCustomTicketType = "enableFreshdeskActionCustomTicketType_example";
          opts.enableMsftTeamsActionDefaultWebhookUrl = "enableMsftTeamsActionDefaultWebhookUrl_example";
          opts.enableMsftTeamsActionCustomWebhookUrl = "enableMsftTeamsActionCustomWebhookUrl_example";
          opts.enableSlackActionDefaultChannel = "enableSlackActionDefaultChannel_example";
          opts.enableSlackActionCustomChannel = "enableSlackActionCustomChannel_example";
          opts.enableSmsActionDefaultRecipients = "enableSmsActionDefaultRecipients_example";
          opts.enableSmsActionCustomRecipients = "enableSmsActionCustomRecipients_example";
          opts.indexMapping = "indexMapping_example";
          opts.isEnabled = "isEnabled_example";
          opts.name = "name_example";
          opts.perchAlertEnabled = "perchAlertEnabled_example";
          opts.severity = "severity_example";
          opts.triggerCondition = "triggerCondition_example";
          opts.updatedAt = "updatedAt_example";
          opts.updatedAtGte = "updatedAtGte_example";
          opts.updatedAtLte = "updatedAtLte_example";
          opts.updatedBy = "updatedBy_example";
          opts.ordering = "ordering_example";
          opts.search = "search_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.perchybanaEventNotificationsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse2007);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.EventNotification);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.aggregationField).to.be.a('number');
                expect(data.aggregationField).to.be(0);
                expect(data.aggregationType).to.be.a('string');
                expect(data.aggregationType).to.be("Average");
                expect(data.comparisonField).to.be.a('number');
                expect(data.comparisonField).to.be(0);
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(new Date());
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdByTeam).to.be.a('number');
                expect(data.createdByTeam).to.be(0);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.emailActionCustomRecipients;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.enableCwManageActionDefault).to.be.a('boolean');
                expect(data.enableCwManageActionDefault).to.be(false);
                expect(data.enableEmailActionDefaultRecipients).to.be.a('boolean');
                expect(data.enableEmailActionDefaultRecipients).to.be(false);
                expect(data.enableEmailActionCustomRecipients).to.be.a('boolean');
                expect(data.enableEmailActionCustomRecipients).to.be(false);
                expect(data.enableFreshdeskActionDefaultTicketType).to.be.a('boolean');
                expect(data.enableFreshdeskActionDefaultTicketType).to.be(false);
                expect(data.enableFreshdeskActionCustomTicketType).to.be.a('boolean');
                expect(data.enableFreshdeskActionCustomTicketType).to.be(false);
                expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be.a('boolean');
                expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be(false);
                expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be.a('boolean');
                expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be(false);
                expect(data.enableSlackActionDefaultChannel).to.be.a('boolean');
                expect(data.enableSlackActionDefaultChannel).to.be(false);
                expect(data.enableSlackActionCustomChannel).to.be.a('boolean');
                expect(data.enableSlackActionCustomChannel).to.be(false);
                expect(data.enableSmsActionDefaultRecipients).to.be.a('boolean');
                expect(data.enableSmsActionDefaultRecipients).to.be(false);
                expect(data.enableSmsActionCustomRecipients).to.be.a('boolean');
                expect(data.enableSmsActionCustomRecipients).to.be(false);
                expect(data.freshdeskActionCustomTicketType).to.be.a('string');
                expect(data.freshdeskActionCustomTicketType).to.be("");
                expect(data.indexMapping).to.be.a('number');
                expect(data.indexMapping).to.be(0);
                expect(data.isEnabled).to.be.a('boolean');
                expect(data.isEnabled).to.be(false);
                expect(data.isLocked).to.be.a('string');
                expect(data.isLocked).to.be("");
                {
                  let dataCtr = data.fieldsForDisplay;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }
                expect(data.keywordFilter).to.be.a('string');
                expect(data.keywordFilter).to.be("");
                expect(data.kibanaQuery).to.be.a('string');
                expect(data.kibanaQuery).to.be("");
                expect(data.lastTriggeredAt).to.be.a(Date);
                expect(data.lastTriggeredAt).to.be(new Date());
                expect(data.marketplaceSourceCollection).to.be.a(PerchApi.MarketplaceSourceCollection);
                      expect(data.marketplaceSourceCollection.id).to.be.a('number');
                  expect(data.marketplaceSourceCollection.id).to.be(0);
                  expect(data.marketplaceSourceCollection.name).to.be.a('string');
                  expect(data.marketplaceSourceCollection.name).to.be("");
                  expect(data.marketplaceSourceCollection.visibleFor).to.be.a('string');
                  expect(data.marketplaceSourceCollection.visibleFor).to.be("");
                expect(data.mitreAttackTactic).to.be.a('string');
                expect(data.mitreAttackTactic).to.be("");
                expect(data.msearchQuery).to.be.a('string');
                expect(data.msearchQuery).to.be("");
                expect(data.msftTeamsActionCustomWebhookUrl).to.be.a('string');
                expect(data.msftTeamsActionCustomWebhookUrl).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.perchAlertEnabled).to.be.a('boolean');
                expect(data.perchAlertEnabled).to.be(false);
                expect(data.prevTimeWindow).to.be.a(Object);
                expect(data.prevTimeWindow).to.be();
                expect(data.queryFilter).to.be.a(Object);
                expect(data.queryFilter).to.be();
                expect(data.representationField).to.be.a('number');
                expect(data.representationField).to.be(0);
                expect(data.schedule).to.be.a(Object);
                expect(data.schedule).to.be();
                expect(data.severity).to.be.a('number');
                expect(data.severity).to.be(0);
                expect(data.slackActionCustomChannel).to.be.a('string');
                expect(data.slackActionCustomChannel).to.be("");
                {
                  let dataCtr = data.smsActionCustomRecipients;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.spikePercentage).to.be.a('number');
                expect(data.spikePercentage).to.be(0);
                expect(data.thresholdCount).to.be.a('number');
                expect(data.thresholdCount).to.be(0);
                expect(data.throttlePeriod).to.be.a('number');
                expect(data.throttlePeriod).to.be(0);
                expect(data.timeField).to.be.a('number');
                expect(data.timeField).to.be(0);
                expect(data.timeWindow).to.be.a(Object);
                expect(data.timeWindow).to.be();
                expect(data.triggerCondition).to.be.a('number');
                expect(data.triggerCondition).to.be(0);
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(new Date());
                expect(data.updatedBy).to.be.a('string');
                expect(data.updatedBy).to.be("");
                expect(data.watchError).to.be.a('string');
                expect(data.watchError).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsNewTriggerEventCreate', function() {
        it('should call perchybanaEventNotificationsNewTriggerEventCreate successfully', function(done) {
          // TODO: uncomment perchybanaEventNotificationsNewTriggerEventCreate call
          /*

          instance.perchybanaEventNotificationsNewTriggerEventCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsPartialUpdate', function() {
        it('should call perchybanaEventNotificationsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaEventNotificationsPartialUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.EventNotification();
          data.aggregationField = 0;
          data.aggregationType = "Average";
          data.comparisonField = 0;
          data.createdAt = new Date();
          data.createdByTeam = 0;
          data.description = "";
          data.emailActionCustomRecipients = [""];
          data.enableCwManageActionDefault = false;
          data.enableEmailActionDefaultRecipients = false;
          data.enableEmailActionCustomRecipients = false;
          data.enableFreshdeskActionDefaultTicketType = false;
          data.enableFreshdeskActionCustomTicketType = false;
          data.enableMsftTeamsActionDefaultWebhookUrl = false;
          data.enableMsftTeamsActionCustomWebhookUrl = false;
          data.enableSlackActionDefaultChannel = false;
          data.enableSlackActionCustomChannel = false;
          data.enableSmsActionDefaultRecipients = false;
          data.enableSmsActionCustomRecipients = false;
          data.freshdeskActionCustomTicketType = "";
          data.indexMapping = 0;
          data.isEnabled = false;
          data.fieldsForDisplay = [0];
          data.keywordFilter = "";
          data.lastTriggeredAt = new Date();
          data.marketplaceSourceCollection = new PerchApi.MarketplaceSourceCollection();
          data.mitreAttackTactic = "";
          data.msftTeamsActionCustomWebhookUrl = "";
          data.name = "";
          data.perchAlertEnabled = false;
          data.prevTimeWindow = ;
          data.queryFilter = ;
          data.representationField = 0;
          data.schedule = ;
          data.severity = 0;
          data.slackActionCustomChannel = "";
          data.smsActionCustomRecipients = [""];
          data.spikePercentage = 0;
          data.thresholdCount = 0;
          data.throttlePeriod = 0;
          data.timeField = 0;
          data.timeWindow = ;
          data.triggerCondition = 0;

          instance.perchybanaEventNotificationsPartialUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.EventNotification);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.aggregationField).to.be.a('number');
            expect(data.aggregationField).to.be(0);
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("Average");
            expect(data.comparisonField).to.be.a('number');
            expect(data.comparisonField).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdByTeam).to.be.a('number');
            expect(data.createdByTeam).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.emailActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.enableCwManageActionDefault).to.be.a('boolean');
            expect(data.enableCwManageActionDefault).to.be(false);
            expect(data.enableEmailActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableEmailActionDefaultRecipients).to.be(false);
            expect(data.enableEmailActionCustomRecipients).to.be.a('boolean');
            expect(data.enableEmailActionCustomRecipients).to.be(false);
            expect(data.enableFreshdeskActionDefaultTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionDefaultTicketType).to.be(false);
            expect(data.enableFreshdeskActionCustomTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionCustomTicketType).to.be(false);
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be(false);
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be(false);
            expect(data.enableSlackActionDefaultChannel).to.be.a('boolean');
            expect(data.enableSlackActionDefaultChannel).to.be(false);
            expect(data.enableSlackActionCustomChannel).to.be.a('boolean');
            expect(data.enableSlackActionCustomChannel).to.be(false);
            expect(data.enableSmsActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableSmsActionDefaultRecipients).to.be(false);
            expect(data.enableSmsActionCustomRecipients).to.be.a('boolean');
            expect(data.enableSmsActionCustomRecipients).to.be(false);
            expect(data.freshdeskActionCustomTicketType).to.be.a('string');
            expect(data.freshdeskActionCustomTicketType).to.be("");
            expect(data.indexMapping).to.be.a('number');
            expect(data.indexMapping).to.be(0);
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.isLocked).to.be.a('string');
            expect(data.isLocked).to.be("");
            {
              let dataCtr = data.fieldsForDisplay;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            expect(data.keywordFilter).to.be.a('string');
            expect(data.keywordFilter).to.be("");
            expect(data.kibanaQuery).to.be.a('string');
            expect(data.kibanaQuery).to.be("");
            expect(data.lastTriggeredAt).to.be.a(Date);
            expect(data.lastTriggeredAt).to.be(new Date());
            expect(data.marketplaceSourceCollection).to.be.a(PerchApi.MarketplaceSourceCollection);
                  expect(data.marketplaceSourceCollection.id).to.be.a('number');
              expect(data.marketplaceSourceCollection.id).to.be(0);
              expect(data.marketplaceSourceCollection.name).to.be.a('string');
              expect(data.marketplaceSourceCollection.name).to.be("");
              expect(data.marketplaceSourceCollection.visibleFor).to.be.a('string');
              expect(data.marketplaceSourceCollection.visibleFor).to.be("");
            expect(data.mitreAttackTactic).to.be.a('string');
            expect(data.mitreAttackTactic).to.be("");
            expect(data.msearchQuery).to.be.a('string');
            expect(data.msearchQuery).to.be("");
            expect(data.msftTeamsActionCustomWebhookUrl).to.be.a('string');
            expect(data.msftTeamsActionCustomWebhookUrl).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.perchAlertEnabled).to.be.a('boolean');
            expect(data.perchAlertEnabled).to.be(false);
            expect(data.prevTimeWindow).to.be.a(Object);
            expect(data.prevTimeWindow).to.be();
            expect(data.queryFilter).to.be.a(Object);
            expect(data.queryFilter).to.be();
            expect(data.representationField).to.be.a('number');
            expect(data.representationField).to.be(0);
            expect(data.schedule).to.be.a(Object);
            expect(data.schedule).to.be();
            expect(data.severity).to.be.a('number');
            expect(data.severity).to.be(0);
            expect(data.slackActionCustomChannel).to.be.a('string');
            expect(data.slackActionCustomChannel).to.be("");
            {
              let dataCtr = data.smsActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.spikePercentage).to.be.a('number');
            expect(data.spikePercentage).to.be(0);
            expect(data.thresholdCount).to.be.a('number');
            expect(data.thresholdCount).to.be(0);
            expect(data.throttlePeriod).to.be.a('number');
            expect(data.throttlePeriod).to.be(0);
            expect(data.timeField).to.be.a('number');
            expect(data.timeField).to.be(0);
            expect(data.timeWindow).to.be.a(Object);
            expect(data.timeWindow).to.be();
            expect(data.triggerCondition).to.be.a('number');
            expect(data.triggerCondition).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("");
            expect(data.watchError).to.be.a('string');
            expect(data.watchError).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsRead', function() {
        it('should call perchybanaEventNotificationsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaEventNotificationsRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.perchybanaEventNotificationsRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.EventNotification);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.aggregationField).to.be.a('number');
            expect(data.aggregationField).to.be(0);
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("Average");
            expect(data.comparisonField).to.be.a('number');
            expect(data.comparisonField).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdByTeam).to.be.a('number');
            expect(data.createdByTeam).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.emailActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.enableCwManageActionDefault).to.be.a('boolean');
            expect(data.enableCwManageActionDefault).to.be(false);
            expect(data.enableEmailActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableEmailActionDefaultRecipients).to.be(false);
            expect(data.enableEmailActionCustomRecipients).to.be.a('boolean');
            expect(data.enableEmailActionCustomRecipients).to.be(false);
            expect(data.enableFreshdeskActionDefaultTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionDefaultTicketType).to.be(false);
            expect(data.enableFreshdeskActionCustomTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionCustomTicketType).to.be(false);
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be(false);
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be(false);
            expect(data.enableSlackActionDefaultChannel).to.be.a('boolean');
            expect(data.enableSlackActionDefaultChannel).to.be(false);
            expect(data.enableSlackActionCustomChannel).to.be.a('boolean');
            expect(data.enableSlackActionCustomChannel).to.be(false);
            expect(data.enableSmsActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableSmsActionDefaultRecipients).to.be(false);
            expect(data.enableSmsActionCustomRecipients).to.be.a('boolean');
            expect(data.enableSmsActionCustomRecipients).to.be(false);
            expect(data.freshdeskActionCustomTicketType).to.be.a('string');
            expect(data.freshdeskActionCustomTicketType).to.be("");
            expect(data.indexMapping).to.be.a('number');
            expect(data.indexMapping).to.be(0);
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.isLocked).to.be.a('string');
            expect(data.isLocked).to.be("");
            {
              let dataCtr = data.fieldsForDisplay;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            expect(data.keywordFilter).to.be.a('string');
            expect(data.keywordFilter).to.be("");
            expect(data.kibanaQuery).to.be.a('string');
            expect(data.kibanaQuery).to.be("");
            expect(data.lastTriggeredAt).to.be.a(Date);
            expect(data.lastTriggeredAt).to.be(new Date());
            expect(data.marketplaceSourceCollection).to.be.a(PerchApi.MarketplaceSourceCollection);
                  expect(data.marketplaceSourceCollection.id).to.be.a('number');
              expect(data.marketplaceSourceCollection.id).to.be(0);
              expect(data.marketplaceSourceCollection.name).to.be.a('string');
              expect(data.marketplaceSourceCollection.name).to.be("");
              expect(data.marketplaceSourceCollection.visibleFor).to.be.a('string');
              expect(data.marketplaceSourceCollection.visibleFor).to.be("");
            expect(data.mitreAttackTactic).to.be.a('string');
            expect(data.mitreAttackTactic).to.be("");
            expect(data.msearchQuery).to.be.a('string');
            expect(data.msearchQuery).to.be("");
            expect(data.msftTeamsActionCustomWebhookUrl).to.be.a('string');
            expect(data.msftTeamsActionCustomWebhookUrl).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.perchAlertEnabled).to.be.a('boolean');
            expect(data.perchAlertEnabled).to.be(false);
            expect(data.prevTimeWindow).to.be.a(Object);
            expect(data.prevTimeWindow).to.be();
            expect(data.queryFilter).to.be.a(Object);
            expect(data.queryFilter).to.be();
            expect(data.representationField).to.be.a('number');
            expect(data.representationField).to.be(0);
            expect(data.schedule).to.be.a(Object);
            expect(data.schedule).to.be();
            expect(data.severity).to.be.a('number');
            expect(data.severity).to.be(0);
            expect(data.slackActionCustomChannel).to.be.a('string');
            expect(data.slackActionCustomChannel).to.be("");
            {
              let dataCtr = data.smsActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.spikePercentage).to.be.a('number');
            expect(data.spikePercentage).to.be(0);
            expect(data.thresholdCount).to.be.a('number');
            expect(data.thresholdCount).to.be(0);
            expect(data.throttlePeriod).to.be.a('number');
            expect(data.throttlePeriod).to.be(0);
            expect(data.timeField).to.be.a('number');
            expect(data.timeField).to.be(0);
            expect(data.timeWindow).to.be.a(Object);
            expect(data.timeWindow).to.be();
            expect(data.triggerCondition).to.be.a('number');
            expect(data.triggerCondition).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("");
            expect(data.watchError).to.be.a('string');
            expect(data.watchError).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsTestQuery', function() {
        it('should call perchybanaEventNotificationsTestQuery successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaEventNotificationsTestQuery call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.perchybanaEventNotificationsTestQuery(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.EventNotification);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.aggregationField).to.be.a('number');
            expect(data.aggregationField).to.be(0);
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("Average");
            expect(data.comparisonField).to.be.a('number');
            expect(data.comparisonField).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdByTeam).to.be.a('number');
            expect(data.createdByTeam).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.emailActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.enableCwManageActionDefault).to.be.a('boolean');
            expect(data.enableCwManageActionDefault).to.be(false);
            expect(data.enableEmailActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableEmailActionDefaultRecipients).to.be(false);
            expect(data.enableEmailActionCustomRecipients).to.be.a('boolean');
            expect(data.enableEmailActionCustomRecipients).to.be(false);
            expect(data.enableFreshdeskActionDefaultTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionDefaultTicketType).to.be(false);
            expect(data.enableFreshdeskActionCustomTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionCustomTicketType).to.be(false);
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be(false);
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be(false);
            expect(data.enableSlackActionDefaultChannel).to.be.a('boolean');
            expect(data.enableSlackActionDefaultChannel).to.be(false);
            expect(data.enableSlackActionCustomChannel).to.be.a('boolean');
            expect(data.enableSlackActionCustomChannel).to.be(false);
            expect(data.enableSmsActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableSmsActionDefaultRecipients).to.be(false);
            expect(data.enableSmsActionCustomRecipients).to.be.a('boolean');
            expect(data.enableSmsActionCustomRecipients).to.be(false);
            expect(data.freshdeskActionCustomTicketType).to.be.a('string');
            expect(data.freshdeskActionCustomTicketType).to.be("");
            expect(data.indexMapping).to.be.a('number');
            expect(data.indexMapping).to.be(0);
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.isLocked).to.be.a('string');
            expect(data.isLocked).to.be("");
            {
              let dataCtr = data.fieldsForDisplay;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            expect(data.keywordFilter).to.be.a('string');
            expect(data.keywordFilter).to.be("");
            expect(data.kibanaQuery).to.be.a('string');
            expect(data.kibanaQuery).to.be("");
            expect(data.lastTriggeredAt).to.be.a(Date);
            expect(data.lastTriggeredAt).to.be(new Date());
            expect(data.marketplaceSourceCollection).to.be.a(PerchApi.MarketplaceSourceCollection);
                  expect(data.marketplaceSourceCollection.id).to.be.a('number');
              expect(data.marketplaceSourceCollection.id).to.be(0);
              expect(data.marketplaceSourceCollection.name).to.be.a('string');
              expect(data.marketplaceSourceCollection.name).to.be("");
              expect(data.marketplaceSourceCollection.visibleFor).to.be.a('string');
              expect(data.marketplaceSourceCollection.visibleFor).to.be("");
            expect(data.mitreAttackTactic).to.be.a('string');
            expect(data.mitreAttackTactic).to.be("");
            expect(data.msearchQuery).to.be.a('string');
            expect(data.msearchQuery).to.be("");
            expect(data.msftTeamsActionCustomWebhookUrl).to.be.a('string');
            expect(data.msftTeamsActionCustomWebhookUrl).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.perchAlertEnabled).to.be.a('boolean');
            expect(data.perchAlertEnabled).to.be(false);
            expect(data.prevTimeWindow).to.be.a(Object);
            expect(data.prevTimeWindow).to.be();
            expect(data.queryFilter).to.be.a(Object);
            expect(data.queryFilter).to.be();
            expect(data.representationField).to.be.a('number');
            expect(data.representationField).to.be(0);
            expect(data.schedule).to.be.a(Object);
            expect(data.schedule).to.be();
            expect(data.severity).to.be.a('number');
            expect(data.severity).to.be(0);
            expect(data.slackActionCustomChannel).to.be.a('string');
            expect(data.slackActionCustomChannel).to.be("");
            {
              let dataCtr = data.smsActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.spikePercentage).to.be.a('number');
            expect(data.spikePercentage).to.be(0);
            expect(data.thresholdCount).to.be.a('number');
            expect(data.thresholdCount).to.be(0);
            expect(data.throttlePeriod).to.be.a('number');
            expect(data.throttlePeriod).to.be(0);
            expect(data.timeField).to.be.a('number');
            expect(data.timeField).to.be(0);
            expect(data.timeWindow).to.be.a(Object);
            expect(data.timeWindow).to.be();
            expect(data.triggerCondition).to.be.a('number');
            expect(data.triggerCondition).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("");
            expect(data.watchError).to.be.a('string');
            expect(data.watchError).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsTriggeredNotificationsList', function() {
        it('should call perchybanaEventNotificationsTriggeredNotificationsList successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaEventNotificationsTriggeredNotificationsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var eventNotificationId = "eventNotificationId_example";
          var opts = {};
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.perchybanaEventNotificationsTriggeredNotificationsList(companyId, eventNotificationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse2008);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.TriggeredEventNotification);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.eventNotification).to.be.a(PerchApi.TriggeredEventNotificationSerializer);
                      expect(data.eventNotification.id).to.be.a('number');
                  expect(data.eventNotification.id).to.be(0);
                  expect(data.eventNotification.name).to.be.a('string');
                  expect(data.eventNotification.name).to.be("");
                expect(data.indicatorId).to.be.a('string');
                expect(data.indicatorId).to.be("");
                expect(data.representationField).to.be.a('string');
                expect(data.representationField).to.be("");
                expect(data.triggeredAt).to.be.a(Date);
                expect(data.triggeredAt).to.be(new Date());
                expect(data.triggeredValues).to.be.a(Object);
                expect(data.triggeredValues).to.be();
                expect(data.wasPerchAlertCreated).to.be.a('boolean');
                expect(data.wasPerchAlertCreated).to.be(false);
                expect(data.wasCwManageTicketCreated).to.be.a('boolean');
                expect(data.wasCwManageTicketCreated).to.be(false);
                expect(data.wasEmailSent).to.be.a('boolean');
                expect(data.wasEmailSent).to.be(false);
                expect(data.wasFreshdeskTicketCreated).to.be.a('boolean');
                expect(data.wasFreshdeskTicketCreated).to.be(false);
                expect(data.wasMsftTeamsWebhookSent).to.be.a('boolean');
                expect(data.wasMsftTeamsWebhookSent).to.be(false);
                expect(data.wasSlackMessageSent).to.be.a('boolean');
                expect(data.wasSlackMessageSent).to.be(false);
                expect(data.wasSmsMessageSent).to.be.a('boolean');
                expect(data.wasSmsMessageSent).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsTriggeredNotificationsRead', function() {
        it('should call perchybanaEventNotificationsTriggeredNotificationsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaEventNotificationsTriggeredNotificationsRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var eventNotificationId = "eventNotificationId_example";
          var id = "id_example";

          instance.perchybanaEventNotificationsTriggeredNotificationsRead(companyId, eventNotificationId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.TriggeredEventNotification);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.eventNotification).to.be.a(PerchApi.TriggeredEventNotificationSerializer);
                  expect(data.eventNotification.id).to.be.a('number');
              expect(data.eventNotification.id).to.be(0);
              expect(data.eventNotification.name).to.be.a('string');
              expect(data.eventNotification.name).to.be("");
            expect(data.indicatorId).to.be.a('string');
            expect(data.indicatorId).to.be("");
            expect(data.representationField).to.be.a('string');
            expect(data.representationField).to.be("");
            expect(data.triggeredAt).to.be.a(Date);
            expect(data.triggeredAt).to.be(new Date());
            expect(data.triggeredValues).to.be.a(Object);
            expect(data.triggeredValues).to.be();
            expect(data.wasPerchAlertCreated).to.be.a('boolean');
            expect(data.wasPerchAlertCreated).to.be(false);
            expect(data.wasCwManageTicketCreated).to.be.a('boolean');
            expect(data.wasCwManageTicketCreated).to.be(false);
            expect(data.wasEmailSent).to.be.a('boolean');
            expect(data.wasEmailSent).to.be(false);
            expect(data.wasFreshdeskTicketCreated).to.be.a('boolean');
            expect(data.wasFreshdeskTicketCreated).to.be(false);
            expect(data.wasMsftTeamsWebhookSent).to.be.a('boolean');
            expect(data.wasMsftTeamsWebhookSent).to.be(false);
            expect(data.wasSlackMessageSent).to.be.a('boolean');
            expect(data.wasSlackMessageSent).to.be(false);
            expect(data.wasSmsMessageSent).to.be.a('boolean');
            expect(data.wasSmsMessageSent).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsUpdate', function() {
        it('should call perchybanaEventNotificationsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaEventNotificationsUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.EventNotification();
          data.aggregationField = 0;
          data.aggregationType = "Average";
          data.comparisonField = 0;
          data.createdAt = new Date();
          data.createdByTeam = 0;
          data.description = "";
          data.emailActionCustomRecipients = [""];
          data.enableCwManageActionDefault = false;
          data.enableEmailActionDefaultRecipients = false;
          data.enableEmailActionCustomRecipients = false;
          data.enableFreshdeskActionDefaultTicketType = false;
          data.enableFreshdeskActionCustomTicketType = false;
          data.enableMsftTeamsActionDefaultWebhookUrl = false;
          data.enableMsftTeamsActionCustomWebhookUrl = false;
          data.enableSlackActionDefaultChannel = false;
          data.enableSlackActionCustomChannel = false;
          data.enableSmsActionDefaultRecipients = false;
          data.enableSmsActionCustomRecipients = false;
          data.freshdeskActionCustomTicketType = "";
          data.indexMapping = 0;
          data.isEnabled = false;
          data.fieldsForDisplay = [0];
          data.keywordFilter = "";
          data.lastTriggeredAt = new Date();
          data.marketplaceSourceCollection = new PerchApi.MarketplaceSourceCollection();
          data.mitreAttackTactic = "";
          data.msftTeamsActionCustomWebhookUrl = "";
          data.name = "";
          data.perchAlertEnabled = false;
          data.prevTimeWindow = ;
          data.queryFilter = ;
          data.representationField = 0;
          data.schedule = ;
          data.severity = 0;
          data.slackActionCustomChannel = "";
          data.smsActionCustomRecipients = [""];
          data.spikePercentage = 0;
          data.thresholdCount = 0;
          data.throttlePeriod = 0;
          data.timeField = 0;
          data.timeWindow = ;
          data.triggerCondition = 0;

          instance.perchybanaEventNotificationsUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.EventNotification);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.aggregationField).to.be.a('number');
            expect(data.aggregationField).to.be(0);
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("Average");
            expect(data.comparisonField).to.be.a('number');
            expect(data.comparisonField).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdByTeam).to.be.a('number');
            expect(data.createdByTeam).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.emailActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.enableCwManageActionDefault).to.be.a('boolean');
            expect(data.enableCwManageActionDefault).to.be(false);
            expect(data.enableEmailActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableEmailActionDefaultRecipients).to.be(false);
            expect(data.enableEmailActionCustomRecipients).to.be.a('boolean');
            expect(data.enableEmailActionCustomRecipients).to.be(false);
            expect(data.enableFreshdeskActionDefaultTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionDefaultTicketType).to.be(false);
            expect(data.enableFreshdeskActionCustomTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionCustomTicketType).to.be(false);
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be(false);
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be(false);
            expect(data.enableSlackActionDefaultChannel).to.be.a('boolean');
            expect(data.enableSlackActionDefaultChannel).to.be(false);
            expect(data.enableSlackActionCustomChannel).to.be.a('boolean');
            expect(data.enableSlackActionCustomChannel).to.be(false);
            expect(data.enableSmsActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableSmsActionDefaultRecipients).to.be(false);
            expect(data.enableSmsActionCustomRecipients).to.be.a('boolean');
            expect(data.enableSmsActionCustomRecipients).to.be(false);
            expect(data.freshdeskActionCustomTicketType).to.be.a('string');
            expect(data.freshdeskActionCustomTicketType).to.be("");
            expect(data.indexMapping).to.be.a('number');
            expect(data.indexMapping).to.be(0);
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.isLocked).to.be.a('string');
            expect(data.isLocked).to.be("");
            {
              let dataCtr = data.fieldsForDisplay;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            expect(data.keywordFilter).to.be.a('string');
            expect(data.keywordFilter).to.be("");
            expect(data.kibanaQuery).to.be.a('string');
            expect(data.kibanaQuery).to.be("");
            expect(data.lastTriggeredAt).to.be.a(Date);
            expect(data.lastTriggeredAt).to.be(new Date());
            expect(data.marketplaceSourceCollection).to.be.a(PerchApi.MarketplaceSourceCollection);
                  expect(data.marketplaceSourceCollection.id).to.be.a('number');
              expect(data.marketplaceSourceCollection.id).to.be(0);
              expect(data.marketplaceSourceCollection.name).to.be.a('string');
              expect(data.marketplaceSourceCollection.name).to.be("");
              expect(data.marketplaceSourceCollection.visibleFor).to.be.a('string');
              expect(data.marketplaceSourceCollection.visibleFor).to.be("");
            expect(data.mitreAttackTactic).to.be.a('string');
            expect(data.mitreAttackTactic).to.be("");
            expect(data.msearchQuery).to.be.a('string');
            expect(data.msearchQuery).to.be("");
            expect(data.msftTeamsActionCustomWebhookUrl).to.be.a('string');
            expect(data.msftTeamsActionCustomWebhookUrl).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.perchAlertEnabled).to.be.a('boolean');
            expect(data.perchAlertEnabled).to.be(false);
            expect(data.prevTimeWindow).to.be.a(Object);
            expect(data.prevTimeWindow).to.be();
            expect(data.queryFilter).to.be.a(Object);
            expect(data.queryFilter).to.be();
            expect(data.representationField).to.be.a('number');
            expect(data.representationField).to.be(0);
            expect(data.schedule).to.be.a(Object);
            expect(data.schedule).to.be();
            expect(data.severity).to.be.a('number');
            expect(data.severity).to.be(0);
            expect(data.slackActionCustomChannel).to.be.a('string');
            expect(data.slackActionCustomChannel).to.be("");
            {
              let dataCtr = data.smsActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.spikePercentage).to.be.a('number');
            expect(data.spikePercentage).to.be(0);
            expect(data.thresholdCount).to.be.a('number');
            expect(data.thresholdCount).to.be(0);
            expect(data.throttlePeriod).to.be.a('number');
            expect(data.throttlePeriod).to.be(0);
            expect(data.timeField).to.be.a('number');
            expect(data.timeField).to.be(0);
            expect(data.timeWindow).to.be.a(Object);
            expect(data.timeWindow).to.be();
            expect(data.triggerCondition).to.be.a('number');
            expect(data.triggerCondition).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("");
            expect(data.watchError).to.be.a('string');
            expect(data.watchError).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaEventNotificationsUpdateDefaultActions', function() {
        it('should call perchybanaEventNotificationsUpdateDefaultActions successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaEventNotificationsUpdateDefaultActions call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.EventNotification();
          data.aggregationField = 0;
          data.aggregationType = "Average";
          data.comparisonField = 0;
          data.createdAt = new Date();
          data.createdByTeam = 0;
          data.description = "";
          data.emailActionCustomRecipients = [""];
          data.enableCwManageActionDefault = false;
          data.enableEmailActionDefaultRecipients = false;
          data.enableEmailActionCustomRecipients = false;
          data.enableFreshdeskActionDefaultTicketType = false;
          data.enableFreshdeskActionCustomTicketType = false;
          data.enableMsftTeamsActionDefaultWebhookUrl = false;
          data.enableMsftTeamsActionCustomWebhookUrl = false;
          data.enableSlackActionDefaultChannel = false;
          data.enableSlackActionCustomChannel = false;
          data.enableSmsActionDefaultRecipients = false;
          data.enableSmsActionCustomRecipients = false;
          data.freshdeskActionCustomTicketType = "";
          data.indexMapping = 0;
          data.isEnabled = false;
          data.fieldsForDisplay = [0];
          data.keywordFilter = "";
          data.lastTriggeredAt = new Date();
          data.marketplaceSourceCollection = new PerchApi.MarketplaceSourceCollection();
          data.mitreAttackTactic = "";
          data.msftTeamsActionCustomWebhookUrl = "";
          data.name = "";
          data.perchAlertEnabled = false;
          data.prevTimeWindow = ;
          data.queryFilter = ;
          data.representationField = 0;
          data.schedule = ;
          data.severity = 0;
          data.slackActionCustomChannel = "";
          data.smsActionCustomRecipients = [""];
          data.spikePercentage = 0;
          data.thresholdCount = 0;
          data.throttlePeriod = 0;
          data.timeField = 0;
          data.timeWindow = ;
          data.triggerCondition = 0;

          instance.perchybanaEventNotificationsUpdateDefaultActions(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.EventNotification);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.aggregationField).to.be.a('number');
            expect(data.aggregationField).to.be(0);
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("Average");
            expect(data.comparisonField).to.be.a('number');
            expect(data.comparisonField).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdByTeam).to.be.a('number');
            expect(data.createdByTeam).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.emailActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.enableCwManageActionDefault).to.be.a('boolean');
            expect(data.enableCwManageActionDefault).to.be(false);
            expect(data.enableEmailActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableEmailActionDefaultRecipients).to.be(false);
            expect(data.enableEmailActionCustomRecipients).to.be.a('boolean');
            expect(data.enableEmailActionCustomRecipients).to.be(false);
            expect(data.enableFreshdeskActionDefaultTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionDefaultTicketType).to.be(false);
            expect(data.enableFreshdeskActionCustomTicketType).to.be.a('boolean');
            expect(data.enableFreshdeskActionCustomTicketType).to.be(false);
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionDefaultWebhookUrl).to.be(false);
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be.a('boolean');
            expect(data.enableMsftTeamsActionCustomWebhookUrl).to.be(false);
            expect(data.enableSlackActionDefaultChannel).to.be.a('boolean');
            expect(data.enableSlackActionDefaultChannel).to.be(false);
            expect(data.enableSlackActionCustomChannel).to.be.a('boolean');
            expect(data.enableSlackActionCustomChannel).to.be(false);
            expect(data.enableSmsActionDefaultRecipients).to.be.a('boolean');
            expect(data.enableSmsActionDefaultRecipients).to.be(false);
            expect(data.enableSmsActionCustomRecipients).to.be.a('boolean');
            expect(data.enableSmsActionCustomRecipients).to.be(false);
            expect(data.freshdeskActionCustomTicketType).to.be.a('string');
            expect(data.freshdeskActionCustomTicketType).to.be("");
            expect(data.indexMapping).to.be.a('number');
            expect(data.indexMapping).to.be(0);
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.isLocked).to.be.a('string');
            expect(data.isLocked).to.be("");
            {
              let dataCtr = data.fieldsForDisplay;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            expect(data.keywordFilter).to.be.a('string');
            expect(data.keywordFilter).to.be("");
            expect(data.kibanaQuery).to.be.a('string');
            expect(data.kibanaQuery).to.be("");
            expect(data.lastTriggeredAt).to.be.a(Date);
            expect(data.lastTriggeredAt).to.be(new Date());
            expect(data.marketplaceSourceCollection).to.be.a(PerchApi.MarketplaceSourceCollection);
                  expect(data.marketplaceSourceCollection.id).to.be.a('number');
              expect(data.marketplaceSourceCollection.id).to.be(0);
              expect(data.marketplaceSourceCollection.name).to.be.a('string');
              expect(data.marketplaceSourceCollection.name).to.be("");
              expect(data.marketplaceSourceCollection.visibleFor).to.be.a('string');
              expect(data.marketplaceSourceCollection.visibleFor).to.be("");
            expect(data.mitreAttackTactic).to.be.a('string');
            expect(data.mitreAttackTactic).to.be("");
            expect(data.msearchQuery).to.be.a('string');
            expect(data.msearchQuery).to.be("");
            expect(data.msftTeamsActionCustomWebhookUrl).to.be.a('string');
            expect(data.msftTeamsActionCustomWebhookUrl).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.perchAlertEnabled).to.be.a('boolean');
            expect(data.perchAlertEnabled).to.be(false);
            expect(data.prevTimeWindow).to.be.a(Object);
            expect(data.prevTimeWindow).to.be();
            expect(data.queryFilter).to.be.a(Object);
            expect(data.queryFilter).to.be();
            expect(data.representationField).to.be.a('number');
            expect(data.representationField).to.be(0);
            expect(data.schedule).to.be.a(Object);
            expect(data.schedule).to.be();
            expect(data.severity).to.be.a('number');
            expect(data.severity).to.be(0);
            expect(data.slackActionCustomChannel).to.be.a('string');
            expect(data.slackActionCustomChannel).to.be("");
            {
              let dataCtr = data.smsActionCustomRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.spikePercentage).to.be.a('number');
            expect(data.spikePercentage).to.be(0);
            expect(data.thresholdCount).to.be.a('number');
            expect(data.thresholdCount).to.be(0);
            expect(data.throttlePeriod).to.be.a('number');
            expect(data.throttlePeriod).to.be(0);
            expect(data.timeField).to.be.a('number');
            expect(data.timeField).to.be(0);
            expect(data.timeWindow).to.be.a(Object);
            expect(data.timeWindow).to.be();
            expect(data.triggerCondition).to.be.a('number');
            expect(data.triggerCondition).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("");
            expect(data.watchError).to.be.a('string');
            expect(data.watchError).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaMeltgardRolesList', function() {
        it('should call perchybanaMeltgardRolesList successfully', function(done) {
          // TODO: uncomment perchybanaMeltgardRolesList call
          /*

          instance.perchybanaMeltgardRolesList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaMeltgardRolesRead', function() {
        it('should call perchybanaMeltgardRolesRead successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaMeltgardRolesRead call
          /*
          var roleNames = "roleNames_example";

          instance.perchybanaMeltgardRolesRead(roleNames, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaMeltgardUsersMeList', function() {
        it('should call perchybanaMeltgardUsersMeList successfully', function(done) {
          // TODO: uncomment perchybanaMeltgardUsersMeList call
          /*

          instance.perchybanaMeltgardUsersMeList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaMeltgardUsersRead', function() {
        it('should call perchybanaMeltgardUsersRead successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaMeltgardUsersRead call
          /*
          var username = "username_example";

          instance.perchybanaMeltgardUsersRead(username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaScheduledReportsCreate', function() {
        it('should call perchybanaScheduledReportsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaScheduledReportsCreate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.ScheduledReport();
          data.name = "";
          data.description = "";
          data.isEnabled = false;
          data.savedObjectType = "";
          data.savedObjectId = "";
          data.schedule = new PerchApi.Schedule();
          data.schedule.type = "interval";
          data.schedule.intervalValue = 0;
          data.schedule.intervalUnit = "minute";
          data.schedule.daysOfMonth = [0];
          data.schedule.daysOfWeek = [0];
          data.schedule.hours = [0];
          data.schedule.minutes = [0];
          data.enableDefaultRecipients = false;
          data.enableCustomRecipients = false;
          data.customRecipients = [""];
          data.createdAt = new Date();
          data.createdBy = 0;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.perchybanaScheduledReportsCreate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.ScheduledReport);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.savedObjectType).to.be.a('string');
            expect(data.savedObjectType).to.be("");
            expect(data.savedObjectId).to.be.a('string');
            expect(data.savedObjectId).to.be("");
            expect(data.lastRunAt).to.be.a(Date);
            expect(data.lastRunAt).to.be(new Date());
            expect(data.nextRunAt).to.be.a(Date);
            expect(data.nextRunAt).to.be(new Date());
            expect(data.schedule).to.be.a(PerchApi.Schedule);
                  expect(data.schedule.type).to.be.a('string');
              expect(data.schedule.type).to.be("interval");
              expect(data.schedule.intervalValue).to.be.a('number');
              expect(data.schedule.intervalValue).to.be(0);
              expect(data.schedule.intervalUnit).to.be.a('string');
              expect(data.schedule.intervalUnit).to.be("minute");
              {
                let dataCtr = data.schedule.daysOfMonth;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.schedule.daysOfWeek;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.schedule.hours;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.schedule.minutes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.enableDefaultRecipients).to.be.a('boolean');
            expect(data.enableDefaultRecipients).to.be(false);
            expect(data.enableCustomRecipients).to.be.a('boolean');
            expect(data.enableCustomRecipients).to.be(false);
            {
              let dataCtr = data.customRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaScheduledReportsDelete', function() {
        it('should call perchybanaScheduledReportsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaScheduledReportsDelete call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.perchybanaScheduledReportsDelete(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaScheduledReportsList', function() {
        it('should call perchybanaScheduledReportsList successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaScheduledReportsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.perchybanaScheduledReportsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse2009);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.ScheduledReport);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.isEnabled).to.be.a('boolean');
                expect(data.isEnabled).to.be(false);
                expect(data.savedObjectType).to.be.a('string');
                expect(data.savedObjectType).to.be("");
                expect(data.savedObjectId).to.be.a('string');
                expect(data.savedObjectId).to.be("");
                expect(data.lastRunAt).to.be.a(Date);
                expect(data.lastRunAt).to.be(new Date());
                expect(data.nextRunAt).to.be.a(Date);
                expect(data.nextRunAt).to.be(new Date());
                expect(data.schedule).to.be.a(PerchApi.Schedule);
                      expect(data.schedule.type).to.be.a('string');
                  expect(data.schedule.type).to.be("interval");
                  expect(data.schedule.intervalValue).to.be.a('number');
                  expect(data.schedule.intervalValue).to.be(0);
                  expect(data.schedule.intervalUnit).to.be.a('string');
                  expect(data.schedule.intervalUnit).to.be("minute");
                  {
                    let dataCtr = data.schedule.daysOfMonth;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be(0);
                    }
                  }
                  {
                    let dataCtr = data.schedule.daysOfWeek;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be(0);
                    }
                  }
                  {
                    let dataCtr = data.schedule.hours;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be(0);
                    }
                  }
                  {
                    let dataCtr = data.schedule.minutes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be(0);
                    }
                  }
                expect(data.enableDefaultRecipients).to.be.a('boolean');
                expect(data.enableDefaultRecipients).to.be(false);
                expect(data.enableCustomRecipients).to.be.a('boolean');
                expect(data.enableCustomRecipients).to.be(false);
                {
                  let dataCtr = data.customRecipients;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(new Date());
                expect(data.createdBy).to.be.a('number');
                expect(data.createdBy).to.be(0);
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(new Date());
                expect(data.updatedBy).to.be.a('number');
                expect(data.updatedBy).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaScheduledReportsPartialUpdate', function() {
        it('should call perchybanaScheduledReportsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaScheduledReportsPartialUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.ScheduledReport();
          data.name = "";
          data.description = "";
          data.isEnabled = false;
          data.savedObjectType = "";
          data.savedObjectId = "";
          data.schedule = new PerchApi.Schedule();
          data.schedule.type = "interval";
          data.schedule.intervalValue = 0;
          data.schedule.intervalUnit = "minute";
          data.schedule.daysOfMonth = [0];
          data.schedule.daysOfWeek = [0];
          data.schedule.hours = [0];
          data.schedule.minutes = [0];
          data.enableDefaultRecipients = false;
          data.enableCustomRecipients = false;
          data.customRecipients = [""];
          data.createdAt = new Date();
          data.createdBy = 0;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.perchybanaScheduledReportsPartialUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.ScheduledReport);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.savedObjectType).to.be.a('string');
            expect(data.savedObjectType).to.be("");
            expect(data.savedObjectId).to.be.a('string');
            expect(data.savedObjectId).to.be("");
            expect(data.lastRunAt).to.be.a(Date);
            expect(data.lastRunAt).to.be(new Date());
            expect(data.nextRunAt).to.be.a(Date);
            expect(data.nextRunAt).to.be(new Date());
            expect(data.schedule).to.be.a(PerchApi.Schedule);
                  expect(data.schedule.type).to.be.a('string');
              expect(data.schedule.type).to.be("interval");
              expect(data.schedule.intervalValue).to.be.a('number');
              expect(data.schedule.intervalValue).to.be(0);
              expect(data.schedule.intervalUnit).to.be.a('string');
              expect(data.schedule.intervalUnit).to.be("minute");
              {
                let dataCtr = data.schedule.daysOfMonth;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.schedule.daysOfWeek;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.schedule.hours;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.schedule.minutes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.enableDefaultRecipients).to.be.a('boolean');
            expect(data.enableDefaultRecipients).to.be(false);
            expect(data.enableCustomRecipients).to.be.a('boolean');
            expect(data.enableCustomRecipients).to.be(false);
            {
              let dataCtr = data.customRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaScheduledReportsRead', function() {
        it('should call perchybanaScheduledReportsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaScheduledReportsRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.perchybanaScheduledReportsRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.ScheduledReport);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.savedObjectType).to.be.a('string');
            expect(data.savedObjectType).to.be("");
            expect(data.savedObjectId).to.be.a('string');
            expect(data.savedObjectId).to.be("");
            expect(data.lastRunAt).to.be.a(Date);
            expect(data.lastRunAt).to.be(new Date());
            expect(data.nextRunAt).to.be.a(Date);
            expect(data.nextRunAt).to.be(new Date());
            expect(data.schedule).to.be.a(PerchApi.Schedule);
                  expect(data.schedule.type).to.be.a('string');
              expect(data.schedule.type).to.be("interval");
              expect(data.schedule.intervalValue).to.be.a('number');
              expect(data.schedule.intervalValue).to.be(0);
              expect(data.schedule.intervalUnit).to.be.a('string');
              expect(data.schedule.intervalUnit).to.be("minute");
              {
                let dataCtr = data.schedule.daysOfMonth;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.schedule.daysOfWeek;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.schedule.hours;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.schedule.minutes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.enableDefaultRecipients).to.be.a('boolean');
            expect(data.enableDefaultRecipients).to.be(false);
            expect(data.enableCustomRecipients).to.be.a('boolean');
            expect(data.enableCustomRecipients).to.be(false);
            {
              let dataCtr = data.customRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaScheduledReportsReportsDownload', function() {
        it('should call perchybanaScheduledReportsReportsDownload successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaScheduledReportsReportsDownload call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var scheduledReportId = "scheduledReportId_example";

          instance.perchybanaScheduledReportsReportsDownload(companyId, id, scheduledReportId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Report);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.scheduledReport).to.be.a('number');
            expect(data.scheduledReport).to.be(0);
            expect(data.runForTeam).to.be.a('number');
            expect(data.runForTeam).to.be(0);
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("uninitiated");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.outputSize).to.be.a('number');
            expect(data.outputSize).to.be(0);
            expect(data.outputSizeHuman).to.be.a('string');
            expect(data.outputSizeHuman).to.be("");
            expect(data.errorMsg).to.be.a('string');
            expect(data.errorMsg).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.savedObjectType).to.be.a('string');
            expect(data.savedObjectType).to.be("");
            expect(data.savedObjectId).to.be.a('string');
            expect(data.savedObjectId).to.be("");
            expect(data.fromTime).to.be.a(Date);
            expect(data.fromTime).to.be(new Date());
            expect(data.toTime).to.be.a(Date);
            expect(data.toTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaScheduledReportsReportsList', function() {
        it('should call perchybanaScheduledReportsReportsList successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaScheduledReportsReportsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var scheduledReportId = "scheduledReportId_example";
          var opts = {};
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.perchybanaScheduledReportsReportsList(companyId, scheduledReportId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse20010);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.Report);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.scheduledReport).to.be.a('number');
                expect(data.scheduledReport).to.be(0);
                expect(data.runForTeam).to.be.a('number');
                expect(data.runForTeam).to.be(0);
                expect(data.state).to.be.a('string');
                expect(data.state).to.be("uninitiated");
                expect(data.contentType).to.be.a('string');
                expect(data.contentType).to.be("");
                expect(data.outputSize).to.be.a('number');
                expect(data.outputSize).to.be(0);
                expect(data.outputSizeHuman).to.be.a('string');
                expect(data.outputSizeHuman).to.be("");
                expect(data.errorMsg).to.be.a('string');
                expect(data.errorMsg).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.savedObjectType).to.be.a('string');
                expect(data.savedObjectType).to.be("");
                expect(data.savedObjectId).to.be.a('string');
                expect(data.savedObjectId).to.be("");
                expect(data.fromTime).to.be.a(Date);
                expect(data.fromTime).to.be(new Date());
                expect(data.toTime).to.be.a(Date);
                expect(data.toTime).to.be(new Date());

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaScheduledReportsReportsRead', function() {
        it('should call perchybanaScheduledReportsReportsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaScheduledReportsReportsRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var scheduledReportId = "scheduledReportId_example";

          instance.perchybanaScheduledReportsReportsRead(companyId, id, scheduledReportId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Report);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.scheduledReport).to.be.a('number');
            expect(data.scheduledReport).to.be(0);
            expect(data.runForTeam).to.be.a('number');
            expect(data.runForTeam).to.be(0);
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("uninitiated");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.outputSize).to.be.a('number');
            expect(data.outputSize).to.be(0);
            expect(data.outputSizeHuman).to.be.a('string');
            expect(data.outputSizeHuman).to.be("");
            expect(data.errorMsg).to.be.a('string');
            expect(data.errorMsg).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.savedObjectType).to.be.a('string');
            expect(data.savedObjectType).to.be("");
            expect(data.savedObjectId).to.be.a('string');
            expect(data.savedObjectId).to.be("");
            expect(data.fromTime).to.be.a(Date);
            expect(data.fromTime).to.be(new Date());
            expect(data.toTime).to.be.a(Date);
            expect(data.toTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaScheduledReportsSavedObjectsList', function() {
        it('should call perchybanaScheduledReportsSavedObjectsList successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaScheduledReportsSavedObjectsList call and complete the assertions
          /*
          var opts = {};
          opts.type = "type_example";

          instance.perchybanaScheduledReportsSavedObjectsList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.SavedObject);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.type).to.be.a('string');
              expect(data.type).to.be("");
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaScheduledReportsTrigger', function() {
        it('should call perchybanaScheduledReportsTrigger successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaScheduledReportsTrigger call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.ScheduledReport();
          data.name = "";
          data.description = "";
          data.isEnabled = false;
          data.savedObjectType = "";
          data.savedObjectId = "";
          data.schedule = new PerchApi.Schedule();
          data.schedule.type = "interval";
          data.schedule.intervalValue = 0;
          data.schedule.intervalUnit = "minute";
          data.schedule.daysOfMonth = [0];
          data.schedule.daysOfWeek = [0];
          data.schedule.hours = [0];
          data.schedule.minutes = [0];
          data.enableDefaultRecipients = false;
          data.enableCustomRecipients = false;
          data.customRecipients = [""];
          data.createdAt = new Date();
          data.createdBy = 0;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.perchybanaScheduledReportsTrigger(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.ScheduledReport);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.savedObjectType).to.be.a('string');
            expect(data.savedObjectType).to.be("");
            expect(data.savedObjectId).to.be.a('string');
            expect(data.savedObjectId).to.be("");
            expect(data.lastRunAt).to.be.a(Date);
            expect(data.lastRunAt).to.be(new Date());
            expect(data.nextRunAt).to.be.a(Date);
            expect(data.nextRunAt).to.be(new Date());
            expect(data.schedule).to.be.a(PerchApi.Schedule);
                  expect(data.schedule.type).to.be.a('string');
              expect(data.schedule.type).to.be("interval");
              expect(data.schedule.intervalValue).to.be.a('number');
              expect(data.schedule.intervalValue).to.be(0);
              expect(data.schedule.intervalUnit).to.be.a('string');
              expect(data.schedule.intervalUnit).to.be("minute");
              {
                let dataCtr = data.schedule.daysOfMonth;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.schedule.daysOfWeek;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.schedule.hours;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.schedule.minutes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.enableDefaultRecipients).to.be.a('boolean');
            expect(data.enableDefaultRecipients).to.be(false);
            expect(data.enableCustomRecipients).to.be.a('boolean');
            expect(data.enableCustomRecipients).to.be(false);
            {
              let dataCtr = data.customRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('perchybanaScheduledReportsUpdate', function() {
        it('should call perchybanaScheduledReportsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for perchybanaScheduledReportsUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.ScheduledReport();
          data.name = "";
          data.description = "";
          data.isEnabled = false;
          data.savedObjectType = "";
          data.savedObjectId = "";
          data.schedule = new PerchApi.Schedule();
          data.schedule.type = "interval";
          data.schedule.intervalValue = 0;
          data.schedule.intervalUnit = "minute";
          data.schedule.daysOfMonth = [0];
          data.schedule.daysOfWeek = [0];
          data.schedule.hours = [0];
          data.schedule.minutes = [0];
          data.enableDefaultRecipients = false;
          data.enableCustomRecipients = false;
          data.customRecipients = [""];
          data.createdAt = new Date();
          data.createdBy = 0;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.perchybanaScheduledReportsUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.ScheduledReport);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.savedObjectType).to.be.a('string');
            expect(data.savedObjectType).to.be("");
            expect(data.savedObjectId).to.be.a('string');
            expect(data.savedObjectId).to.be("");
            expect(data.lastRunAt).to.be.a(Date);
            expect(data.lastRunAt).to.be(new Date());
            expect(data.nextRunAt).to.be.a(Date);
            expect(data.nextRunAt).to.be(new Date());
            expect(data.schedule).to.be.a(PerchApi.Schedule);
                  expect(data.schedule.type).to.be.a('string');
              expect(data.schedule.type).to.be("interval");
              expect(data.schedule.intervalValue).to.be.a('number');
              expect(data.schedule.intervalValue).to.be(0);
              expect(data.schedule.intervalUnit).to.be.a('string');
              expect(data.schedule.intervalUnit).to.be("minute");
              {
                let dataCtr = data.schedule.daysOfMonth;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.schedule.daysOfWeek;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.schedule.hours;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.schedule.minutes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.enableDefaultRecipients).to.be.a('boolean');
            expect(data.enableDefaultRecipients).to.be(false);
            expect(data.enableCustomRecipients).to.be.a('boolean');
            expect(data.enableCustomRecipients).to.be(false);
            {
              let dataCtr = data.customRecipients;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
