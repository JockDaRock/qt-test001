/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PerchApi);
  }
}(this, function(expect, PerchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PerchApi.CompanyApi();
  });

  describe('(package)', function() {
    describe('CompanyApi', function() {
      describe('companyBpfUpdate', function() {
        it('should call companyBpfUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyBpfUpdate call
          /*
          var companyId = "companyId_example";

          instance.companyBpfUpdate(companyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyCommunityCreate', function() {
        it('should call companyCommunityCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyCommunityCreate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.JoinCommunity();
          data.id = 0;
          data.feeds = [""];
          data.credentials = new PerchApi.Credential();
          data.credentials.username = "";
          data.credentials.password = "";
          data.credentials.cert = "";
          data.credentials.key = "";

          instance.companyCommunityCreate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.JoinCommunity);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            {
              let dataCtr = data.feeds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.credentials).to.be.a(PerchApi.Credential);
                  expect(data.credentials.username).to.be.a('string');
              expect(data.credentials.username).to.be("");
              expect(data.credentials.password).to.be.a('string');
              expect(data.credentials.password).to.be("");
              expect(data.credentials.cert).to.be.a('string');
              expect(data.credentials.cert).to.be("");
              expect(data.credentials.key).to.be.a('string');
              expect(data.credentials.key).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyCommunityCredentials', function() {
        it('should call companyCommunityCredentials successfully', function(done) {
          // TODO: uncomment, update parameter values for companyCommunityCredentials call and complete the assertions
          /*
          var communityId = "communityId_example";
          var companyId = "companyId_example";
          var data = new PerchApi.ApiCommunityListSerializer();
          data.attribution = new PerchApi.Attribution();
          data.attribution.anonPrivateIp = false;
          data.attribution.anonIndustry = false;
          data.attribution.anonGeolocation = false;
          data.attribution.anonName = false;
          data.attribution.shareSightings = false;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.companyCommunityCredentials(communityId, companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.ApiCommunityListSerializer);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.poweredBy).to.be.a('string');
            expect(data.poweredBy).to.be("");
            expect(data.credentialReq).to.be.a('number');
            expect(data.credentialReq).to.be(0);
            expect(data.selectableFeeds).to.be.a('boolean');
            expect(data.selectableFeeds).to.be(false);
            expect(data.attribution).to.be.a(PerchApi.Attribution);
                  expect(data.attribution.anonPrivateIp).to.be.a('boolean');
              expect(data.attribution.anonPrivateIp).to.be(false);
              expect(data.attribution.anonIndustry).to.be.a('boolean');
              expect(data.attribution.anonIndustry).to.be(false);
              expect(data.attribution.anonGeolocation).to.be.a('boolean');
              expect(data.attribution.anonGeolocation).to.be(false);
              expect(data.attribution.anonName).to.be.a('boolean');
              expect(data.attribution.anonName).to.be(false);
              expect(data.attribution.shareSightings).to.be.a('boolean');
              expect(data.attribution.shareSightings).to.be(false);
            expect(data.feeds).to.be.a('string');
            expect(data.feeds).to.be("");
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyCommunityDelete', function() {
        it('should call companyCommunityDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for companyCommunityDelete call
          /*
          var communityId = "communityId_example";
          var companyId = "companyId_example";

          instance.companyCommunityDelete(communityId, companyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyCommunityFeeds', function() {
        it('should call companyCommunityFeeds successfully', function(done) {
          // TODO: uncomment, update parameter values for companyCommunityFeeds call and complete the assertions
          /*
          var communityId = "communityId_example";
          var companyId = "companyId_example";
          var data = new PerchApi.ApiCommunityListSerializer();
          data.attribution = new PerchApi.Attribution();
          data.attribution.anonPrivateIp = false;
          data.attribution.anonIndustry = false;
          data.attribution.anonGeolocation = false;
          data.attribution.anonName = false;
          data.attribution.shareSightings = false;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.companyCommunityFeeds(communityId, companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.ApiCommunityListSerializer);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.poweredBy).to.be.a('string');
            expect(data.poweredBy).to.be("");
            expect(data.credentialReq).to.be.a('number');
            expect(data.credentialReq).to.be(0);
            expect(data.selectableFeeds).to.be.a('boolean');
            expect(data.selectableFeeds).to.be(false);
            expect(data.attribution).to.be.a(PerchApi.Attribution);
                  expect(data.attribution.anonPrivateIp).to.be.a('boolean');
              expect(data.attribution.anonPrivateIp).to.be(false);
              expect(data.attribution.anonIndustry).to.be.a('boolean');
              expect(data.attribution.anonIndustry).to.be(false);
              expect(data.attribution.anonGeolocation).to.be.a('boolean');
              expect(data.attribution.anonGeolocation).to.be(false);
              expect(data.attribution.anonName).to.be.a('boolean');
              expect(data.attribution.anonName).to.be(false);
              expect(data.attribution.shareSightings).to.be.a('boolean');
              expect(data.attribution.shareSightings).to.be(false);
            expect(data.feeds).to.be.a('string');
            expect(data.feeds).to.be("");
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyCommunityList', function() {
        it('should call companyCommunityList successfully', function(done) {
          // TODO: uncomment, update parameter values for companyCommunityList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";

          instance.companyCommunityList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.ApiCommunityListSerializer);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.poweredBy).to.be.a('string');
              expect(data.poweredBy).to.be("");
              expect(data.credentialReq).to.be.a('number');
              expect(data.credentialReq).to.be(0);
              expect(data.selectableFeeds).to.be.a('boolean');
              expect(data.selectableFeeds).to.be(false);
              expect(data.attribution).to.be.a(PerchApi.Attribution);
                    expect(data.attribution.anonPrivateIp).to.be.a('boolean');
                expect(data.attribution.anonPrivateIp).to.be(false);
                expect(data.attribution.anonIndustry).to.be.a('boolean');
                expect(data.attribution.anonIndustry).to.be(false);
                expect(data.attribution.anonGeolocation).to.be.a('boolean');
                expect(data.attribution.anonGeolocation).to.be(false);
                expect(data.attribution.anonName).to.be.a('boolean');
                expect(data.attribution.anonName).to.be(false);
                expect(data.attribution.shareSightings).to.be.a('boolean');
                expect(data.attribution.shareSightings).to.be(false);
              expect(data.feeds).to.be.a('string');
              expect(data.feeds).to.be("");
              expect(data.updatedAt).to.be.a(Date);
              expect(data.updatedAt).to.be(new Date());
              expect(data.updatedBy).to.be.a('number');
              expect(data.updatedBy).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyCommunityPartialUpdate', function() {
        it('should call companyCommunityPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyCommunityPartialUpdate call and complete the assertions
          /*
          var communityId = "communityId_example";
          var companyId = "companyId_example";
          var data = new PerchApi.CommunityMember();
          data.community = 0;

          instance.companyCommunityPartialUpdate(communityId, companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.CommunityMember);
            expect(data.community).to.be.a('number');
            expect(data.community).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyCommunityRead', function() {
        it('should call companyCommunityRead successfully', function(done) {
          // TODO: uncomment, update parameter values for companyCommunityRead call and complete the assertions
          /*
          var communityId = "communityId_example";
          var companyId = "companyId_example";

          instance.companyCommunityRead(communityId, companyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.ApiCommunityListSerializer);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.poweredBy).to.be.a('string');
            expect(data.poweredBy).to.be("");
            expect(data.credentialReq).to.be.a('number');
            expect(data.credentialReq).to.be(0);
            expect(data.selectableFeeds).to.be.a('boolean');
            expect(data.selectableFeeds).to.be(false);
            expect(data.attribution).to.be.a(PerchApi.Attribution);
                  expect(data.attribution.anonPrivateIp).to.be.a('boolean');
              expect(data.attribution.anonPrivateIp).to.be(false);
              expect(data.attribution.anonIndustry).to.be.a('boolean');
              expect(data.attribution.anonIndustry).to.be(false);
              expect(data.attribution.anonGeolocation).to.be.a('boolean');
              expect(data.attribution.anonGeolocation).to.be(false);
              expect(data.attribution.anonName).to.be.a('boolean');
              expect(data.attribution.anonName).to.be(false);
              expect(data.attribution.shareSightings).to.be.a('boolean');
              expect(data.attribution.shareSightings).to.be(false);
            expect(data.feeds).to.be.a('string');
            expect(data.feeds).to.be("");
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyCommunityUpdate', function() {
        it('should call companyCommunityUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyCommunityUpdate call and complete the assertions
          /*
          var communityId = "communityId_example";
          var companyId = "companyId_example";
          var data = new PerchApi.ApiCommunityListSerializer();
          data.attribution = new PerchApi.Attribution();
          data.attribution.anonPrivateIp = false;
          data.attribution.anonIndustry = false;
          data.attribution.anonGeolocation = false;
          data.attribution.anonName = false;
          data.attribution.shareSightings = false;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.companyCommunityUpdate(communityId, companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.ApiCommunityListSerializer);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.poweredBy).to.be.a('string');
            expect(data.poweredBy).to.be("");
            expect(data.credentialReq).to.be.a('number');
            expect(data.credentialReq).to.be(0);
            expect(data.selectableFeeds).to.be.a('boolean');
            expect(data.selectableFeeds).to.be(false);
            expect(data.attribution).to.be.a(PerchApi.Attribution);
                  expect(data.attribution.anonPrivateIp).to.be.a('boolean');
              expect(data.attribution.anonPrivateIp).to.be(false);
              expect(data.attribution.anonIndustry).to.be.a('boolean');
              expect(data.attribution.anonIndustry).to.be(false);
              expect(data.attribution.anonGeolocation).to.be.a('boolean');
              expect(data.attribution.anonGeolocation).to.be(false);
              expect(data.attribution.anonName).to.be.a('boolean');
              expect(data.attribution.anonName).to.be(false);
              expect(data.attribution.shareSightings).to.be.a('boolean');
              expect(data.attribution.shareSightings).to.be(false);
            expect(data.feeds).to.be.a('string');
            expect(data.feeds).to.be("");
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyDefaultManagingTeamsList', function() {
        it('should call companyDefaultManagingTeamsList successfully', function(done) {
          // TODO: uncomment, update parameter values for companyDefaultManagingTeamsList call and complete the assertions
          /*
          var opts = {};
          opts.ordering = "ordering_example";

          instance.companyDefaultManagingTeamsList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.DefaultManagingTeams);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyDefaultManagingTeamsRead', function() {
        it('should call companyDefaultManagingTeamsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for companyDefaultManagingTeamsRead call and complete the assertions
          /*
          var id = "id_example";

          instance.companyDefaultManagingTeamsRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.DefaultManagingTeams);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyDeviceInviteCreate', function() {
        it('should call companyDeviceInviteCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyDeviceInviteCreate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.Invite();

          instance.companyDeviceInviteCreate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Invite);
            expect(data.code).to.be.a('string');
            expect(data.code).to.be("");
            expect(data.expiresAt).to.be.a('string');
            expect(data.expiresAt).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyDeviceInviteDelete', function() {
        it('should call companyDeviceInviteDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for companyDeviceInviteDelete call
          /*
          var code = "code_example";
          var companyId = "companyId_example";

          instance.companyDeviceInviteDelete(code, companyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyDeviceInviteList', function() {
        it('should call companyDeviceInviteList successfully', function(done) {
          // TODO: uncomment, update parameter values for companyDeviceInviteList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";

          instance.companyDeviceInviteList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.Invite);
              expect(data.code).to.be.a('string');
              expect(data.code).to.be("");
              expect(data.expiresAt).to.be.a('string');
              expect(data.expiresAt).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyDeviceInvitePartialUpdate', function() {
        it('should call companyDeviceInvitePartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyDeviceInvitePartialUpdate call and complete the assertions
          /*
          var code = "code_example";
          var companyId = "companyId_example";
          var data = new PerchApi.Invite();

          instance.companyDeviceInvitePartialUpdate(code, companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Invite);
            expect(data.code).to.be.a('string');
            expect(data.code).to.be("");
            expect(data.expiresAt).to.be.a('string');
            expect(data.expiresAt).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyDeviceInviteRead', function() {
        it('should call companyDeviceInviteRead successfully', function(done) {
          // TODO: uncomment, update parameter values for companyDeviceInviteRead call and complete the assertions
          /*
          var code = "code_example";
          var companyId = "companyId_example";

          instance.companyDeviceInviteRead(code, companyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Invite);
            expect(data.code).to.be.a('string');
            expect(data.code).to.be("");
            expect(data.expiresAt).to.be.a('string');
            expect(data.expiresAt).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyDeviceInviteUpdate', function() {
        it('should call companyDeviceInviteUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyDeviceInviteUpdate call and complete the assertions
          /*
          var code = "code_example";
          var companyId = "companyId_example";
          var data = new PerchApi.Invite();

          instance.companyDeviceInviteUpdate(code, companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.Invite);
            expect(data.code).to.be.a('string');
            expect(data.code).to.be("");
            expect(data.expiresAt).to.be.a('string');
            expect(data.expiresAt).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyEnterpriseSsoCreate', function() {
        it('should call companyEnterpriseSsoCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyEnterpriseSsoCreate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.TeamEnterpriseSSO();
          data.connectionId = "";
          data.isEnabled = false;
          data.strategy = "";
          data.name = "";
          data.displayName = "";
          data.options = ;

          instance.companyEnterpriseSsoCreate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.TeamEnterpriseSSO);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.connectionId).to.be.a('string');
            expect(data.connectionId).to.be("");
            expect(data.team).to.be.a('string');
            expect(data.team).to.be("");
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.strategy).to.be.a('string');
            expect(data.strategy).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.options).to.be.a(Object);
            expect(data.options).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyEnterpriseSsoDelete', function() {
        it('should call companyEnterpriseSsoDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for companyEnterpriseSsoDelete call
          /*
          var companyId = "companyId_example";

          instance.companyEnterpriseSsoDelete(companyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyEnterpriseSsoPartialUpdate', function() {
        it('should call companyEnterpriseSsoPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyEnterpriseSsoPartialUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.TeamEnterpriseSSO();
          data.connectionId = "";
          data.isEnabled = false;
          data.strategy = "";
          data.name = "";
          data.displayName = "";
          data.options = ;

          instance.companyEnterpriseSsoPartialUpdate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.TeamEnterpriseSSO);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.connectionId).to.be.a('string');
            expect(data.connectionId).to.be("");
            expect(data.team).to.be.a('string');
            expect(data.team).to.be("");
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.strategy).to.be.a('string');
            expect(data.strategy).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.options).to.be.a(Object);
            expect(data.options).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyEnterpriseSsoRead', function() {
        it('should call companyEnterpriseSsoRead successfully', function(done) {
          // TODO: uncomment, update parameter values for companyEnterpriseSsoRead call and complete the assertions
          /*
          var companyId = "companyId_example";

          instance.companyEnterpriseSsoRead(companyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.TeamEnterpriseSSO);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.connectionId).to.be.a('string');
            expect(data.connectionId).to.be("");
            expect(data.team).to.be.a('string');
            expect(data.team).to.be("");
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.strategy).to.be.a('string');
            expect(data.strategy).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.options).to.be.a(Object);
            expect(data.options).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIndicatorsCreate', function() {
        it('should call companyIndicatorsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIndicatorsCreate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.IntelDataIndicatorSerializer();
          data.communities = [new PerchApi.IntelDataCommunitySerializer()];
          data.communities[0].id = 0;
          data.observables = [new PerchApi.Observable()];
          data.observables[0].type = 0;
          data.observables[0].details = ;
          data.title = "";
          data.description = "";
          data.tlp = 0;
          data.confidence = 0;
          data.operator = 0;
          data.firstSighting = new Date();
          data.emailSummary = false;

          instance.companyIndicatorsCreate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.IntelDataIndicatorSerializer);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            {
              let dataCtr = data.communities;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.IntelDataCommunitySerializer);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            {
              let dataCtr = data.observables;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.Observable);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.observableId).to.be.a('string');
                expect(data.observableId).to.be("");
                expect(data.type).to.be.a('number');
                expect(data.type).to.be(0);
                expect(data.details).to.be.a(Object);
                expect(data.details).to.be();

                      }
            }
            expect(data.indicatorId).to.be.a('string');
            expect(data.indicatorId).to.be("");
            expect(data.perchId).to.be.a('string');
            expect(data.perchId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.tlp).to.be.a('number');
            expect(data.tlp).to.be(0);
            expect(data.confidence).to.be.a('number');
            expect(data.confidence).to.be(0);
            expect(data.operator).to.be.a('number');
            expect(data.operator).to.be(0);
            expect(data.firstSighting).to.be.a(Date);
            expect(data.firstSighting).to.be(new Date());
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.emailSummary).to.be.a('boolean');
            expect(data.emailSummary).to.be(false);
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIndicatorsDelete', function() {
        it('should call companyIndicatorsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIndicatorsDelete call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.companyIndicatorsDelete(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIndicatorsList', function() {
        it('should call companyIndicatorsList successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIndicatorsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";

          instance.companyIndicatorsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.IntelDataIndicatorSerializer);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              {
                let dataCtr = data.communities;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PerchApi.IntelDataCommunitySerializer);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.createdBy).to.be.a('number');
              expect(data.createdBy).to.be(0);
              {
                let dataCtr = data.observables;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PerchApi.Observable);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be(0);
                  expect(data.observableId).to.be.a('string');
                  expect(data.observableId).to.be("");
                  expect(data.type).to.be.a('number');
                  expect(data.type).to.be(0);
                  expect(data.details).to.be.a(Object);
                  expect(data.details).to.be();
  
                        }
              }
              expect(data.indicatorId).to.be.a('string');
              expect(data.indicatorId).to.be("");
              expect(data.perchId).to.be.a('string');
              expect(data.perchId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.tlp).to.be.a('number');
              expect(data.tlp).to.be(0);
              expect(data.confidence).to.be.a('number');
              expect(data.confidence).to.be(0);
              expect(data.operator).to.be.a('number');
              expect(data.operator).to.be(0);
              expect(data.firstSighting).to.be.a(Date);
              expect(data.firstSighting).to.be(new Date());
              expect(data.createdAt).to.be.a(Date);
              expect(data.createdAt).to.be(new Date());
              expect(data.updatedAt).to.be.a(Date);
              expect(data.updatedAt).to.be(new Date());
              expect(data.emailSummary).to.be.a('boolean');
              expect(data.emailSummary).to.be(false);
              expect(data.team).to.be.a('number');
              expect(data.team).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIndicatorsPartialUpdate', function() {
        it('should call companyIndicatorsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIndicatorsPartialUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.IntelDataIndicatorSerializer();
          data.communities = [new PerchApi.IntelDataCommunitySerializer()];
          data.communities[0].id = 0;
          data.observables = [new PerchApi.Observable()];
          data.observables[0].type = 0;
          data.observables[0].details = ;
          data.title = "";
          data.description = "";
          data.tlp = 0;
          data.confidence = 0;
          data.operator = 0;
          data.firstSighting = new Date();
          data.emailSummary = false;

          instance.companyIndicatorsPartialUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.IntelDataIndicatorSerializer);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            {
              let dataCtr = data.communities;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.IntelDataCommunitySerializer);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            {
              let dataCtr = data.observables;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.Observable);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.observableId).to.be.a('string');
                expect(data.observableId).to.be("");
                expect(data.type).to.be.a('number');
                expect(data.type).to.be(0);
                expect(data.details).to.be.a(Object);
                expect(data.details).to.be();

                      }
            }
            expect(data.indicatorId).to.be.a('string');
            expect(data.indicatorId).to.be("");
            expect(data.perchId).to.be.a('string');
            expect(data.perchId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.tlp).to.be.a('number');
            expect(data.tlp).to.be(0);
            expect(data.confidence).to.be.a('number');
            expect(data.confidence).to.be(0);
            expect(data.operator).to.be.a('number');
            expect(data.operator).to.be(0);
            expect(data.firstSighting).to.be.a(Date);
            expect(data.firstSighting).to.be(new Date());
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.emailSummary).to.be.a('boolean');
            expect(data.emailSummary).to.be(false);
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIndicatorsRead', function() {
        it('should call companyIndicatorsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIndicatorsRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.companyIndicatorsRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.IntelDataIndicatorSerializer);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            {
              let dataCtr = data.communities;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.IntelDataCommunitySerializer);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            {
              let dataCtr = data.observables;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.Observable);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.observableId).to.be.a('string');
                expect(data.observableId).to.be("");
                expect(data.type).to.be.a('number');
                expect(data.type).to.be(0);
                expect(data.details).to.be.a(Object);
                expect(data.details).to.be();

                      }
            }
            expect(data.indicatorId).to.be.a('string');
            expect(data.indicatorId).to.be("");
            expect(data.perchId).to.be.a('string');
            expect(data.perchId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.tlp).to.be.a('number');
            expect(data.tlp).to.be(0);
            expect(data.confidence).to.be.a('number');
            expect(data.confidence).to.be(0);
            expect(data.operator).to.be.a('number');
            expect(data.operator).to.be(0);
            expect(data.firstSighting).to.be.a(Date);
            expect(data.firstSighting).to.be(new Date());
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.emailSummary).to.be.a('boolean');
            expect(data.emailSummary).to.be(false);
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIndicatorsUpdate', function() {
        it('should call companyIndicatorsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIndicatorsUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.IntelDataIndicatorSerializer();
          data.communities = [new PerchApi.IntelDataCommunitySerializer()];
          data.communities[0].id = 0;
          data.observables = [new PerchApi.Observable()];
          data.observables[0].type = 0;
          data.observables[0].details = ;
          data.title = "";
          data.description = "";
          data.tlp = 0;
          data.confidence = 0;
          data.operator = 0;
          data.firstSighting = new Date();
          data.emailSummary = false;

          instance.companyIndicatorsUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.IntelDataIndicatorSerializer);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            {
              let dataCtr = data.communities;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.IntelDataCommunitySerializer);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            {
              let dataCtr = data.observables;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.Observable);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.observableId).to.be.a('string');
                expect(data.observableId).to.be("");
                expect(data.type).to.be.a('number');
                expect(data.type).to.be(0);
                expect(data.details).to.be.a(Object);
                expect(data.details).to.be();

                      }
            }
            expect(data.indicatorId).to.be.a('string');
            expect(data.indicatorId).to.be("");
            expect(data.perchId).to.be.a('string');
            expect(data.perchId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.tlp).to.be.a('number');
            expect(data.tlp).to.be(0);
            expect(data.confidence).to.be.a('number');
            expect(data.confidence).to.be(0);
            expect(data.operator).to.be.a('number');
            expect(data.operator).to.be(0);
            expect(data.firstSighting).to.be.a(Date);
            expect(data.firstSighting).to.be(new Date());
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.emailSummary).to.be.a('boolean');
            expect(data.emailSummary).to.be(false);
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIntegrationHealthLogsLatest', function() {
        it('should call companyIntegrationHealthLogsLatest successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIntegrationHealthLogsLatest call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.search = "search_example";
          opts.ordering = "ordering_example";
          opts.id = 8.14;
          opts.teamId = "teamId_example";
          opts.service = "service_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.companyIntegrationHealthLogsLatest(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse2002);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.TeamIntegrationLogEventWithTeam);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.timestamp).to.be.a(Date);
                expect(data.timestamp).to.be(new Date());
                expect(data.event).to.be.a('string');
                expect(data.event).to.be("");
                expect(data.wasSuccessful).to.be.a('boolean');
                expect(data.wasSuccessful).to.be(false);
                expect(data.payload).to.be.a('string');
                expect(data.payload).to.be("");
                expect(data.teamId).to.be.a('string');
                expect(data.teamId).to.be("");
                expect(data.teamName).to.be.a('string');
                expect(data.teamName).to.be("");
                expect(data.integrationId).to.be.a('string');
                expect(data.integrationId).to.be("");
                expect(data.service).to.be.a('string');
                expect(data.service).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIntegrationHealthLogsList', function() {
        it('should call companyIntegrationHealthLogsList successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIntegrationHealthLogsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.search = "search_example";
          opts.ordering = "ordering_example";
          opts.id = 8.14;
          opts.teamId = "teamId_example";
          opts.service = "service_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.companyIntegrationHealthLogsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse2002);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.TeamIntegrationLogEventWithTeam);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.timestamp).to.be.a(Date);
                expect(data.timestamp).to.be(new Date());
                expect(data.event).to.be.a('string');
                expect(data.event).to.be("");
                expect(data.wasSuccessful).to.be.a('boolean');
                expect(data.wasSuccessful).to.be(false);
                expect(data.payload).to.be.a('string');
                expect(data.payload).to.be("");
                expect(data.teamId).to.be.a('string');
                expect(data.teamId).to.be("");
                expect(data.teamName).to.be.a('string');
                expect(data.teamName).to.be("");
                expect(data.integrationId).to.be.a('string');
                expect(data.integrationId).to.be("");
                expect(data.service).to.be.a('string');
                expect(data.service).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIntegrationHealthLogsRead', function() {
        it('should call companyIntegrationHealthLogsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIntegrationHealthLogsRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.companyIntegrationHealthLogsRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.TeamIntegrationLogEventWithTeam);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());
            expect(data.event).to.be.a('string');
            expect(data.event).to.be("");
            expect(data.wasSuccessful).to.be.a('boolean');
            expect(data.wasSuccessful).to.be(false);
            expect(data.payload).to.be.a('string');
            expect(data.payload).to.be("");
            expect(data.teamId).to.be.a('string');
            expect(data.teamId).to.be("");
            expect(data.teamName).to.be.a('string');
            expect(data.teamName).to.be("");
            expect(data.integrationId).to.be.a('string');
            expect(data.integrationId).to.be("");
            expect(data.service).to.be.a('string');
            expect(data.service).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIntegrationsCreate', function() {
        it('should call companyIntegrationsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIntegrationsCreate call
          /*
          var companyId = "companyId_example";
          var integrationType = "integrationType_example";

          instance.companyIntegrationsCreate(companyId, integrationType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIntegrationsDelete', function() {
        it('should call companyIntegrationsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIntegrationsDelete call
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var integrationType = "integrationType_example";

          instance.companyIntegrationsDelete(companyId, id, integrationType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIntegrationsList', function() {
        it('should call companyIntegrationsList successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIntegrationsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.companyIntegrationsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse2003);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.TeamIntegration);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                expect(data.isActive).to.be.a('boolean');
                expect(data.isActive).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIntegrationsList_0', function() {
        it('should call companyIntegrationsList_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIntegrationsList_0 call
          /*
          var companyId = "companyId_example";
          var integrationType = "integrationType_example";
          var opts = {};
          opts.ordering = "ordering_example";

          instance.companyIntegrationsList_0(companyId, integrationType, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIntegrationsPartialUpdate', function() {
        it('should call companyIntegrationsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIntegrationsPartialUpdate call
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var integrationType = "integrationType_example";

          instance.companyIntegrationsPartialUpdate(companyId, id, integrationType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIntegrationsRead', function() {
        it('should call companyIntegrationsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIntegrationsRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.companyIntegrationsRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.TeamIntegration);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("");
            expect(data.isActive).to.be.a('boolean');
            expect(data.isActive).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIntegrationsRead_0', function() {
        it('should call companyIntegrationsRead_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIntegrationsRead_0 call
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var integrationType = "integrationType_example";

          instance.companyIntegrationsRead_0(companyId, id, integrationType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyIntegrationsUpdate', function() {
        it('should call companyIntegrationsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyIntegrationsUpdate call
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var integrationType = "integrationType_example";

          instance.companyIntegrationsUpdate(companyId, id, integrationType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyLoginsList', function() {
        it('should call companyLoginsList successfully', function(done) {
          // TODO: uncomment, update parameter values for companyLoginsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";
          opts.search = "search_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.companyLoginsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse2004);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.LoginAttempt);
                expect(data.time).to.be.a(Date);
                expect(data.time).to.be(new Date());
                expect(data.username).to.be.a('string');
                expect(data.username).to.be("");
                expect(data.successful).to.be.a('boolean');
                expect(data.successful).to.be(false);
                expect(data.ipAddress).to.be.a('string');
                expect(data.ipAddress).to.be("");
                expect(data.headers).to.be.a(Object);
                expect(data.headers).to.be();
                expect(data.geoip).to.be.a('string');
                expect(data.geoip).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyLoginsRead', function() {
        it('should call companyLoginsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for companyLoginsRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.companyLoginsRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.LoginAttempt);
            expect(data.time).to.be.a(Date);
            expect(data.time).to.be(new Date());
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.successful).to.be.a('boolean');
            expect(data.successful).to.be(false);
            expect(data.ipAddress).to.be.a('string');
            expect(data.ipAddress).to.be("");
            expect(data.headers).to.be.a(Object);
            expect(data.headers).to.be();
            expect(data.geoip).to.be.a('string');
            expect(data.geoip).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyMemberDelete', function() {
        it('should call companyMemberDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for companyMemberDelete call
          /*
          var companyId = "companyId_example";
          var userId = "userId_example";

          instance.companyMemberDelete(companyId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyMemberList', function() {
        it('should call companyMemberList successfully', function(done) {
          // TODO: uncomment, update parameter values for companyMemberList call
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";

          instance.companyMemberList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyMemberPartialUpdate', function() {
        it('should call companyMemberPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyMemberPartialUpdate call
          /*
          var companyId = "companyId_example";
          var userId = "userId_example";

          instance.companyMemberPartialUpdate(companyId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyMemberRead', function() {
        it('should call companyMemberRead successfully', function(done) {
          // TODO: uncomment, update parameter values for companyMemberRead call
          /*
          var companyId = "companyId_example";
          var userId = "userId_example";

          instance.companyMemberRead(companyId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyMemberUpdate', function() {
        it('should call companyMemberUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyMemberUpdate call
          /*
          var companyId = "companyId_example";
          var userId = "userId_example";

          instance.companyMemberUpdate(companyId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyNamesList', function() {
        it('should call companyNamesList successfully', function(done) {
          // TODO: uncomment companyNamesList call
          /*

          instance.companyNamesList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyNamesRead', function() {
        it('should call companyNamesRead successfully', function(done) {
          // TODO: uncomment, update parameter values for companyNamesRead call
          /*
          var id = "id_example";

          instance.companyNamesRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyRulesUpdate', function() {
        it('should call companyRulesUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyRulesUpdate call
          /*
          var companyId = "companyId_example";

          instance.companyRulesUpdate(companyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySensorHealthRead', function() {
        it('should call companySensorHealthRead successfully', function(done) {
          // TODO: uncomment, update parameter values for companySensorHealthRead call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.companySensorHealthRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySoftwareApprovalsCreate', function() {
        it('should call companySoftwareApprovalsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for companySoftwareApprovalsCreate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.SoftwareApproval();
          data.software = 0;
          data.team = 0;
          data.approvalState = 0;
          data.createdAt = new Date();
          data.createdBy = 0;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.companySoftwareApprovalsCreate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.SoftwareApproval);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.software).to.be.a('number');
            expect(data.software).to.be(0);
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.approvalState).to.be.a('number');
            expect(data.approvalState).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySoftwareApprovalsDelete', function() {
        it('should call companySoftwareApprovalsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for companySoftwareApprovalsDelete call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.companySoftwareApprovalsDelete(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySoftwareApprovalsList', function() {
        it('should call companySoftwareApprovalsList successfully', function(done) {
          // TODO: uncomment, update parameter values for companySoftwareApprovalsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";

          instance.companySoftwareApprovalsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.SoftwareApprovalList);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.software).to.be.a('string');
              expect(data.software).to.be("");
              expect(data.team).to.be.a('number');
              expect(data.team).to.be(0);
              expect(data.approvalState).to.be.a('string');
              expect(data.approvalState).to.be("");
              expect(data.createdAt).to.be.a(Date);
              expect(data.createdAt).to.be(new Date());
              expect(data.createdBy).to.be.a('number');
              expect(data.createdBy).to.be(0);
              expect(data.updatedAt).to.be.a(Date);
              expect(data.updatedAt).to.be(new Date());
              expect(data.updatedBy).to.be.a('number');
              expect(data.updatedBy).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySoftwareApprovalsPartialUpdate', function() {
        it('should call companySoftwareApprovalsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companySoftwareApprovalsPartialUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.SoftwareApproval();
          data.software = 0;
          data.team = 0;
          data.approvalState = 0;
          data.createdAt = new Date();
          data.createdBy = 0;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.companySoftwareApprovalsPartialUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.SoftwareApproval);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.software).to.be.a('number');
            expect(data.software).to.be(0);
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.approvalState).to.be.a('number');
            expect(data.approvalState).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySoftwareApprovalsRead', function() {
        it('should call companySoftwareApprovalsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for companySoftwareApprovalsRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.companySoftwareApprovalsRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.SoftwareApprovalList);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.software).to.be.a('string');
            expect(data.software).to.be("");
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.approvalState).to.be.a('string');
            expect(data.approvalState).to.be("");
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySoftwareApprovalsUpdate', function() {
        it('should call companySoftwareApprovalsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companySoftwareApprovalsUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.SoftwareApproval();
          data.software = 0;
          data.team = 0;
          data.approvalState = 0;
          data.createdAt = new Date();
          data.createdBy = 0;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.companySoftwareApprovalsUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.SoftwareApproval);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.software).to.be.a('number');
            expect(data.software).to.be(0);
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.approvalState).to.be.a('number');
            expect(data.approvalState).to.be(0);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySubnetsCreate', function() {
        it('should call companySubnetsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for companySubnetsCreate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.NetworkSubnet();
          data.cidr = "";
          data.name = "";
          data.description = "";
          data.monitored = false;
          data.createdAt = new Date();
          data.createdBy = 0;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.companySubnetsCreate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.NetworkSubnet);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.cidr).to.be.a('string');
            expect(data.cidr).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.monitored).to.be.a('boolean');
            expect(data.monitored).to.be(false);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySubnetsDelete', function() {
        it('should call companySubnetsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for companySubnetsDelete call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.companySubnetsDelete(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySubnetsList', function() {
        it('should call companySubnetsList successfully', function(done) {
          // TODO: uncomment, update parameter values for companySubnetsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";

          instance.companySubnetsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.NetworkSubnet);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.team).to.be.a('number');
              expect(data.team).to.be(0);
              expect(data.cidr).to.be.a('string');
              expect(data.cidr).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.monitored).to.be.a('boolean');
              expect(data.monitored).to.be(false);
              expect(data.createdAt).to.be.a(Date);
              expect(data.createdAt).to.be(new Date());
              expect(data.createdBy).to.be.a('number');
              expect(data.createdBy).to.be(0);
              expect(data.updatedAt).to.be.a(Date);
              expect(data.updatedAt).to.be(new Date());
              expect(data.updatedBy).to.be.a('number');
              expect(data.updatedBy).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySubnetsPartialUpdate', function() {
        it('should call companySubnetsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companySubnetsPartialUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.NetworkSubnet();
          data.cidr = "";
          data.name = "";
          data.description = "";
          data.monitored = false;
          data.createdAt = new Date();
          data.createdBy = 0;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.companySubnetsPartialUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.NetworkSubnet);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.cidr).to.be.a('string');
            expect(data.cidr).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.monitored).to.be.a('boolean');
            expect(data.monitored).to.be(false);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySubnetsRead', function() {
        it('should call companySubnetsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for companySubnetsRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.companySubnetsRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.NetworkSubnet);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.cidr).to.be.a('string');
            expect(data.cidr).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.monitored).to.be.a('boolean');
            expect(data.monitored).to.be(false);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySubnetsUpdate', function() {
        it('should call companySubnetsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companySubnetsUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.NetworkSubnet();
          data.cidr = "";
          data.name = "";
          data.description = "";
          data.monitored = false;
          data.createdAt = new Date();
          data.createdBy = 0;
          data.updatedAt = new Date();
          data.updatedBy = 0;

          instance.companySubnetsUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.NetworkSubnet);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.cidr).to.be.a('string');
            expect(data.cidr).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.monitored).to.be.a('boolean');
            expect(data.monitored).to.be(false);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.createdBy).to.be.a('number');
            expect(data.createdBy).to.be(0);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            expect(data.updatedBy).to.be.a('number');
            expect(data.updatedBy).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySuppressionsBulkCidrs', function() {
        it('should call companySuppressionsBulkCidrs successfully', function(done) {
          // TODO: uncomment, update parameter values for companySuppressionsBulkCidrs call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.AlertSuppression();
          data.teamId = 0;
          data.reasonDetail = 0;
          data.indicatorId = "";
          data.observableId = "";
          data.duration = 0;
          data.reason = 0;
          data.notes = "";
          data.sendEmail = false;
          data.scope = 0;
          data.community = 0;
          data.cidr = "";
          data.cwAutomateScripts = [0];

          instance.companySuppressionsBulkCidrs(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.AlertSuppression);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.userId).to.be.a('number');
            expect(data.userId).to.be(0);
            expect(data.teamId).to.be.a('number');
            expect(data.teamId).to.be(0);
            expect(data.userFullName).to.be.a('string');
            expect(data.userFullName).to.be("");
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.reasonDetail).to.be.a('number');
            expect(data.reasonDetail).to.be(0);
            expect(data.observableTitle).to.be.a('string');
            expect(data.observableTitle).to.be("");
            expect(data.indicatorId).to.be.a('string');
            expect(data.indicatorId).to.be("");
            expect(data.indicatorTitle).to.be.a('string');
            expect(data.indicatorTitle).to.be("");
            expect(data.observableId).to.be.a('string');
            expect(data.observableId).to.be("");
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.suppressUntil).to.be.a(Date);
            expect(data.suppressUntil).to.be(new Date());
            expect(data.duration).to.be.a('number');
            expect(data.duration).to.be(0);
            expect(data.reason).to.be.a('number');
            expect(data.reason).to.be(0);
            expect(data.notes).to.be.a('string');
            expect(data.notes).to.be("");
            expect(data.sendEmail).to.be.a('boolean');
            expect(data.sendEmail).to.be(false);
            expect(data.hits).to.be.a('number');
            expect(data.hits).to.be(0);
            expect(data.latestHit).to.be.a(Date);
            expect(data.latestHit).to.be(new Date());
            expect(data.scope).to.be.a('number');
            expect(data.scope).to.be(0);
            expect(data.community).to.be.a('number');
            expect(data.community).to.be(0);
            expect(data.cidr).to.be.a('string');
            expect(data.cidr).to.be("");
            expect(data.suppressedAlertIds).to.be.a('string');
            expect(data.suppressedAlertIds).to.be("");
            expect(data.latestAlert).to.be.a('string');
            expect(data.latestAlert).to.be("");
            {
              let dataCtr = data.cwAutomateScripts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySuppressionsCreate', function() {
        it('should call companySuppressionsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for companySuppressionsCreate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.AlertSuppression();
          data.teamId = 0;
          data.reasonDetail = 0;
          data.indicatorId = "";
          data.observableId = "";
          data.duration = 0;
          data.reason = 0;
          data.notes = "";
          data.sendEmail = false;
          data.scope = 0;
          data.community = 0;
          data.cidr = "";
          data.cwAutomateScripts = [0];

          instance.companySuppressionsCreate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.AlertSuppression);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.userId).to.be.a('number');
            expect(data.userId).to.be(0);
            expect(data.teamId).to.be.a('number');
            expect(data.teamId).to.be(0);
            expect(data.userFullName).to.be.a('string');
            expect(data.userFullName).to.be("");
            expect(data.team).to.be.a('number');
            expect(data.team).to.be(0);
            expect(data.reasonDetail).to.be.a('number');
            expect(data.reasonDetail).to.be(0);
            expect(data.observableTitle).to.be.a('string');
            expect(data.observableTitle).to.be("");
            expect(data.indicatorId).to.be.a('string');
            expect(data.indicatorId).to.be("");
            expect(data.indicatorTitle).to.be.a('string');
            expect(data.indicatorTitle).to.be("");
            expect(data.observableId).to.be.a('string');
            expect(data.observableId).to.be("");
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.suppressUntil).to.be.a(Date);
            expect(data.suppressUntil).to.be(new Date());
            expect(data.duration).to.be.a('number');
            expect(data.duration).to.be(0);
            expect(data.reason).to.be.a('number');
            expect(data.reason).to.be(0);
            expect(data.notes).to.be.a('string');
            expect(data.notes).to.be("");
            expect(data.sendEmail).to.be.a('boolean');
            expect(data.sendEmail).to.be(false);
            expect(data.hits).to.be.a('number');
            expect(data.hits).to.be(0);
            expect(data.latestHit).to.be.a(Date);
            expect(data.latestHit).to.be(new Date());
            expect(data.scope).to.be.a('number');
            expect(data.scope).to.be(0);
            expect(data.community).to.be.a('number');
            expect(data.community).to.be(0);
            expect(data.cidr).to.be.a('string');
            expect(data.cidr).to.be("");
            expect(data.suppressedAlertIds).to.be.a('string');
            expect(data.suppressedAlertIds).to.be("");
            expect(data.latestAlert).to.be.a('string');
            expect(data.latestAlert).to.be("");
            {
              let dataCtr = data.cwAutomateScripts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySuppressionsDelete', function() {
        it('should call companySuppressionsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for companySuppressionsDelete call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.companySuppressionsDelete(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companySuppressionsList', function() {
        it('should call companySuppressionsList successfully', function(done) {
          // TODO: uncomment, update parameter values for companySuppressionsList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";
          opts.p = 56;
          opts.ps = 56;

          instance.companySuppressionsList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse200);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.AlertSuppression);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.userId).to.be.a('number');
                expect(data.userId).to.be(0);
                expect(data.teamId).to.be.a('number');
                expect(data.teamId).to.be(0);
                expect(data.userFullName).to.be.a('string');
                expect(data.userFullName).to.be("");
                expect(data.team).to.be.a('number');
                expect(data.team).to.be(0);
                expect(data.reasonDetail).to.be.a('number');
                expect(data.reasonDetail).to.be(0);
                expect(data.observableTitle).to.be.a('string');
                expect(data.observableTitle).to.be("");
                expect(data.indicatorId).to.be.a('string');
                expect(data.indicatorId).to.be("");
                expect(data.indicatorTitle).to.be.a('string');
                expect(data.indicatorTitle).to.be("");
                expect(data.observableId).to.be.a('string');
                expect(data.observableId).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(new Date());
                expect(data.suppressUntil).to.be.a(Date);
                expect(data.suppressUntil).to.be(new Date());
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.reason).to.be.a('number');
                expect(data.reason).to.be(0);
                expect(data.notes).to.be.a('string');
                expect(data.notes).to.be("");
                expect(data.sendEmail).to.be.a('boolean');
                expect(data.sendEmail).to.be(false);
                expect(data.hits).to.be.a('number');
                expect(data.hits).to.be(0);
                expect(data.latestHit).to.be.a(Date);
                expect(data.latestHit).to.be(new Date());
                expect(data.scope).to.be.a('number');
                expect(data.scope).to.be(0);
                expect(data.community).to.be.a('number');
                expect(data.community).to.be(0);
                expect(data.cidr).to.be.a('string');
                expect(data.cidr).to.be("");
                expect(data.suppressedAlertIds).to.be.a('string');
                expect(data.suppressedAlertIds).to.be("");
                expect(data.latestAlert).to.be.a('string');
                expect(data.latestAlert).to.be("");
                {
                  let dataCtr = data.cwAutomateScripts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyWebhooksCreate', function() {
        it('should call companyWebhooksCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyWebhooksCreate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var data = new PerchApi.TeamWebhook();
          data.event = "";
          data.target = "";

          instance.companyWebhooksCreate(companyId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.TeamWebhook);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());
            expect(data.event).to.be.a('string');
            expect(data.event).to.be("");
            expect(data.target).to.be.a('string');
            expect(data.target).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyWebhooksDelete', function() {
        it('should call companyWebhooksDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for companyWebhooksDelete call
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.companyWebhooksDelete(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyWebhooksList', function() {
        it('should call companyWebhooksList successfully', function(done) {
          // TODO: uncomment, update parameter values for companyWebhooksList call and complete the assertions
          /*
          var companyId = "companyId_example";
          var opts = {};
          opts.ordering = "ordering_example";

          instance.companyWebhooksList(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.TeamWebhook);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.updated).to.be.a(Date);
              expect(data.updated).to.be(new Date());
              expect(data.event).to.be.a('string');
              expect(data.event).to.be("");
              expect(data.target).to.be.a('string');
              expect(data.target).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyWebhooksPartialUpdate', function() {
        it('should call companyWebhooksPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyWebhooksPartialUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.TeamWebhook();
          data.event = "";
          data.target = "";

          instance.companyWebhooksPartialUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.TeamWebhook);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());
            expect(data.event).to.be.a('string');
            expect(data.event).to.be("");
            expect(data.target).to.be.a('string');
            expect(data.target).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyWebhooksRead', function() {
        it('should call companyWebhooksRead successfully', function(done) {
          // TODO: uncomment, update parameter values for companyWebhooksRead call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";

          instance.companyWebhooksRead(companyId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.TeamWebhook);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());
            expect(data.event).to.be.a('string');
            expect(data.event).to.be("");
            expect(data.target).to.be.a('string');
            expect(data.target).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyWebhooksUpdate', function() {
        it('should call companyWebhooksUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for companyWebhooksUpdate call and complete the assertions
          /*
          var companyId = "companyId_example";
          var id = "id_example";
          var data = new PerchApi.TeamWebhook();
          data.event = "";
          data.target = "";

          instance.companyWebhooksUpdate(companyId, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.TeamWebhook);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());
            expect(data.event).to.be.a('string');
            expect(data.event).to.be("");
            expect(data.target).to.be.a('string');
            expect(data.target).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
