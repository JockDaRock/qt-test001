/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PerchApi);
  }
}(this, function(expect, PerchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PerchApi.ObjectDetailApi();
  });

  describe('(package)', function() {
    describe('ObjectDetailApi', function() {
      describe('objectDetailCommentsList', function() {
        it('should call objectDetailCommentsList successfully', function(done) {
          // TODO: uncomment, update parameter values for objectDetailCommentsList call and complete the assertions
          /*
          var indicatorId = "indicatorId_example";
          var opts = {};
          opts.ordering = "ordering_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.objectDetailCommentsList(indicatorId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse2006);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.Comment);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.groupId).to.be.a('number');
                expect(data.groupId).to.be(0);
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.privateFor).to.be.a('number');
                expect(data.privateFor).to.be(0);
                expect(data.anonymous).to.be.a('boolean');
                expect(data.anonymous).to.be(false);
                expect(data.visibility).to.be.a('number');
                expect(data.visibility).to.be(0);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(new Date());
                expect(data.canDelete).to.be.a('string');
                expect(data.canDelete).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('objectDetailHistoryList', function() {
        it('should call objectDetailHistoryList successfully', function(done) {
          // TODO: uncomment, update parameter values for objectDetailHistoryList call
          /*
          var indicatorId = "indicatorId_example";

          instance.objectDetailHistoryList(indicatorId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('objectDetailRead', function() {
        it('should call objectDetailRead successfully', function(done) {
          // TODO: uncomment, update parameter values for objectDetailRead call
          /*
          var indicatorId = "indicatorId_example";

          instance.objectDetailRead(indicatorId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('objectDetailSightingsList', function() {
        it('should call objectDetailSightingsList successfully', function(done) {
          // TODO: uncomment, update parameter values for objectDetailSightingsList call
          /*
          var indicatorId = "indicatorId_example";

          instance.objectDetailSightingsList(indicatorId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('objectDetailSuppressionsList', function() {
        it('should call objectDetailSuppressionsList successfully', function(done) {
          // TODO: uncomment, update parameter values for objectDetailSuppressionsList call
          /*
          var indicatorId = "indicatorId_example";

          instance.objectDetailSuppressionsList(indicatorId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
