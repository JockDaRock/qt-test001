/*
 * Perch API
 * Interactive documentation functionality is incomplete and may not work as expected. We recommend you connect with a REST client such as Postman, Httpie, or even plan old CURL.   Obtain your API username, password, and key from your <a href=\"https://app.perchsecurity.com/user/groups\" target=\"blank\">group settings</a>   <br><h4>Root URL</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>Base URL</td><td>https://api.perch.rocks</td></tr><tr><td>Version</td><td>v1</td></tr></table>   <br><h4>Headers</h4><table class=\"parameters table table-bordered table-striped\"><tr><td>x-api-key</td><td>(your api key from the group settings page)</td></tr><tr><td>Authorization</td><td>Bearer (your access token returned from /auth/access_token)</td></tr></table>
 *
 * OpenAPI spec version: v1
 * Contact: help@perchsecurity.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PerchApi);
  }
}(this, function(expect, PerchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PerchApi.UserApi();
  });

  describe('(package)', function() {
    describe('UserApi', function() {
      describe('userCompanyCreate', function() {
        it('should call userCompanyCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for userCompanyCreate call and complete the assertions
          /*
          var data = new PerchApi.JoinTeam();
          data.inviteCode = "";

          instance.userCompanyCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.JoinTeam);
            expect(data.inviteCode).to.be.a('string');
            expect(data.inviteCode).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCompanyDelete', function() {
        it('should call userCompanyDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for userCompanyDelete call
          /*
          var team = "team_example";

          instance.userCompanyDelete(team, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCompanyList', function() {
        it('should call userCompanyList successfully', function(done) {
          // TODO: uncomment, update parameter values for userCompanyList call and complete the assertions
          /*
          var opts = {};
          opts.ordering = "ordering_example";

          instance.userCompanyList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PerchApi.UserTeamList);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.role).to.be.a('number');
              expect(data.role).to.be(0);
              expect(data.isMssp).to.be.a('string');
              expect(data.isMssp).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCompanyRead', function() {
        it('should call userCompanyRead successfully', function(done) {
          // TODO: uncomment, update parameter values for userCompanyRead call and complete the assertions
          /*
          var team = "team_example";

          instance.userCompanyRead(team, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.UserTeamList);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.role).to.be.a('number');
            expect(data.role).to.be(0);
            expect(data.isMssp).to.be.a('string');
            expect(data.isMssp).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userIndicatorsList', function() {
        it('should call userIndicatorsList successfully', function(done) {
          // TODO: uncomment userIndicatorsList call
          /*

          instance.userIndicatorsList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userLoginsList', function() {
        it('should call userLoginsList successfully', function(done) {
          // TODO: uncomment, update parameter values for userLoginsList call and complete the assertions
          /*
          var opts = {};
          opts.ordering = "ordering_example";
          opts.search = "search_example";
          opts.pageNumber = 56;
          opts.pageSize = 56;

          instance.userLoginsList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.InlineResponse2004);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PerchApi.LoginAttempt);
                expect(data.time).to.be.a(Date);
                expect(data.time).to.be(new Date());
                expect(data.username).to.be.a('string');
                expect(data.username).to.be("");
                expect(data.successful).to.be.a('boolean');
                expect(data.successful).to.be(false);
                expect(data.ipAddress).to.be.a('string');
                expect(data.ipAddress).to.be("");
                expect(data.headers).to.be.a(Object);
                expect(data.headers).to.be();
                expect(data.geoip).to.be.a('string');
                expect(data.geoip).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userMePartialUpdate', function() {
        it('should call userMePartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for userMePartialUpdate call and complete the assertions
          /*
          var data = new PerchApi.AboutMe();
          data.prefs = new PerchApi.Preference();
          data.prefs.emailIndicatorUpdates = false;
          data.prefs.inactivityTimeout = 0;
          data.prefs.openLinksInNewTab = false;
          data.prefs.showTimesAsUtc = false;
          data.prefs.showTimesAsMilitary = false;
          data.prefs.showSinceYouveBeenGone = false;
          data.prefs.showAlertPayloadOnHover = false;
          data.prefs.allowPerchybanaLinkMetaKeys = false;
          data.prefs.perchybanaLinkMetaKeys = ;
          data.username = "";
          data.firstName = "";
          data.lastName = "";
          data.address1 = "";
          data.address2 = "";
          data.city = "";
          data.state = "";
          data.postalCode = "";
          data.phone = "";

          instance.userMePartialUpdate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.AboutMe);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.prefs).to.be.a(PerchApi.Preference);
                  expect(data.prefs.emailIndicatorUpdates).to.be.a('boolean');
              expect(data.prefs.emailIndicatorUpdates).to.be(false);
              expect(data.prefs.inactivityTimeout).to.be.a('number');
              expect(data.prefs.inactivityTimeout).to.be(0);
              expect(data.prefs.openLinksInNewTab).to.be.a('boolean');
              expect(data.prefs.openLinksInNewTab).to.be(false);
              expect(data.prefs.showTimesAsUtc).to.be.a('boolean');
              expect(data.prefs.showTimesAsUtc).to.be(false);
              expect(data.prefs.showTimesAsMilitary).to.be.a('boolean');
              expect(data.prefs.showTimesAsMilitary).to.be(false);
              expect(data.prefs.showSinceYouveBeenGone).to.be.a('boolean');
              expect(data.prefs.showSinceYouveBeenGone).to.be(false);
              expect(data.prefs.showAlertPayloadOnHover).to.be.a('boolean');
              expect(data.prefs.showAlertPayloadOnHover).to.be(false);
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be.a('boolean');
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be(false);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be.a(Object);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be();
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.address1).to.be.a('string');
            expect(data.address1).to.be("");
            expect(data.address2).to.be.a('string');
            expect(data.address2).to.be("");
            expect(data.city).to.be.a('string');
            expect(data.city).to.be("");
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("");
            expect(data.postalCode).to.be.a('string');
            expect(data.postalCode).to.be("");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.staff).to.be.a('boolean');
            expect(data.staff).to.be(false);
            expect(data.isMsspMember).to.be.a('boolean');
            expect(data.isMsspMember).to.be(false);
            expect(data.company).to.be.a('string');
            expect(data.company).to.be("");
            expect(data.community).to.be.a('string');
            expect(data.community).to.be("");
            expect(data.tours).to.be.a('string');
            expect(data.tours).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userMeRead', function() {
        it('should call userMeRead successfully', function(done) {
          // TODO: uncomment userMeRead call and complete the assertions
          /*

          instance.userMeRead(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.AboutMe);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.prefs).to.be.a(PerchApi.Preference);
                  expect(data.prefs.emailIndicatorUpdates).to.be.a('boolean');
              expect(data.prefs.emailIndicatorUpdates).to.be(false);
              expect(data.prefs.inactivityTimeout).to.be.a('number');
              expect(data.prefs.inactivityTimeout).to.be(0);
              expect(data.prefs.openLinksInNewTab).to.be.a('boolean');
              expect(data.prefs.openLinksInNewTab).to.be(false);
              expect(data.prefs.showTimesAsUtc).to.be.a('boolean');
              expect(data.prefs.showTimesAsUtc).to.be(false);
              expect(data.prefs.showTimesAsMilitary).to.be.a('boolean');
              expect(data.prefs.showTimesAsMilitary).to.be(false);
              expect(data.prefs.showSinceYouveBeenGone).to.be.a('boolean');
              expect(data.prefs.showSinceYouveBeenGone).to.be(false);
              expect(data.prefs.showAlertPayloadOnHover).to.be.a('boolean');
              expect(data.prefs.showAlertPayloadOnHover).to.be(false);
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be.a('boolean');
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be(false);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be.a(Object);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be();
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.address1).to.be.a('string');
            expect(data.address1).to.be("");
            expect(data.address2).to.be.a('string');
            expect(data.address2).to.be("");
            expect(data.city).to.be.a('string');
            expect(data.city).to.be("");
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("");
            expect(data.postalCode).to.be.a('string');
            expect(data.postalCode).to.be("");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.staff).to.be.a('boolean');
            expect(data.staff).to.be(false);
            expect(data.isMsspMember).to.be.a('boolean');
            expect(data.isMsspMember).to.be(false);
            expect(data.company).to.be.a('string');
            expect(data.company).to.be("");
            expect(data.community).to.be.a('string');
            expect(data.community).to.be("");
            expect(data.tours).to.be.a('string');
            expect(data.tours).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userMeSensorList', function() {
        it('should call userMeSensorList successfully', function(done) {
          // TODO: uncomment userMeSensorList call
          /*

          instance.userMeSensorList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userPartialUpdate', function() {
        it('should call userPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for userPartialUpdate call and complete the assertions
          /*
          var userId = "userId_example";
          var data = new PerchApi.AboutMe();
          data.prefs = new PerchApi.Preference();
          data.prefs.emailIndicatorUpdates = false;
          data.prefs.inactivityTimeout = 0;
          data.prefs.openLinksInNewTab = false;
          data.prefs.showTimesAsUtc = false;
          data.prefs.showTimesAsMilitary = false;
          data.prefs.showSinceYouveBeenGone = false;
          data.prefs.showAlertPayloadOnHover = false;
          data.prefs.allowPerchybanaLinkMetaKeys = false;
          data.prefs.perchybanaLinkMetaKeys = ;
          data.username = "";
          data.firstName = "";
          data.lastName = "";
          data.address1 = "";
          data.address2 = "";
          data.city = "";
          data.state = "";
          data.postalCode = "";
          data.phone = "";

          instance.userPartialUpdate(userId, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.AboutMe);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.prefs).to.be.a(PerchApi.Preference);
                  expect(data.prefs.emailIndicatorUpdates).to.be.a('boolean');
              expect(data.prefs.emailIndicatorUpdates).to.be(false);
              expect(data.prefs.inactivityTimeout).to.be.a('number');
              expect(data.prefs.inactivityTimeout).to.be(0);
              expect(data.prefs.openLinksInNewTab).to.be.a('boolean');
              expect(data.prefs.openLinksInNewTab).to.be(false);
              expect(data.prefs.showTimesAsUtc).to.be.a('boolean');
              expect(data.prefs.showTimesAsUtc).to.be(false);
              expect(data.prefs.showTimesAsMilitary).to.be.a('boolean');
              expect(data.prefs.showTimesAsMilitary).to.be(false);
              expect(data.prefs.showSinceYouveBeenGone).to.be.a('boolean');
              expect(data.prefs.showSinceYouveBeenGone).to.be(false);
              expect(data.prefs.showAlertPayloadOnHover).to.be.a('boolean');
              expect(data.prefs.showAlertPayloadOnHover).to.be(false);
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be.a('boolean');
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be(false);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be.a(Object);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be();
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.address1).to.be.a('string');
            expect(data.address1).to.be("");
            expect(data.address2).to.be.a('string');
            expect(data.address2).to.be("");
            expect(data.city).to.be.a('string');
            expect(data.city).to.be("");
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("");
            expect(data.postalCode).to.be.a('string');
            expect(data.postalCode).to.be("");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.staff).to.be.a('boolean');
            expect(data.staff).to.be(false);
            expect(data.isMsspMember).to.be.a('boolean');
            expect(data.isMsspMember).to.be(false);
            expect(data.company).to.be.a('string');
            expect(data.company).to.be("");
            expect(data.community).to.be.a('string');
            expect(data.community).to.be("");
            expect(data.tours).to.be.a('string');
            expect(data.tours).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userPasswordChangeUpdate', function() {
        it('should call userPasswordChangeUpdate successfully', function(done) {
          // TODO: uncomment userPasswordChangeUpdate call
          /*

          instance.userPasswordChangeUpdate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userPasswordForgotCreate', function() {
        it('should call userPasswordForgotCreate successfully', function(done) {
          // TODO: uncomment userPasswordForgotCreate call
          /*

          instance.userPasswordForgotCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userPasswordResetUpdate', function() {
        it('should call userPasswordResetUpdate successfully', function(done) {
          // TODO: uncomment userPasswordResetUpdate call
          /*

          instance.userPasswordResetUpdate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userRead', function() {
        it('should call userRead successfully', function(done) {
          // TODO: uncomment, update parameter values for userRead call and complete the assertions
          /*
          var userId = "userId_example";

          instance.userRead(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PerchApi.AboutMe);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.prefs).to.be.a(PerchApi.Preference);
                  expect(data.prefs.emailIndicatorUpdates).to.be.a('boolean');
              expect(data.prefs.emailIndicatorUpdates).to.be(false);
              expect(data.prefs.inactivityTimeout).to.be.a('number');
              expect(data.prefs.inactivityTimeout).to.be(0);
              expect(data.prefs.openLinksInNewTab).to.be.a('boolean');
              expect(data.prefs.openLinksInNewTab).to.be(false);
              expect(data.prefs.showTimesAsUtc).to.be.a('boolean');
              expect(data.prefs.showTimesAsUtc).to.be(false);
              expect(data.prefs.showTimesAsMilitary).to.be.a('boolean');
              expect(data.prefs.showTimesAsMilitary).to.be(false);
              expect(data.prefs.showSinceYouveBeenGone).to.be.a('boolean');
              expect(data.prefs.showSinceYouveBeenGone).to.be(false);
              expect(data.prefs.showAlertPayloadOnHover).to.be.a('boolean');
              expect(data.prefs.showAlertPayloadOnHover).to.be(false);
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be.a('boolean');
              expect(data.prefs.allowPerchybanaLinkMetaKeys).to.be(false);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be.a(Object);
              expect(data.prefs.perchybanaLinkMetaKeys).to.be();
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.address1).to.be.a('string');
            expect(data.address1).to.be("");
            expect(data.address2).to.be.a('string');
            expect(data.address2).to.be("");
            expect(data.city).to.be.a('string');
            expect(data.city).to.be("");
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("");
            expect(data.postalCode).to.be.a('string');
            expect(data.postalCode).to.be("");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.staff).to.be.a('boolean');
            expect(data.staff).to.be(false);
            expect(data.isMsspMember).to.be.a('boolean');
            expect(data.isMsspMember).to.be(false);
            expect(data.company).to.be.a('string');
            expect(data.company).to.be("");
            expect(data.community).to.be.a('string');
            expect(data.community).to.be("");
            expect(data.tours).to.be.a('string');
            expect(data.tours).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userSensorsList', function() {
        it('should call userSensorsList successfully', function(done) {
          // TODO: uncomment userSensorsList call
          /*

          instance.userSensorsList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userTourUpdate', function() {
        it('should call userTourUpdate successfully', function(done) {
          // TODO: uncomment userTourUpdate call
          /*

          instance.userTourUpdate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
